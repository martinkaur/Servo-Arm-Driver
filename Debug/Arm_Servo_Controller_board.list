
Arm_Servo_Controller_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b368  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b508  0800b508  0000c508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b998  0800b998  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b998  0800b998  0000c998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9a0  0800b9a0  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9a0  0800b9a0  0000c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9a4  0800b9a4  0000c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b9a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          0000055c  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000734  20000734  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015972  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034fe  00000000  00000000  00022b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00026078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d63  00000000  00000000  000271d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e69  00000000  00000000  00027f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ecf  00000000  00000000  0004bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d56e8  00000000  00000000  00065c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b353  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057b4  00000000  00000000  0013b398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00140b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4f0 	.word	0x0800b4f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b4f0 	.word	0x0800b4f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bda:	4b43      	ldr	r3, [pc, #268]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000bdc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000be0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000be2:	4b41      	ldr	r3, [pc, #260]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000be4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000be8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c04:	4b38      	ldr	r3, [pc, #224]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c10:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000c16:	4b34      	ldr	r3, [pc, #208]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c24:	4b30      	ldr	r3, [pc, #192]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c36:	482c      	ldr	r0, [pc, #176]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c38:	f001 fea6 	bl	8002988 <HAL_ADC_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c42:	f000 fc61 	bl	8001508 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4825      	ldr	r0, [pc, #148]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c52:	f002 fc99 	bl	8003588 <HAL_ADCEx_MultiModeConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c5c:	f000 fc54 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481a      	ldr	r0, [pc, #104]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c7e:	f002 f999 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000c88:	f000 fc3e 	bl	8001508 <Error_Handler>
  }


  /* USER CODE BEGIN ADC1_Init 2 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000c9a:	f002 f98b 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0xf0>
	  {
		Error_Handler();
 8000ca4:	f000 fc30 	bl	8001508 <Error_Handler>
	  }

	sConfig.Channel = ADC_CHANNEL_3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cac:	2303      	movs	r3, #3
 8000cae:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000cb6:	f002 f97d 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x10c>
		{
		  Error_Handler();
 8000cc0:	f000 fc22 	bl	8001508 <Error_Handler>
		}

	sConfig.Channel = ADC_CHANNEL_4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_ADC1_Init+0x130>)
 8000cd2:	f002 f96f 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x128>
	  {
		Error_Handler();
 8000cdc:	f000 fc14 	bl	8001508 <Error_Handler>
	  }
  /* USER CODE END ADC1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001f4 	.word	0x200001f4

08000cec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d02:	4b27      	ldr	r3, [pc, #156]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d04:	4a27      	ldr	r2, [pc, #156]	@ (8000da4 <MX_ADC2_Init+0xb8>)
 8000d06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d08:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d10:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d5c:	4810      	ldr	r0, [pc, #64]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d5e:	f001 fe13 	bl	8002988 <HAL_ADC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000d68:	f000 fbce 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_ADC2_Init+0xb4>)
 8000d8a:	f002 f913 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000d94:	f000 fbb8 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000244 	.word	0x20000244
 8000da4:	50000100 	.word	0x50000100

08000da8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dc8:	d156      	bne.n	8000e78 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dca:	4b5b      	ldr	r3, [pc, #364]	@ (8000f38 <HAL_ADC_MspInit+0x190>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a59      	ldr	r2, [pc, #356]	@ (8000f38 <HAL_ADC_MspInit+0x190>)
 8000dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dd4:	4b58      	ldr	r3, [pc, #352]	@ (8000f38 <HAL_ADC_MspInit+0x190>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ddc:	4b57      	ldr	r3, [pc, #348]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a56      	ldr	r2, [pc, #344]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	6153      	str	r3, [r2, #20]
 8000de8:	4b54      	ldr	r3, [pc, #336]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a50      	ldr	r2, [pc, #320]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e22:	f003 f913 	bl	800404c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e26:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e28:	4a46      	ldr	r2, [pc, #280]	@ (8000f44 <HAL_ADC_MspInit+0x19c>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2c:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	4b41      	ldr	r3, [pc, #260]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e3a:	2280      	movs	r2, #128	@ 0x80
 8000e3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e3e:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e46:	4b3e      	ldr	r3, [pc, #248]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e50:	2220      	movs	r2, #32
 8000e52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e54:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e5a:	4839      	ldr	r0, [pc, #228]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e5c:	f002 fec7 	bl	8003bee <HAL_DMA_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000e66:	f000 fb4f 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a34      	ldr	r2, [pc, #208]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e70:	4a33      	ldr	r2, [pc, #204]	@ (8000f40 <HAL_ADC_MspInit+0x198>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e76:	e05a      	b.n	8000f2e <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a32      	ldr	r2, [pc, #200]	@ (8000f48 <HAL_ADC_MspInit+0x1a0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d155      	bne.n	8000f2e <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_ADC_MspInit+0x190>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a2b      	ldr	r2, [pc, #172]	@ (8000f38 <HAL_ADC_MspInit+0x190>)
 8000e8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <HAL_ADC_MspInit+0x190>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10b      	bne.n	8000eac <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4a28      	ldr	r2, [pc, #160]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9e:	6153      	str	r3, [r2, #20]
 8000ea0:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb6:	6153      	str	r3, [r2, #20]
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <HAL_ADC_MspInit+0x194>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eda:	f003 f8b7 	bl	800404c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_ADC_MspInit+0x1a8>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000f14:	f002 fe6b 	bl	8003bee <HAL_DMA_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8000f1e:	f000 faf3 	bl	8001508 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000f26:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f28:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_ADC_MspInit+0x1a4>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	@ 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000031c 	.word	0x2000031c
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	20000294 	.word	0x20000294
 8000f44:	40020008 	.word	0x40020008
 8000f48:	50000100 	.word	0x50000100
 8000f4c:	200002d8 	.word	0x200002d8
 8000f50:	40020408 	.word	0x40020408

08000f54 <get_adc_values>:
#include "adc_reading.h"

uint16_t adc1_values[4] = {0, 0, 0, 0};
uint16_t adc2_values[1] = {0};

void get_adc_values(uint16_t* adc_values){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	for(uint8_t i=0; i<4; i++){
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e00b      	b.n	8000f7a <get_adc_values+0x26>
		adc_values[i] = (uint16_t)(adc1_values[i]);
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	440b      	add	r3, r1
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <get_adc_values+0x54>)
 8000f6e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f72:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i<4; i++){
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d9f0      	bls.n	8000f62 <get_adc_values+0xe>
	}
	adc_values[4] = (uint16_t)adc2_values[0];
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3308      	adds	r3, #8
 8000f84:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <get_adc_values+0x58>)
 8000f86:	8812      	ldrh	r2, [r2, #0]
 8000f88:	801a      	strh	r2, [r3, #0]


	HAL_ADC_Start_DMA(&hadc1, adc1_values, 4);
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4906      	ldr	r1, [pc, #24]	@ (8000fa8 <get_adc_values+0x54>)
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <get_adc_values+0x5c>)
 8000f90:	f001 fef4 	bl	8002d7c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adc2_values, 1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	4905      	ldr	r1, [pc, #20]	@ (8000fac <get_adc_values+0x58>)
 8000f98:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <get_adc_values+0x60>)
 8000f9a:	f001 feef 	bl	8002d7c <HAL_ADC_Start_DMA>

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000320 	.word	0x20000320
 8000fac:	20000328 	.word	0x20000328
 8000fb0:	200001f4 	.word	0x200001f4
 8000fb4:	20000244 	.word	0x20000244

08000fb8 <calculate_currents>:

void calculate_currents(UART_Send* servo_info, uint16_t* adc_values){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	servo_info->currents[0] = (float)(adc_values[0]-3230)/241.8f;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800106c <calculate_currents+0xb4>
 8000fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edc3 7a01 	vstr	s15, [r3, #4]
	servo_info->currents[1] = (float)(adc_values[1]-3230)/241.8f;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800106c <calculate_currents+0xb4>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a02 	vstr	s15, [r3, #8]
	servo_info->currents[2] = (float)(adc_values[2]-3230)/241.8f;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3304      	adds	r3, #4
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001012:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800106c <calculate_currents+0xb4>
 8001016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	edc3 7a03 	vstr	s15, [r3, #12]
	servo_info->currents[3] = (float)(adc_values[3]-3230)/241.8f;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	3306      	adds	r3, #6
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001032:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800106c <calculate_currents+0xb4>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	edc3 7a04 	vstr	s15, [r3, #16]
	servo_info->currents[4] = (float)(adc_values[4]-3230)/241.8f;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3308      	adds	r3, #8
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001052:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800106c <calculate_currents+0xb4>
 8001056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	4371cccd 	.word	0x4371cccd

08001070 <currents_calculate_status>:

void currents_calculate_status(UART_Rec* servo_input, UART_Send* servo_info, uint16_t* adc_values){
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]

	uint16_t current_mA = (uint16_t)((adc_values[0]-3230)/241.8f) * 1000;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108c:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80011d0 <currents_calculate_status+0x160>
 8001090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001098:	ee17 3a90 	vmov	r3, s15
 800109c:	b29b      	uxth	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	0152      	lsls	r2, r2, #5
 80010a2:	1ad2      	subs	r2, r2, r3
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	82fb      	strh	r3, [r7, #22]
	if(servo_input->c_limits[0] < (current_mA))servo_info->status=1;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	895b      	ldrh	r3, [r3, #10]
 80010b0:	8afa      	ldrh	r2, [r7, #22]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d902      	bls.n	80010bc <currents_calculate_status+0x4c>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2201      	movs	r2, #1
 80010ba:	801a      	strh	r2, [r3, #0]

	current_mA = (uint16_t)((adc_values[1]-3230)/241.8f)*1000;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3302      	adds	r3, #2
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ce:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80011d0 <currents_calculate_status+0x160>
 80010d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010da:	ee17 3a90 	vmov	r3, s15
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	0152      	lsls	r2, r2, #5
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	82fb      	strh	r3, [r7, #22]
	if(servo_input->c_limits[1] < (current_mA))servo_info->status=1;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	899b      	ldrh	r3, [r3, #12]
 80010f2:	8afa      	ldrh	r2, [r7, #22]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d902      	bls.n	80010fe <currents_calculate_status+0x8e>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2201      	movs	r2, #1
 80010fc:	801a      	strh	r2, [r3, #0]

	current_mA = (uint16_t)((adc_values[2]-3230)/241.8f)*1000;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3304      	adds	r3, #4
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001110:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80011d0 <currents_calculate_status+0x160>
 8001114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111c:	ee17 3a90 	vmov	r3, s15
 8001120:	b29b      	uxth	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	0152      	lsls	r2, r2, #5
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	82fb      	strh	r3, [r7, #22]
	if(servo_input->c_limits[2] < (current_mA))servo_info->status=1;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	89db      	ldrh	r3, [r3, #14]
 8001134:	8afa      	ldrh	r2, [r7, #22]
 8001136:	429a      	cmp	r2, r3
 8001138:	d902      	bls.n	8001140 <currents_calculate_status+0xd0>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2201      	movs	r2, #1
 800113e:	801a      	strh	r2, [r3, #0]

	current_mA = (uint16_t)((adc_values[3]-3230)/241.8f)*1000;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3306      	adds	r3, #6
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80011d0 <currents_calculate_status+0x160>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115e:	ee17 3a90 	vmov	r3, s15
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	0152      	lsls	r2, r2, #5
 8001168:	1ad2      	subs	r2, r2, r3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	82fb      	strh	r3, [r7, #22]
	if(servo_input->c_limits[3] < (current_mA))servo_info->status=1;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8a1b      	ldrh	r3, [r3, #16]
 8001176:	8afa      	ldrh	r2, [r7, #22]
 8001178:	429a      	cmp	r2, r3
 800117a:	d902      	bls.n	8001182 <currents_calculate_status+0x112>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2201      	movs	r2, #1
 8001180:	801a      	strh	r2, [r3, #0]

	current_mA = (uint16_t)((adc_values[4]-3230)/241.8f)*1000;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3308      	adds	r3, #8
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	f6a3 439e 	subw	r3, r3, #3230	@ 0xc9e
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80011d0 <currents_calculate_status+0x160>
 8001198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a0:	ee17 3a90 	vmov	r3, s15
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	0152      	lsls	r2, r2, #5
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	82fb      	strh	r3, [r7, #22]
	if(servo_input->c_limits[4] < (current_mA))servo_info->status=1;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8a5b      	ldrh	r3, [r3, #18]
 80011b8:	8afa      	ldrh	r2, [r7, #22]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d902      	bls.n	80011c4 <currents_calculate_status+0x154>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2201      	movs	r2, #1
 80011c2:	801a      	strh	r2, [r3, #0]


}
 80011c4:	bf00      	nop
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	4371cccd 	.word	0x4371cccd

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_DMA_Init+0x60>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <MX_DMA_Init+0x60>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_DMA_Init+0x60>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MX_DMA_Init+0x60>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <MX_DMA_Init+0x60>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <MX_DMA_Init+0x60>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f002 fcb7 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f002 fcd0 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2038      	movs	r0, #56	@ 0x38
 8001220:	f002 fcaf 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001224:	2038      	movs	r0, #56	@ 0x38
 8001226:	f002 fcc8 	bl	8003bba <HAL_NVIC_EnableIRQ>

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <MX_GPIO_Init+0x140>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a49      	ldr	r2, [pc, #292]	@ (8001378 <MX_GPIO_Init+0x140>)
 8001254:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <MX_GPIO_Init+0x140>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001266:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <MX_GPIO_Init+0x140>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a43      	ldr	r2, [pc, #268]	@ (8001378 <MX_GPIO_Init+0x140>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <MX_GPIO_Init+0x140>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b3e      	ldr	r3, [pc, #248]	@ (8001378 <MX_GPIO_Init+0x140>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a3d      	ldr	r2, [pc, #244]	@ (8001378 <MX_GPIO_Init+0x140>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <MX_GPIO_Init+0x140>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b38      	ldr	r3, [pc, #224]	@ (8001378 <MX_GPIO_Init+0x140>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a37      	ldr	r2, [pc, #220]	@ (8001378 <MX_GPIO_Init+0x140>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <MX_GPIO_Init+0x140>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <MX_GPIO_Init+0x140>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a31      	ldr	r2, [pc, #196]	@ (8001378 <MX_GPIO_Init+0x140>)
 80012b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001378 <MX_GPIO_Init+0x140>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80012cc:	482b      	ldr	r0, [pc, #172]	@ (800137c <MX_GPIO_Init+0x144>)
 80012ce:	f003 f847 	bl	8004360 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 80012d2:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80012d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4824      	ldr	r0, [pc, #144]	@ (800137c <MX_GPIO_Init+0x144>)
 80012ec:	f002 feae 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f0:	2303      	movs	r3, #3
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f4:	2303      	movs	r3, #3
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	481f      	ldr	r0, [pc, #124]	@ (8001380 <MX_GPIO_Init+0x148>)
 8001304:	f002 fea2 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001308:	2308      	movs	r3, #8
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4818      	ldr	r0, [pc, #96]	@ (800137c <MX_GPIO_Init+0x144>)
 800131c:	f002 fe96 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001320:	f44f 53ff 	mov.w	r3, #8160	@ 0x1fe0
 8001324:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001338:	f002 fe88 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800133c:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 8001340:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001342:	2303      	movs	r3, #3
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <MX_GPIO_Init+0x14c>)
 8001352:	f002 fe7b 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001356:	2304      	movs	r3, #4
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135a:	2303      	movs	r3, #3
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	@ (8001388 <MX_GPIO_Init+0x150>)
 800136a:	f002 fe6f 	bl	800404c <HAL_GPIO_Init>

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	@ 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	48000800 	.word	0x48000800
 8001380:	48001400 	.word	0x48001400
 8001384:	48000400 	.word	0x48000400
 8001388:	48000c00 	.word	0x48000c00

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f001 fa52 	bl	8002838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001394:	f000 f852 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001398:	f7ff ff4e 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 800139c:	f7ff ff1a 	bl	80011d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80013a0:	f7ff fc0a 	bl	8000bb8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013a4:	f7ff fca2 	bl	8000cec <MX_ADC2_Init>
  MX_TIM1_Init();
 80013a8:	f000 fdb4 	bl	8001f14 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013ac:	f000 fe78 	bl	80020a0 <MX_TIM2_Init>
  MX_TIM8_Init();
 80013b0:	f000 fec4 	bl	800213c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80013b4:	f001 f992 	bl	80026dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013b8:	2100      	movs	r1, #0
 80013ba:	4818      	ldr	r0, [pc, #96]	@ (800141c <main+0x90>)
 80013bc:	f004 fdbe 	bl	8005f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013c0:	2104      	movs	r1, #4
 80013c2:	4816      	ldr	r0, [pc, #88]	@ (800141c <main+0x90>)
 80013c4:	f004 fdba 	bl	8005f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013c8:	2108      	movs	r1, #8
 80013ca:	4814      	ldr	r0, [pc, #80]	@ (800141c <main+0x90>)
 80013cc:	f004 fdb6 	bl	8005f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80013d0:	2100      	movs	r1, #0
 80013d2:	4813      	ldr	r0, [pc, #76]	@ (8001420 <main+0x94>)
 80013d4:	f004 fdb2 	bl	8005f3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80013d8:	2104      	movs	r1, #4
 80013da:	4811      	ldr	r0, [pc, #68]	@ (8001420 <main+0x94>)
 80013dc:	f004 fdae 	bl	8005f3c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80013e0:	4810      	ldr	r0, [pc, #64]	@ (8001424 <main+0x98>)
 80013e2:	f004 fcd9 	bl	8005d98 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, adc1_values, 4);
 80013e6:	2204      	movs	r2, #4
 80013e8:	490f      	ldr	r1, [pc, #60]	@ (8001428 <main+0x9c>)
 80013ea:	4810      	ldr	r0, [pc, #64]	@ (800142c <main+0xa0>)
 80013ec:	f001 fcc6 	bl	8002d7c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adc2_values, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	490f      	ldr	r1, [pc, #60]	@ (8001430 <main+0xa4>)
 80013f4:	480f      	ldr	r0, [pc, #60]	@ (8001434 <main+0xa8>)
 80013f6:	f001 fcc1 	bl	8002d7c <HAL_ADC_Start_DMA>

	PWM_var_init();
 80013fa:	f000 f88b 	bl	8001514 <PWM_var_init>
	//6 BYTES MUST BE SENT
	init_uart_rx_interrupt(32);
 80013fe:	2020      	movs	r0, #32
 8001400:	f000 fffe 	bl	8002400 <init_uart_rx_interrupt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, 0x0100);
 8001404:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001408:	480b      	ldr	r0, [pc, #44]	@ (8001438 <main+0xac>)
 800140a:	f002 ffc1 	bl	8004390 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001412:	f001 fa77 	bl	8002904 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, 0x0100);
 8001416:	bf00      	nop
 8001418:	e7f4      	b.n	8001404 <main+0x78>
 800141a:	bf00      	nop
 800141c:	2000034c 	.word	0x2000034c
 8001420:	200003e4 	.word	0x200003e4
 8001424:	20000398 	.word	0x20000398
 8001428:	20000320 	.word	0x20000320
 800142c:	200001f4 	.word	0x200001f4
 8001430:	20000328 	.word	0x20000328
 8001434:	20000244 	.word	0x20000244
 8001438:	48000800 	.word	0x48000800

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0a6      	sub	sp, #152	@ 0x98
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001446:	2228      	movs	r2, #40	@ 0x28
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f007 ff85 	bl	800935a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2258      	movs	r2, #88	@ 0x58
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f007 ff77 	bl	800935a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	2301      	movs	r3, #1
 8001472:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001474:	2310      	movs	r3, #16
 8001476:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001484:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001488:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800148c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800149a:	4618      	mov	r0, r3
 800149c:	f002 ff92 	bl	80043c4 <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014a6:	f000 f82f 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2302      	movs	r3, #2
 80014b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014c4:	2102      	movs	r1, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 ffd0 	bl	800546c <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014d2:	f000 f819 	bl	8001508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <SystemClock_Config+0xc8>)
 80014d8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80014de:	2300      	movs	r3, #0
 80014e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 f9dd 	bl	80058ac <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014f8:	f000 f806 	bl	8001508 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3798      	adds	r7, #152	@ 0x98
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	00103001 	.word	0x00103001

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <Error_Handler+0x8>

08001514 <PWM_var_init>:
int16_t J2_PWM_increment;
int16_t J3_PWM_increment;
int16_t J4_PWM_increment;
int16_t J5_PWM_increment;

void PWM_var_init(){
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	J1_PWM = PWM_neutral; 	// timer 3 ch 1
 8001518:	f242 3228 	movw	r2, #9000	@ 0x2328
 800151c:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <PWM_var_init+0xb0>)
 800151e:	801a      	strh	r2, [r3, #0]
	J2_PWM = PWM_neutral;	// timer 3 ch 2
 8001520:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001524:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <PWM_var_init+0xb4>)
 8001526:	801a      	strh	r2, [r3, #0]
	J3_PWM = PWM_neutral;	// timer 3 ch 3
 8001528:	f242 3228 	movw	r2, #9000	@ 0x2328
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <PWM_var_init+0xb8>)
 800152e:	801a      	strh	r2, [r3, #0]
	J4_PWM = PWM_neutral;	// timer 4 ch 1
 8001530:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001534:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <PWM_var_init+0xbc>)
 8001536:	801a      	strh	r2, [r3, #0]
	J5_PWM = PWM_neutral; 	// timer 4 ch 2
 8001538:	f242 3228 	movw	r2, #9000	@ 0x2328
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <PWM_var_init+0xc0>)
 800153e:	801a      	strh	r2, [r3, #0]

	J1_PWM_target = PWM_neutral;
 8001540:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001544:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <PWM_var_init+0xc4>)
 8001546:	801a      	strh	r2, [r3, #0]
	J2_PWM_target = PWM_neutral;
 8001548:	f242 3228 	movw	r2, #9000	@ 0x2328
 800154c:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <PWM_var_init+0xc8>)
 800154e:	801a      	strh	r2, [r3, #0]
	J3_PWM_target = PWM_neutral;
 8001550:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <PWM_var_init+0xcc>)
 8001556:	801a      	strh	r2, [r3, #0]
	J4_PWM_target = PWM_neutral;
 8001558:	f242 3228 	movw	r2, #9000	@ 0x2328
 800155c:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <PWM_var_init+0xd0>)
 800155e:	801a      	strh	r2, [r3, #0]
	J5_PWM_target = PWM_neutral;
 8001560:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001564:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <PWM_var_init+0xd4>)
 8001566:	801a      	strh	r2, [r3, #0]

	J1_PWM_increment = 0;
 8001568:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <PWM_var_init+0xd8>)
 800156a:	2200      	movs	r2, #0
 800156c:	801a      	strh	r2, [r3, #0]
	J2_PWM_increment = 0;
 800156e:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <PWM_var_init+0xdc>)
 8001570:	2200      	movs	r2, #0
 8001572:	801a      	strh	r2, [r3, #0]
	J3_PWM_increment = 0;
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <PWM_var_init+0xe0>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
	J4_PWM_increment = 0;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <PWM_var_init+0xe4>)
 800157c:	2200      	movs	r2, #0
 800157e:	801a      	strh	r2, [r3, #0]
	J5_PWM_increment = 0;
 8001580:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <PWM_var_init+0xe8>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]

	// set timer OC values
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, J1_PWM);
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <PWM_var_init+0xb0>)
 8001588:	881a      	ldrh	r2, [r3, #0]
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <PWM_var_init+0xec>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, J2_PWM);
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <PWM_var_init+0xb4>)
 8001592:	881a      	ldrh	r2, [r3, #0]
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <PWM_var_init+0xec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, J3_PWM);
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <PWM_var_init+0xb8>)
 800159c:	881a      	ldrh	r2, [r3, #0]
 800159e:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <PWM_var_init+0xec>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, J4_PWM);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <PWM_var_init+0xbc>)
 80015a6:	881a      	ldrh	r2, [r3, #0]
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <PWM_var_init+0xf0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, J5_PWM);
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <PWM_var_init+0xc0>)
 80015b0:	881a      	ldrh	r2, [r3, #0]
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <PWM_var_init+0xf0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2000032a 	.word	0x2000032a
 80015c8:	2000032c 	.word	0x2000032c
 80015cc:	2000032e 	.word	0x2000032e
 80015d0:	20000330 	.word	0x20000330
 80015d4:	20000332 	.word	0x20000332
 80015d8:	20000334 	.word	0x20000334
 80015dc:	20000336 	.word	0x20000336
 80015e0:	20000338 	.word	0x20000338
 80015e4:	2000033a 	.word	0x2000033a
 80015e8:	2000033c 	.word	0x2000033c
 80015ec:	2000033e 	.word	0x2000033e
 80015f0:	20000340 	.word	0x20000340
 80015f4:	20000342 	.word	0x20000342
 80015f8:	20000344 	.word	0x20000344
 80015fc:	20000346 	.word	0x20000346
 8001600:	2000034c 	.word	0x2000034c
 8001604:	200003e4 	.word	0x200003e4

08001608 <Update_PWM_status>:


void Update_PWM_status(UART_Rec* rx_data){
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	//refresh period in ms
	const int16_t time_const = 10;
 8001610:	230a      	movs	r3, #10
 8001612:	82fb      	strh	r3, [r7, #22]
	*/


	//if(rx_data.time_ms < 2) rx_data.time_ms = 2;

	J1_PWM_target = (uint16_t)12000/1800*rx_data->ddeg[0]+3000;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	0052      	lsls	r2, r2, #1
 800161c:	4413      	add	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b29b      	uxth	r3, r3
 8001622:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b70      	ldr	r3, [pc, #448]	@ (80017ec <Update_PWM_status+0x1e4>)
 800162a:	801a      	strh	r2, [r3, #0]
	J2_PWM_target = (uint16_t)12000/1800*rx_data->ddeg[1]+3000;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	885b      	ldrh	r3, [r3, #2]
 8001630:	461a      	mov	r2, r3
 8001632:	0052      	lsls	r2, r2, #1
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	b29b      	uxth	r3, r3
 800163a:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <Update_PWM_status+0x1e8>)
 8001642:	801a      	strh	r2, [r3, #0]
	J3_PWM_target = (uint16_t)12000/1800*rx_data->ddeg[2]+3000;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	889b      	ldrh	r3, [r3, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	0052      	lsls	r2, r2, #1
 800164c:	4413      	add	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <Update_PWM_status+0x1ec>)
 800165a:	801a      	strh	r2, [r3, #0]
	J4_PWM_target = (uint16_t)12000/1800*rx_data->ddeg[3]+3000;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	88db      	ldrh	r3, [r3, #6]
 8001660:	461a      	mov	r2, r3
 8001662:	0052      	lsls	r2, r2, #1
 8001664:	4413      	add	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b61      	ldr	r3, [pc, #388]	@ (80017f8 <Update_PWM_status+0x1f0>)
 8001672:	801a      	strh	r2, [r3, #0]
	J5_PWM_target = (uint16_t)12000/1800*rx_data->ddeg[4]+3000;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	891b      	ldrh	r3, [r3, #8]
 8001678:	461a      	mov	r2, r3
 800167a:	0052      	lsls	r2, r2, #1
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	b29b      	uxth	r3, r3
 8001682:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <Update_PWM_status+0x1f4>)
 800168a:	801a      	strh	r2, [r3, #0]
	// find difference and divide by ms / 10, set as increment
	// rest is implemented in timer interrupt (every 10 ms)
	if(J1_PWM != J1_PWM_target){
 800168c:	4b5c      	ldr	r3, [pc, #368]	@ (8001800 <Update_PWM_status+0x1f8>)
 800168e:	881a      	ldrh	r2, [r3, #0]
 8001690:	4b56      	ldr	r3, [pc, #344]	@ (80017ec <Update_PWM_status+0x1e4>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d01b      	beq.n	80016d0 <Update_PWM_status+0xc8>
		int16_t diff = J1_PWM_target - J1_PWM;
 8001698:	4b54      	ldr	r3, [pc, #336]	@ (80017ec <Update_PWM_status+0x1e4>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	4b58      	ldr	r3, [pc, #352]	@ (8001800 <Update_PWM_status+0x1f8>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	82bb      	strh	r3, [r7, #20]
		if(rx_data->time_ms[0] < 10) rx_data->time_ms[0]=10;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	8a9b      	ldrh	r3, [r3, #20]
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	d802      	bhi.n	80016b4 <Update_PWM_status+0xac>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	220a      	movs	r2, #10
 80016b2:	829a      	strh	r2, [r3, #20]
		J1_PWM_increment = (diff*time_const)/(int16_t)rx_data->time_ms[0];
 80016b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	8a92      	ldrh	r2, [r2, #20]
 80016c4:	b212      	sxth	r2, r2
 80016c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <Update_PWM_status+0x1fc>)
 80016ce:	801a      	strh	r2, [r3, #0]
	}

	if(J2_PWM != J2_PWM_target){
 80016d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001808 <Update_PWM_status+0x200>)
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <Update_PWM_status+0x1e8>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d01b      	beq.n	8001714 <Update_PWM_status+0x10c>
		int16_t diff = J2_PWM_target - J2_PWM;
 80016dc:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <Update_PWM_status+0x1e8>)
 80016de:	881a      	ldrh	r2, [r3, #0]
 80016e0:	4b49      	ldr	r3, [pc, #292]	@ (8001808 <Update_PWM_status+0x200>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	827b      	strh	r3, [r7, #18]
		if(rx_data->time_ms[1] < 10) rx_data->time_ms[1]=10;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	8adb      	ldrh	r3, [r3, #22]
 80016ee:	2b09      	cmp	r3, #9
 80016f0:	d802      	bhi.n	80016f8 <Update_PWM_status+0xf0>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	220a      	movs	r2, #10
 80016f6:	82da      	strh	r2, [r3, #22]
		J2_PWM_increment = (diff*time_const)/(int16_t)rx_data->time_ms[1];
 80016f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	8ad2      	ldrh	r2, [r2, #22]
 8001708:	b212      	sxth	r2, r2
 800170a:	fb93 f3f2 	sdiv	r3, r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	4b3e      	ldr	r3, [pc, #248]	@ (800180c <Update_PWM_status+0x204>)
 8001712:	801a      	strh	r2, [r3, #0]
	}

	if(J3_PWM != J3_PWM_target){
 8001714:	4b3e      	ldr	r3, [pc, #248]	@ (8001810 <Update_PWM_status+0x208>)
 8001716:	881a      	ldrh	r2, [r3, #0]
 8001718:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <Update_PWM_status+0x1ec>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d01b      	beq.n	8001758 <Update_PWM_status+0x150>
		int16_t diff = J3_PWM_target - J3_PWM;
 8001720:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <Update_PWM_status+0x1ec>)
 8001722:	881a      	ldrh	r2, [r3, #0]
 8001724:	4b3a      	ldr	r3, [pc, #232]	@ (8001810 <Update_PWM_status+0x208>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	823b      	strh	r3, [r7, #16]
		if(rx_data->time_ms[2] < 10) rx_data->time_ms[2]=10;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	8b1b      	ldrh	r3, [r3, #24]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d802      	bhi.n	800173c <Update_PWM_status+0x134>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	220a      	movs	r2, #10
 800173a:	831a      	strh	r2, [r3, #24]
		J3_PWM_increment = (diff*time_const)/(int16_t)rx_data->time_ms[2];
 800173c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	8b12      	ldrh	r2, [r2, #24]
 800174c:	b212      	sxth	r2, r2
 800174e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b2f      	ldr	r3, [pc, #188]	@ (8001814 <Update_PWM_status+0x20c>)
 8001756:	801a      	strh	r2, [r3, #0]
	}

	if(J4_PWM != J4_PWM_target){
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <Update_PWM_status+0x210>)
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <Update_PWM_status+0x1f0>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d01b      	beq.n	800179c <Update_PWM_status+0x194>
		int16_t diff = J4_PWM_target - J4_PWM;
 8001764:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <Update_PWM_status+0x1f0>)
 8001766:	881a      	ldrh	r2, [r3, #0]
 8001768:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <Update_PWM_status+0x210>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	b29b      	uxth	r3, r3
 8001770:	81fb      	strh	r3, [r7, #14]
		if(rx_data->time_ms[3] < 10) rx_data->time_ms[3]=10;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8b5b      	ldrh	r3, [r3, #26]
 8001776:	2b09      	cmp	r3, #9
 8001778:	d802      	bhi.n	8001780 <Update_PWM_status+0x178>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	220a      	movs	r2, #10
 800177e:	835a      	strh	r2, [r3, #26]
		J4_PWM_increment = (diff*time_const)/(int16_t)rx_data->time_ms[3];
 8001780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001784:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	8b52      	ldrh	r2, [r2, #26]
 8001790:	b212      	sxth	r2, r2
 8001792:	fb93 f3f2 	sdiv	r3, r3, r2
 8001796:	b21a      	sxth	r2, r3
 8001798:	4b20      	ldr	r3, [pc, #128]	@ (800181c <Update_PWM_status+0x214>)
 800179a:	801a      	strh	r2, [r3, #0]
	}

	if(J5_PWM != J5_PWM_target){
 800179c:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <Update_PWM_status+0x218>)
 800179e:	881a      	ldrh	r2, [r3, #0]
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <Update_PWM_status+0x1f4>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d01b      	beq.n	80017e0 <Update_PWM_status+0x1d8>
		int16_t diff = J5_PWM_target - J5_PWM;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <Update_PWM_status+0x1f4>)
 80017aa:	881a      	ldrh	r2, [r3, #0]
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <Update_PWM_status+0x218>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	81bb      	strh	r3, [r7, #12]
		if(rx_data->time_ms[4] < 10) rx_data->time_ms[4]=10;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	8b9b      	ldrh	r3, [r3, #28]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d802      	bhi.n	80017c4 <Update_PWM_status+0x1bc>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	220a      	movs	r2, #10
 80017c2:	839a      	strh	r2, [r3, #28]
		J5_PWM_increment = (diff*time_const)/(int16_t)rx_data->time_ms[4];
 80017c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	8b92      	ldrh	r2, [r2, #28]
 80017d4:	b212      	sxth	r2, r2
 80017d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80017da:	b21a      	sxth	r2, r3
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <Update_PWM_status+0x21c>)
 80017de:	801a      	strh	r2, [r3, #0]
	}
}
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	20000334 	.word	0x20000334
 80017f0:	20000336 	.word	0x20000336
 80017f4:	20000338 	.word	0x20000338
 80017f8:	2000033a 	.word	0x2000033a
 80017fc:	2000033c 	.word	0x2000033c
 8001800:	2000032a 	.word	0x2000032a
 8001804:	2000033e 	.word	0x2000033e
 8001808:	2000032c 	.word	0x2000032c
 800180c:	20000340 	.word	0x20000340
 8001810:	2000032e 	.word	0x2000032e
 8001814:	20000342 	.word	0x20000342
 8001818:	20000330 	.word	0x20000330
 800181c:	20000344 	.word	0x20000344
 8001820:	20000332 	.word	0x20000332
 8001824:	20000346 	.word	0x20000346

08001828 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
	__disable_irq();

	get_adc_values(adc_values);
 8001834:	488c      	ldr	r0, [pc, #560]	@ (8001a68 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001836:	f7ff fb8d 	bl	8000f54 <get_adc_values>
	currents_calculate_status(&rec_data, &tx_data, adc_values);
 800183a:	4a8b      	ldr	r2, [pc, #556]	@ (8001a68 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800183c:	498b      	ldr	r1, [pc, #556]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800183e:	488c      	ldr	r0, [pc, #560]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001840:	f7ff fc16 	bl	8001070 <currents_calculate_status>

	if(htim == &htim2 && tx_data.status == 0){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a8b      	ldr	r2, [pc, #556]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	f040 8156 	bne.w	8001afa <HAL_TIM_PeriodElapsedCallback+0x2d2>
 800184e:	4b87      	ldr	r3, [pc, #540]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 8151 	bne.w	8001afa <HAL_TIM_PeriodElapsedCallback+0x2d2>
		HAL_GPIO_TogglePin(GPIOC, 0x0200);
 8001858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800185c:	4886      	ldr	r0, [pc, #536]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800185e:	f002 fd97 	bl	8004390 <HAL_GPIO_TogglePin>

		if(J1_PWM != J1_PWM_target){
 8001862:	4b86      	ldr	r3, [pc, #536]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	4b86      	ldr	r3, [pc, #536]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d032      	beq.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0xac>
			J1_PWM += J1_PWM_increment;
 800186e:	4b83      	ldr	r3, [pc, #524]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	4b84      	ldr	r3, [pc, #528]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001880:	801a      	strh	r2, [r3, #0]

			if(J1_PWM_increment < 0 && J1_PWM <= J1_PWM_target){
 8001882:	4b80      	ldr	r3, [pc, #512]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da0c      	bge.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x7e>
 800188c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800188e:	881a      	ldrh	r2, [r3, #0]
 8001890:	4b7b      	ldr	r3, [pc, #492]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d806      	bhi.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x7e>
				J1_PWM = J1_PWM_target;
 8001898:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800189a:	881a      	ldrh	r2, [r3, #0]
 800189c:	4b77      	ldr	r3, [pc, #476]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800189e:	801a      	strh	r2, [r3, #0]
				J1_PWM_increment = 0;
 80018a0:	4b78      	ldr	r3, [pc, #480]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	801a      	strh	r2, [r3, #0]
			}

			if(J1_PWM_increment > 0 && J1_PWM >= J1_PWM_target){
 80018a6:	4b77      	ldr	r3, [pc, #476]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80018a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd0c      	ble.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xa2>
 80018b0:	4b72      	ldr	r3, [pc, #456]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	4b72      	ldr	r3, [pc, #456]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d306      	bcc.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xa2>
				J1_PWM = J1_PWM_target;
 80018bc:	4b70      	ldr	r3, [pc, #448]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80018c2:	801a      	strh	r2, [r3, #0]
				J1_PWM_increment = 0;
 80018c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	801a      	strh	r2, [r3, #0]
			}

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, J1_PWM);
 80018ca:	4b6c      	ldr	r3, [pc, #432]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	63da      	str	r2, [r3, #60]	@ 0x3c

		}

		if(J2_PWM != J2_PWM_target){
 80018d4:	4b6d      	ldr	r3, [pc, #436]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018d6:	881a      	ldrh	r2, [r3, #0]
 80018d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d032      	beq.n	8001946 <HAL_TIM_PeriodElapsedCallback+0x11e>
			J2_PWM += J2_PWM_increment;
 80018e0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b66      	ldr	r3, [pc, #408]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018f2:	801a      	strh	r2, [r3, #0]

			if(J2_PWM_increment < 0 && J2_PWM <= J2_PWM_target){
 80018f4:	4b67      	ldr	r3, [pc, #412]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da0c      	bge.n	8001918 <HAL_TIM_PeriodElapsedCallback+0xf0>
 80018fe:	4b63      	ldr	r3, [pc, #396]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001900:	881a      	ldrh	r2, [r3, #0]
 8001902:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d806      	bhi.n	8001918 <HAL_TIM_PeriodElapsedCallback+0xf0>
				J2_PWM = J2_PWM_target;
 800190a:	4b61      	ldr	r3, [pc, #388]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001910:	801a      	strh	r2, [r3, #0]
				J2_PWM_increment = 0;
 8001912:	4b60      	ldr	r3, [pc, #384]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001914:	2200      	movs	r2, #0
 8001916:	801a      	strh	r2, [r3, #0]
			}

			if(J2_PWM_increment > 0 && J2_PWM >= J2_PWM_target){
 8001918:	4b5e      	ldr	r3, [pc, #376]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dd0c      	ble.n	800193c <HAL_TIM_PeriodElapsedCallback+0x114>
 8001922:	4b5a      	ldr	r3, [pc, #360]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001924:	881a      	ldrh	r2, [r3, #0]
 8001926:	4b5a      	ldr	r3, [pc, #360]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d306      	bcc.n	800193c <HAL_TIM_PeriodElapsedCallback+0x114>
				J2_PWM = J2_PWM_target;
 800192e:	4b58      	ldr	r3, [pc, #352]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	4b56      	ldr	r3, [pc, #344]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001934:	801a      	strh	r2, [r3, #0]
				J2_PWM_increment = 0;
 8001936:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001938:	2200      	movs	r2, #0
 800193a:	801a      	strh	r2, [r3, #0]
			}

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, J2_PWM);
 800193c:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800193e:	881a      	ldrh	r2, [r3, #0]
 8001940:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	639a      	str	r2, [r3, #56]	@ 0x38

		}

		if(J3_PWM != J3_PWM_target){
 8001946:	4b54      	ldr	r3, [pc, #336]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	4b54      	ldr	r3, [pc, #336]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d032      	beq.n	80019b8 <HAL_TIM_PeriodElapsedCallback+0x190>
			J3_PWM += J3_PWM_increment;
 8001952:	4b51      	ldr	r3, [pc, #324]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001954:	881a      	ldrh	r2, [r3, #0]
 8001956:	4b52      	ldr	r3, [pc, #328]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b4d      	ldr	r3, [pc, #308]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001964:	801a      	strh	r2, [r3, #0]

			if(J3_PWM_increment < 0 && J3_PWM <= J3_PWM_target){
 8001966:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da0c      	bge.n	800198a <HAL_TIM_PeriodElapsedCallback+0x162>
 8001970:	4b49      	ldr	r3, [pc, #292]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d806      	bhi.n	800198a <HAL_TIM_PeriodElapsedCallback+0x162>
				J3_PWM = J3_PWM_target;
 800197c:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	4b45      	ldr	r3, [pc, #276]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001982:	801a      	strh	r2, [r3, #0]
				J3_PWM_increment = 0;
 8001984:	4b46      	ldr	r3, [pc, #280]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001986:	2200      	movs	r2, #0
 8001988:	801a      	strh	r2, [r3, #0]
			}

			if(J3_PWM_increment > 0 && J3_PWM >= J3_PWM_target){
 800198a:	4b45      	ldr	r3, [pc, #276]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	2b00      	cmp	r3, #0
 8001992:	dd0c      	ble.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x186>
 8001994:	4b40      	ldr	r3, [pc, #256]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	4b40      	ldr	r3, [pc, #256]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d306      	bcc.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x186>
				J3_PWM = J3_PWM_target;
 80019a0:	4b3e      	ldr	r3, [pc, #248]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019a6:	801a      	strh	r2, [r3, #0]
				J3_PWM_increment = 0;
 80019a8:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	801a      	strh	r2, [r3, #0]
			}

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, J3_PWM);
 80019ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019b0:	881a      	ldrh	r2, [r3, #0]
 80019b2:	4b35      	ldr	r3, [pc, #212]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	635a      	str	r2, [r3, #52]	@ 0x34

		}

		if(J4_PWM != J4_PWM_target){
 80019b8:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d032      	beq.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x202>
			J4_PWM += J4_PWM_increment;
 80019c4:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019c6:	881a      	ldrh	r2, [r3, #0]
 80019c8:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019d6:	801a      	strh	r2, [r3, #0]

			if(J4_PWM_increment < 0 && J4_PWM <= J4_PWM_target){
 80019d8:	4b34      	ldr	r3, [pc, #208]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da0c      	bge.n	80019fc <HAL_TIM_PeriodElapsedCallback+0x1d4>
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019e4:	881a      	ldrh	r2, [r3, #0]
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d806      	bhi.n	80019fc <HAL_TIM_PeriodElapsedCallback+0x1d4>
				J4_PWM = J4_PWM_target;
 80019ee:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019f4:	801a      	strh	r2, [r3, #0]
				J4_PWM_increment = 0;
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	801a      	strh	r2, [r3, #0]
			}

			if(J4_PWM_increment > 0 && J4_PWM >= J4_PWM_target){
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x284>)
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd0c      	ble.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8001a06:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a08:	881a      	ldrh	r2, [r3, #0]
 8001a0a:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d306      	bcc.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				J4_PWM = J4_PWM_target;
 8001a12:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a18:	801a      	strh	r2, [r3, #0]
				J4_PWM_increment = 0;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
			}

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, J4_PWM);
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	639a      	str	r2, [r3, #56]	@ 0x38

		}

		if(J5_PWM != J5_PWM_target){
 8001a2a:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	f000 8084 	beq.w	8001b40 <HAL_TIM_PeriodElapsedCallback+0x318>
			J5_PWM += J5_PWM_increment;
 8001a38:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001a4a:	801a      	strh	r2, [r3, #0]

			if(J5_PWM_increment < 0 && J5_PWM <= J5_PWM_target){
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da39      	bge.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x2a2>
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d833      	bhi.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x2a2>
				J5_PWM = J5_PWM_target;
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001a64:	881a      	ldrh	r2, [r3, #0]
 8001a66:	e02b      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x298>
 8001a68:	20000518 	.word	0x20000518
 8001a6c:	20000544 	.word	0x20000544
 8001a70:	20000524 	.word	0x20000524
 8001a74:	20000398 	.word	0x20000398
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	2000032a 	.word	0x2000032a
 8001a80:	20000334 	.word	0x20000334
 8001a84:	2000033e 	.word	0x2000033e
 8001a88:	2000034c 	.word	0x2000034c
 8001a8c:	2000032c 	.word	0x2000032c
 8001a90:	20000336 	.word	0x20000336
 8001a94:	20000340 	.word	0x20000340
 8001a98:	2000032e 	.word	0x2000032e
 8001a9c:	20000338 	.word	0x20000338
 8001aa0:	20000342 	.word	0x20000342
 8001aa4:	20000330 	.word	0x20000330
 8001aa8:	2000033a 	.word	0x2000033a
 8001aac:	20000344 	.word	0x20000344
 8001ab0:	200003e4 	.word	0x200003e4
 8001ab4:	20000332 	.word	0x20000332
 8001ab8:	2000033c 	.word	0x2000033c
 8001abc:	20000346 	.word	0x20000346
 8001ac0:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001ac2:	801a      	strh	r2, [r3, #0]
				J5_PWM_increment = 0;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
			}

			if(J5_PWM_increment > 0 && J5_PWM >= J5_PWM_target){
 8001aca:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	dd0c      	ble.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x2c6>
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d306      	bcc.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x2c6>
				J5_PWM = J5_PWM_target;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001ae6:	801a      	strh	r2, [r3, #0]
				J5_PWM_increment = 0;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
			}

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, J5_PWM);
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	635a      	str	r2, [r3, #52]	@ 0x34
		if(J5_PWM != J5_PWM_target){
 8001af8:	e022      	b.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x318>

		}
	}
	else{
		J1_PWM_target = J1_PWM;
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001b00:	801a      	strh	r2, [r3, #0]
		J1_PWM_increment = 0;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	801a      	strh	r2, [r3, #0]

		J2_PWM_target = J2_PWM;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001b0e:	801a      	strh	r2, [r3, #0]
		J2_PWM_increment = 0;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]

		J3_PWM_target = J3_PWM;
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001b1c:	801a      	strh	r2, [r3, #0]
		J3_PWM_increment = 0;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	801a      	strh	r2, [r3, #0]

		J4_PWM_target = J4_PWM;
 8001b24:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001b26:	881a      	ldrh	r2, [r3, #0]
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001b2a:	801a      	strh	r2, [r3, #0]
		J4_PWM_increment = 0;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	801a      	strh	r2, [r3, #0]

		J5_PWM_target = J5_PWM;
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001b38:	801a      	strh	r2, [r3, #0]
		J5_PWM_increment = 0;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b40:	b662      	cpsie	i
}
 8001b42:	bf00      	nop
	}

	__enable_irq();
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000332 	.word	0x20000332
 8001b50:	20000346 	.word	0x20000346
 8001b54:	2000033c 	.word	0x2000033c
 8001b58:	200003e4 	.word	0x200003e4
 8001b5c:	2000032a 	.word	0x2000032a
 8001b60:	20000334 	.word	0x20000334
 8001b64:	2000033e 	.word	0x2000033e
 8001b68:	2000032c 	.word	0x2000032c
 8001b6c:	20000336 	.word	0x20000336
 8001b70:	20000340 	.word	0x20000340
 8001b74:	2000032e 	.word	0x2000032e
 8001b78:	20000338 	.word	0x20000338
 8001b7c:	20000342 	.word	0x20000342
 8001b80:	20000330 	.word	0x20000330
 8001b84:	2000033a 	.word	0x2000033a
 8001b88:	20000344 	.word	0x20000344

08001b8c <to_rec_struct>:
#include "servo_struct.h"
#include "stdint.h"


// called after first byte is received separately
void to_rec_struct(char* uart_rx_buffer, UART_Rec* p_rx_data){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]

	uint8_t n = 5; //p_rx_data->num_servos;
 8001b96:	2305      	movs	r3, #5
 8001b98:	733b      	strb	r3, [r7, #12]
	uint8_t a = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
	uint8_t b = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i=0; i<n; i++){
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	737b      	strb	r3, [r7, #13]
 8001ba6:	e051      	b.n	8001c4c <to_rec_struct+0xc0>
		// bitshift selline sest windows happened
		p_rx_data->ddeg[i] = (uint16_t)(((uint16_t)uart_rx_buffer[a]) + ((uint16_t)uart_rx_buffer[b] << 8)); // bytes [0, 9] if n=5
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	7b7a      	ldrb	r2, [r7, #13]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	b299      	uxth	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		p_rx_data->c_limits[i] = (uint16_t)(((uint16_t)uart_rx_buffer[2*n+a]) + ((uint16_t)uart_rx_buffer[2*n+b] << 8)); // [10, 19]
 8001bca:	7b3b      	ldrb	r3, [r7, #12]
 8001bcc:	005a      	lsls	r2, r3, #1
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	7b3b      	ldrb	r3, [r7, #12]
 8001bde:	005a      	lsls	r2, r3, #1
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	4413      	add	r3, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	7b7b      	ldrb	r3, [r7, #13]
 8001bf2:	440a      	add	r2, r1
 8001bf4:	b291      	uxth	r1, r2
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	460a      	mov	r2, r1
 8001c00:	805a      	strh	r2, [r3, #2]
		p_rx_data->time_ms[i] = (uint16_t)(((uint16_t)uart_rx_buffer[4*n+a]) + ((uint16_t)uart_rx_buffer[4*n+b] << 8)); //[20, 29]
 8001c02:	7b3b      	ldrb	r3, [r7, #12]
 8001c04:	009a      	lsls	r2, r3, #2
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	4413      	add	r3, r2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	7b3b      	ldrb	r3, [r7, #12]
 8001c16:	009a      	lsls	r2, r3, #2
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	7b7b      	ldrb	r3, [r7, #13]
 8001c2a:	440a      	add	r2, r1
 8001c2c:	b291      	uxth	r1, r2
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	3308      	adds	r3, #8
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	460a      	mov	r2, r1
 8001c38:	809a      	strh	r2, [r3, #4]
		a += 2;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	73fb      	strb	r3, [r7, #15]
		b += 2;
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
 8001c42:	3302      	adds	r3, #2
 8001c44:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i=0; i<n; i++){
 8001c46:	7b7b      	ldrb	r3, [r7, #13]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	737b      	strb	r3, [r7, #13]
 8001c4c:	7b7a      	ldrb	r2, [r7, #13]
 8001c4e:	7b3b      	ldrb	r3, [r7, #12]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d3a9      	bcc.n	8001ba8 <to_rec_struct+0x1c>
	}

	p_rx_data->debug_enabled = (uint8_t)uart_rx_buffer[30];
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	331e      	adds	r3, #30
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	779a      	strb	r2, [r3, #30]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_MspInit+0x44>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb0 <HAL_MspInit+0x44>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6193      	str	r3, [r2, #24]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <HAL_MspInit+0x44>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_MspInit+0x44>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_MspInit+0x44>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_MspInit+0x44>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <NMI_Handler+0x4>

08001cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0a:	f000 fddb 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <DMA1_Channel1_IRQHandler+0x10>)
 8001d1a:	f002 f88a 	bl	8003e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000294 	.word	0x20000294

08001d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <TIM2_IRQHandler+0x10>)
 8001d2e:	f004 fa11 	bl	8006154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000398 	.word	0x20000398

08001d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <USART1_IRQHandler+0x10>)
 8001d42:	f005 fbcb 	bl	80074dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000055c 	.word	0x2000055c

08001d50 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <DMA2_Channel1_IRQHandler+0x10>)
 8001d56:	f002 f86c 	bl	8003e32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002d8 	.word	0x200002d8

08001d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_kill>:

int _kill(int pid, int sig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d7e:	f007 fb3f 	bl	8009400 <__errno>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2216      	movs	r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
  return -1;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_exit>:

void _exit (int status)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffe7 	bl	8001d74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da6:	bf00      	nop
 8001da8:	e7fd      	b.n	8001da6 <_exit+0x12>

08001daa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e00a      	b.n	8001dd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	60ba      	str	r2, [r7, #8]
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbf0      	blt.n	8001dbc <_read+0x12>
  }

  return len;
 8001dda:	687b      	ldr	r3, [r7, #4]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e009      	b.n	8001e0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbf1      	blt.n	8001df6 <_write+0x12>
  }
  return len;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_close>:

int _close(int file)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e44:	605a      	str	r2, [r3, #4]
  return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_isatty>:

int _isatty(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <_sbrk+0x5c>)
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <_sbrk+0x60>)
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb4:	f007 faa4 	bl	8009400 <__errno>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20010000 	.word	0x20010000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	20000348 	.word	0x20000348
 8001eec:	20000738 	.word	0x20000738

08001ef0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <SystemInit+0x20>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <SystemInit+0x20>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b09a      	sub	sp, #104	@ 0x68
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	222c      	movs	r2, #44	@ 0x2c
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f007 fa03 	bl	800935a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f54:	4b50      	ldr	r3, [pc, #320]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f56:	4a51      	ldr	r2, [pc, #324]	@ (800209c <MX_TIM1_Init+0x188>)
 8001f58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f5c:	220b      	movs	r2, #11
 8001f5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b4d      	ldr	r3, [pc, #308]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001f66:	4b4c      	ldr	r3, [pc, #304]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f68:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001f6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f74:	4b48      	ldr	r3, [pc, #288]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f80:	4845      	ldr	r0, [pc, #276]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f82:	f003 feb1 	bl	8005ce8 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f8c:	f7ff fabc 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f94:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	483e      	ldr	r0, [pc, #248]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001f9e:	f004 faef 	bl	8006580 <HAL_TIM_ConfigClockSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fa8:	f7ff faae 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fac:	483a      	ldr	r0, [pc, #232]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001fae:	f003 ff63 	bl	8005e78 <HAL_TIM_PWM_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fb8:	f7ff faa6 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fc8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4832      	ldr	r0, [pc, #200]	@ (8002098 <MX_TIM1_Init+0x184>)
 8001fd0:	f005 f838 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001fda:	f7ff fa95 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fde:	2360      	movs	r3, #96	@ 0x60
 8001fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 9000;
 8001fe2:	f242 3328 	movw	r3, #9000	@ 0x2328
 8001fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	4824      	ldr	r0, [pc, #144]	@ (8002098 <MX_TIM1_Init+0x184>)
 8002006:	f004 f9a7 	bl	8006358 <HAL_TIM_PWM_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002010:	f7ff fa7a 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002014:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002018:	2204      	movs	r2, #4
 800201a:	4619      	mov	r1, r3
 800201c:	481e      	ldr	r0, [pc, #120]	@ (8002098 <MX_TIM1_Init+0x184>)
 800201e:	f004 f99b 	bl	8006358 <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002028:	f7ff fa6e 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800202c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002030:	2208      	movs	r2, #8
 8002032:	4619      	mov	r1, r3
 8002034:	4818      	ldr	r0, [pc, #96]	@ (8002098 <MX_TIM1_Init+0x184>)
 8002036:	f004 f98f 	bl	8006358 <HAL_TIM_PWM_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002040:	f7ff fa62 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4807      	ldr	r0, [pc, #28]	@ (8002098 <MX_TIM1_Init+0x184>)
 800207a:	f005 f86f 	bl	800715c <HAL_TIMEx_ConfigBreakDeadTime>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8002084:	f7ff fa40 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <MX_TIM1_Init+0x184>)
 800208a:	f000 f95d 	bl	8002348 <HAL_TIM_MspPostInit>

}
 800208e:	bf00      	nop
 8002090:	3768      	adds	r7, #104	@ 0x68
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000034c 	.word	0x2000034c
 800209c:	40012c00 	.word	0x40012c00

080020a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <MX_TIM2_Init+0x98>)
 80020c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <MX_TIM2_Init+0x98>)
 80020c8:	2247      	movs	r2, #71	@ 0x47
 80020ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <MX_TIM2_Init+0x98>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <MX_TIM2_Init+0x98>)
 80020d4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80020d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <MX_TIM2_Init+0x98>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <MX_TIM2_Init+0x98>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e6:	4814      	ldr	r0, [pc, #80]	@ (8002138 <MX_TIM2_Init+0x98>)
 80020e8:	f003 fdfe 	bl	8005ce8 <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020f2:	f7ff fa09 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	480d      	ldr	r0, [pc, #52]	@ (8002138 <MX_TIM2_Init+0x98>)
 8002104:	f004 fa3c 	bl	8006580 <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800210e:	f7ff f9fb 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4806      	ldr	r0, [pc, #24]	@ (8002138 <MX_TIM2_Init+0x98>)
 8002120:	f004 ff90 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800212a:	f7ff f9ed 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000398 	.word	0x20000398

0800213c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b09a      	sub	sp, #104	@ 0x68
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
 800216c:	615a      	str	r2, [r3, #20]
 800216e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	222c      	movs	r2, #44	@ 0x2c
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f007 f8ef 	bl	800935a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800217c:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 800217e:	4a4b      	ldr	r2, [pc, #300]	@ (80022ac <MX_TIM8_Init+0x170>)
 8002180:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 11;
 8002182:	4b49      	ldr	r3, [pc, #292]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 8002184:	220b      	movs	r2, #11
 8002186:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 60000;
 800218e:	4b46      	ldr	r3, [pc, #280]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 8002190:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002194:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002196:	4b44      	ldr	r3, [pc, #272]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800219c:	4b42      	ldr	r3, [pc, #264]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a2:	4b41      	ldr	r3, [pc, #260]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021a8:	483f      	ldr	r0, [pc, #252]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 80021aa:	f003 fd9d 	bl	8005ce8 <HAL_TIM_Base_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80021b4:	f7ff f9a8 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80021c2:	4619      	mov	r1, r3
 80021c4:	4838      	ldr	r0, [pc, #224]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 80021c6:	f004 f9db 	bl	8006580 <HAL_TIM_ConfigClockSource>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80021d0:	f7ff f99a 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021d4:	4834      	ldr	r0, [pc, #208]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 80021d6:	f003 fe4f 	bl	8005e78 <HAL_TIM_PWM_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80021e0:	f7ff f992 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021f4:	4619      	mov	r1, r3
 80021f6:	482c      	ldr	r0, [pc, #176]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 80021f8:	f004 ff24 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002202:	f7ff f981 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	@ 0x60
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 9000;
 800220a:	f242 3328 	movw	r3, #9000	@ 0x2328
 800220e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002214:	2300      	movs	r3, #0
 8002216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002224:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	481e      	ldr	r0, [pc, #120]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 800222e:	f004 f893 	bl	8006358 <HAL_TIM_PWM_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8002238:	f7ff f966 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800223c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002240:	2204      	movs	r2, #4
 8002242:	4619      	mov	r1, r3
 8002244:	4818      	ldr	r0, [pc, #96]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 8002246:	f004 f887 	bl	8006358 <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8002250:	f7ff f95a 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800226c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 800228a:	f004 ff67 	bl	800715c <HAL_TIMEx_ConfigBreakDeadTime>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8002294:	f7ff f938 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002298:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <MX_TIM8_Init+0x16c>)
 800229a:	f000 f855 	bl	8002348 <HAL_TIM_MspPostInit>

}
 800229e:	bf00      	nop
 80022a0:	3768      	adds	r7, #104	@ 0x68
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200003e4 	.word	0x200003e4
 80022ac:	40013400 	.word	0x40013400

080022b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	@ (800233c <HAL_TIM_Base_MspInit+0x8c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10c      	bne.n	80022dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 80022c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022cc:	6193      	str	r3, [r2, #24]
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80022da:	e02a      	b.n	8002332 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e4:	d114      	bne.n	8002310 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	61d3      	str	r3, [r2, #28]
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	201c      	movs	r0, #28
 8002304:	f001 fc3d 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002308:	201c      	movs	r0, #28
 800230a:	f001 fc56 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 800230e:	e010      	b.n	8002332 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0b      	ldr	r2, [pc, #44]	@ (8002344 <HAL_TIM_Base_MspInit+0x94>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10b      	bne.n	8002332 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 8002320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002324:	6193      	str	r3, [r2, #24]
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_TIM_Base_MspInit+0x90>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40021000 	.word	0x40021000
 8002344:	40013400 	.word	0x40013400

08002348 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a22      	ldr	r2, [pc, #136]	@ (80023f0 <HAL_TIM_MspPostInit+0xa8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11c      	bne.n	80023a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <HAL_TIM_MspPostInit+0xac>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4a21      	ldr	r2, [pc, #132]	@ (80023f4 <HAL_TIM_MspPostInit+0xac>)
 8002370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002374:	6153      	str	r3, [r2, #20]
 8002376:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <HAL_TIM_MspPostInit+0xac>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002382:	2307      	movs	r3, #7
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002392:	2302      	movs	r3, #2
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4816      	ldr	r0, [pc, #88]	@ (80023f8 <HAL_TIM_MspPostInit+0xb0>)
 800239e:	f001 fe55 	bl	800404c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023a2:	e020      	b.n	80023e6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <HAL_TIM_MspPostInit+0xb4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11b      	bne.n	80023e6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_TIM_MspPostInit+0xac>)
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	4a10      	ldr	r2, [pc, #64]	@ (80023f4 <HAL_TIM_MspPostInit+0xac>)
 80023b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023b8:	6153      	str	r3, [r2, #20]
 80023ba:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_TIM_MspPostInit+0xac>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023c6:	23c0      	movs	r3, #192	@ 0xc0
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80023d6:	2304      	movs	r3, #4
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <HAL_TIM_MspPostInit+0xb0>)
 80023e2:	f001 fe33 	bl	800404c <HAL_GPIO_Init>
}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	@ 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	48000800 	.word	0x48000800
 80023fc:	40013400 	.word	0x40013400

08002400 <init_uart_rx_interrupt>:
UART_Rec rec_data;
UART_Send tx_data;

// num of bytes = 1 initially, after first byte is num_servos*4+2
// servo number default is 0;
void init_uart_rx_interrupt(uint8_t num_bytes){
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)puhver1, num_bytes);
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <init_uart_rx_interrupt+0x20>)
 8002412:	4804      	ldr	r0, [pc, #16]	@ (8002424 <init_uart_rx_interrupt+0x24>)
 8002414:	f005 f81d 	bl	8007452 <HAL_UART_Receive_IT>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000494 	.word	0x20000494
 8002424:	2000055c 	.word	0x2000055c

08002428 <HAL_UART_RxCpltCallback>:

// HALi UARTi recieve complete pöördumine, overridden
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8002428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242c:	b091      	sub	sp, #68	@ 0x44
 800242e:	af0a      	add	r7, sp, #40	@ 0x28
 8002430:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002432:	b672      	cpsid	i
}
 8002434:	bf00      	nop
	__disable_irq();

	tx_data.status=0;
 8002436:	4b90      	ldr	r3, [pc, #576]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 8002438:	2200      	movs	r2, #0
 800243a:	801a      	strh	r2, [r3, #0]

	to_rec_struct(puhver1, &rec_data);
 800243c:	498f      	ldr	r1, [pc, #572]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 800243e:	4890      	ldr	r0, [pc, #576]	@ (8002680 <HAL_UART_RxCpltCallback+0x258>)
 8002440:	f7ff fba4 	bl	8001b8c <to_rec_struct>

	int len;

	if(rec_data.debug_enabled){
 8002444:	4b8d      	ldr	r3, [pc, #564]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002446:	7f9b      	ldrb	r3, [r3, #30]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8099 	beq.w	8002580 <HAL_UART_RxCpltCallback+0x158>
		len = snprintf(puhver, 99, "ECHO ddeg: 1-%04u, 2-%04u, 3-%04u, 4-%04u, 5-%04u\n",
				rec_data.ddeg[0], rec_data.ddeg[1], rec_data.ddeg[2], rec_data.ddeg[3], rec_data.ddeg[4]);
 800244e:	4b8b      	ldr	r3, [pc, #556]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002450:	881b      	ldrh	r3, [r3, #0]
		len = snprintf(puhver, 99, "ECHO ddeg: 1-%04u, 2-%04u, 3-%04u, 4-%04u, 5-%04u\n",
 8002452:	461c      	mov	r4, r3
				rec_data.ddeg[0], rec_data.ddeg[1], rec_data.ddeg[2], rec_data.ddeg[3], rec_data.ddeg[4]);
 8002454:	4b89      	ldr	r3, [pc, #548]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002456:	885b      	ldrh	r3, [r3, #2]
		len = snprintf(puhver, 99, "ECHO ddeg: 1-%04u, 2-%04u, 3-%04u, 4-%04u, 5-%04u\n",
 8002458:	461a      	mov	r2, r3
				rec_data.ddeg[0], rec_data.ddeg[1], rec_data.ddeg[2], rec_data.ddeg[3], rec_data.ddeg[4]);
 800245a:	4b88      	ldr	r3, [pc, #544]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 800245c:	889b      	ldrh	r3, [r3, #4]
		len = snprintf(puhver, 99, "ECHO ddeg: 1-%04u, 2-%04u, 3-%04u, 4-%04u, 5-%04u\n",
 800245e:	4619      	mov	r1, r3
				rec_data.ddeg[0], rec_data.ddeg[1], rec_data.ddeg[2], rec_data.ddeg[3], rec_data.ddeg[4]);
 8002460:	4b86      	ldr	r3, [pc, #536]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002462:	88db      	ldrh	r3, [r3, #6]
		len = snprintf(puhver, 99, "ECHO ddeg: 1-%04u, 2-%04u, 3-%04u, 4-%04u, 5-%04u\n",
 8002464:	4618      	mov	r0, r3
				rec_data.ddeg[0], rec_data.ddeg[1], rec_data.ddeg[2], rec_data.ddeg[3], rec_data.ddeg[4]);
 8002466:	4b85      	ldr	r3, [pc, #532]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002468:	891b      	ldrh	r3, [r3, #8]
		len = snprintf(puhver, 99, "ECHO ddeg: 1-%04u, 2-%04u, 3-%04u, 4-%04u, 5-%04u\n",
 800246a:	9303      	str	r3, [sp, #12]
 800246c:	9002      	str	r0, [sp, #8]
 800246e:	9101      	str	r1, [sp, #4]
 8002470:	9200      	str	r2, [sp, #0]
 8002472:	4623      	mov	r3, r4
 8002474:	4a83      	ldr	r2, [pc, #524]	@ (8002684 <HAL_UART_RxCpltCallback+0x25c>)
 8002476:	2163      	movs	r1, #99	@ 0x63
 8002478:	4883      	ldr	r0, [pc, #524]	@ (8002688 <HAL_UART_RxCpltCallback+0x260>)
 800247a:	f006 fef7 	bl	800926c <sniprintf>
 800247e:	6178      	str	r0, [r7, #20]
		if(len > 100) len = 100;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	dd01      	ble.n	800248a <HAL_UART_RxCpltCallback+0x62>
 8002486:	2364      	movs	r3, #100	@ 0x64
 8002488:	617b      	str	r3, [r7, #20]
		if(len < 0) len = 0;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da01      	bge.n	8002494 <HAL_UART_RxCpltCallback+0x6c>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(GPIOC, 0x0800, 1);
 8002494:	2201      	movs	r2, #1
 8002496:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800249a:	487c      	ldr	r0, [pc, #496]	@ (800268c <HAL_UART_RxCpltCallback+0x264>)
 800249c:	f001 ff60 	bl	8004360 <HAL_GPIO_WritePin>
		while(HAL_UART_Transmit(&huart1, (const uint8_t*)puhver, len, 1000));
 80024a0:	bf00      	nop
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024aa:	4977      	ldr	r1, [pc, #476]	@ (8002688 <HAL_UART_RxCpltCallback+0x260>)
 80024ac:	4878      	ldr	r0, [pc, #480]	@ (8002690 <HAL_UART_RxCpltCallback+0x268>)
 80024ae:	f004 ff47 	bl	8007340 <HAL_UART_Transmit>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f4      	bne.n	80024a2 <HAL_UART_RxCpltCallback+0x7a>

		len = snprintf(puhver, 99, "ECHO I_lim: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
				rec_data.c_limits[0], rec_data.c_limits[1], rec_data.c_limits[2], rec_data.c_limits[3], rec_data.c_limits[4]);
 80024b8:	4b70      	ldr	r3, [pc, #448]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 80024ba:	895b      	ldrh	r3, [r3, #10]
		len = snprintf(puhver, 99, "ECHO I_lim: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 80024bc:	461c      	mov	r4, r3
				rec_data.c_limits[0], rec_data.c_limits[1], rec_data.c_limits[2], rec_data.c_limits[3], rec_data.c_limits[4]);
 80024be:	4b6f      	ldr	r3, [pc, #444]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 80024c0:	899b      	ldrh	r3, [r3, #12]
		len = snprintf(puhver, 99, "ECHO I_lim: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 80024c2:	461a      	mov	r2, r3
				rec_data.c_limits[0], rec_data.c_limits[1], rec_data.c_limits[2], rec_data.c_limits[3], rec_data.c_limits[4]);
 80024c4:	4b6d      	ldr	r3, [pc, #436]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 80024c6:	89db      	ldrh	r3, [r3, #14]
		len = snprintf(puhver, 99, "ECHO I_lim: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 80024c8:	4619      	mov	r1, r3
				rec_data.c_limits[0], rec_data.c_limits[1], rec_data.c_limits[2], rec_data.c_limits[3], rec_data.c_limits[4]);
 80024ca:	4b6c      	ldr	r3, [pc, #432]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 80024cc:	8a1b      	ldrh	r3, [r3, #16]
		len = snprintf(puhver, 99, "ECHO I_lim: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 80024ce:	4618      	mov	r0, r3
				rec_data.c_limits[0], rec_data.c_limits[1], rec_data.c_limits[2], rec_data.c_limits[3], rec_data.c_limits[4]);
 80024d0:	4b6a      	ldr	r3, [pc, #424]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 80024d2:	8a5b      	ldrh	r3, [r3, #18]
		len = snprintf(puhver, 99, "ECHO I_lim: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 80024d4:	9303      	str	r3, [sp, #12]
 80024d6:	9002      	str	r0, [sp, #8]
 80024d8:	9101      	str	r1, [sp, #4]
 80024da:	9200      	str	r2, [sp, #0]
 80024dc:	4623      	mov	r3, r4
 80024de:	4a6d      	ldr	r2, [pc, #436]	@ (8002694 <HAL_UART_RxCpltCallback+0x26c>)
 80024e0:	2163      	movs	r1, #99	@ 0x63
 80024e2:	4869      	ldr	r0, [pc, #420]	@ (8002688 <HAL_UART_RxCpltCallback+0x260>)
 80024e4:	f006 fec2 	bl	800926c <sniprintf>
 80024e8:	6178      	str	r0, [r7, #20]
		if(len > 100) len = 100;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b64      	cmp	r3, #100	@ 0x64
 80024ee:	dd01      	ble.n	80024f4 <HAL_UART_RxCpltCallback+0xcc>
 80024f0:	2364      	movs	r3, #100	@ 0x64
 80024f2:	617b      	str	r3, [r7, #20]
		if(len < 0) len = 0;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da01      	bge.n	80024fe <HAL_UART_RxCpltCallback+0xd6>
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
		while(HAL_UART_Transmit(&huart1, (const uint8_t*)puhver, len, 1000));
 80024fe:	bf00      	nop
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	b29a      	uxth	r2, r3
 8002504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002508:	495f      	ldr	r1, [pc, #380]	@ (8002688 <HAL_UART_RxCpltCallback+0x260>)
 800250a:	4861      	ldr	r0, [pc, #388]	@ (8002690 <HAL_UART_RxCpltCallback+0x268>)
 800250c:	f004 ff18 	bl	8007340 <HAL_UART_Transmit>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f4      	bne.n	8002500 <HAL_UART_RxCpltCallback+0xd8>

		len = snprintf(puhver, 99, "ECHO time: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
				rec_data.time_ms[0], rec_data.time_ms[1], rec_data.time_ms[2], rec_data.time_ms[3], rec_data.time_ms[4]);
 8002516:	4b59      	ldr	r3, [pc, #356]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002518:	8a9b      	ldrh	r3, [r3, #20]
		len = snprintf(puhver, 99, "ECHO time: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 800251a:	461c      	mov	r4, r3
				rec_data.time_ms[0], rec_data.time_ms[1], rec_data.time_ms[2], rec_data.time_ms[3], rec_data.time_ms[4]);
 800251c:	4b57      	ldr	r3, [pc, #348]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 800251e:	8adb      	ldrh	r3, [r3, #22]
		len = snprintf(puhver, 99, "ECHO time: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 8002520:	461a      	mov	r2, r3
				rec_data.time_ms[0], rec_data.time_ms[1], rec_data.time_ms[2], rec_data.time_ms[3], rec_data.time_ms[4]);
 8002522:	4b56      	ldr	r3, [pc, #344]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002524:	8b1b      	ldrh	r3, [r3, #24]
		len = snprintf(puhver, 99, "ECHO time: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 8002526:	4619      	mov	r1, r3
				rec_data.time_ms[0], rec_data.time_ms[1], rec_data.time_ms[2], rec_data.time_ms[3], rec_data.time_ms[4]);
 8002528:	4b54      	ldr	r3, [pc, #336]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 800252a:	8b5b      	ldrh	r3, [r3, #26]
		len = snprintf(puhver, 99, "ECHO time: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 800252c:	4618      	mov	r0, r3
				rec_data.time_ms[0], rec_data.time_ms[1], rec_data.time_ms[2], rec_data.time_ms[3], rec_data.time_ms[4]);
 800252e:	4b53      	ldr	r3, [pc, #332]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 8002530:	8b9b      	ldrh	r3, [r3, #28]
		len = snprintf(puhver, 99, "ECHO time: 1-%05u, 2-%05u, 3-%05u, 4-%05u, 5-%05u\n",
 8002532:	9303      	str	r3, [sp, #12]
 8002534:	9002      	str	r0, [sp, #8]
 8002536:	9101      	str	r1, [sp, #4]
 8002538:	9200      	str	r2, [sp, #0]
 800253a:	4623      	mov	r3, r4
 800253c:	4a56      	ldr	r2, [pc, #344]	@ (8002698 <HAL_UART_RxCpltCallback+0x270>)
 800253e:	2163      	movs	r1, #99	@ 0x63
 8002540:	4851      	ldr	r0, [pc, #324]	@ (8002688 <HAL_UART_RxCpltCallback+0x260>)
 8002542:	f006 fe93 	bl	800926c <sniprintf>
 8002546:	6178      	str	r0, [r7, #20]
		if(len > 100) len = 100;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	dd01      	ble.n	8002552 <HAL_UART_RxCpltCallback+0x12a>
 800254e:	2364      	movs	r3, #100	@ 0x64
 8002550:	617b      	str	r3, [r7, #20]
		if(len < 0) len = 0;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da01      	bge.n	800255c <HAL_UART_RxCpltCallback+0x134>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

		while(HAL_UART_Transmit(&huart1, (const uint8_t*)puhver, len, 1000));
 800255c:	bf00      	nop
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	b29a      	uxth	r2, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002566:	4948      	ldr	r1, [pc, #288]	@ (8002688 <HAL_UART_RxCpltCallback+0x260>)
 8002568:	4849      	ldr	r0, [pc, #292]	@ (8002690 <HAL_UART_RxCpltCallback+0x268>)
 800256a:	f004 fee9 	bl	8007340 <HAL_UART_Transmit>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f4      	bne.n	800255e <HAL_UART_RxCpltCallback+0x136>
		HAL_GPIO_WritePin(GPIOC, 0x0400, 1);
 8002574:	2201      	movs	r2, #1
 8002576:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800257a:	4844      	ldr	r0, [pc, #272]	@ (800268c <HAL_UART_RxCpltCallback+0x264>)
 800257c:	f001 fef0 	bl	8004360 <HAL_GPIO_WritePin>
	}


	for(uint8_t i=0; i<100; i++){
 8002580:	2300      	movs	r3, #0
 8002582:	74fb      	strb	r3, [r7, #19]
 8002584:	e006      	b.n	8002594 <HAL_UART_RxCpltCallback+0x16c>
		puhver1[i]='\0';
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	4a3d      	ldr	r2, [pc, #244]	@ (8002680 <HAL_UART_RxCpltCallback+0x258>)
 800258a:	2100      	movs	r1, #0
 800258c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<100; i++){
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	3301      	adds	r3, #1
 8002592:	74fb      	strb	r3, [r7, #19]
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b63      	cmp	r3, #99	@ 0x63
 8002598:	d9f5      	bls.n	8002586 <HAL_UART_RxCpltCallback+0x15e>
	}

	Update_PWM_status(&rec_data);
 800259a:	4838      	ldr	r0, [pc, #224]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 800259c:	f7ff f834 	bl	8001608 <Update_PWM_status>
	HAL_GPIO_WritePin(GPIOC, 0x0800, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025a6:	4839      	ldr	r0, [pc, #228]	@ (800268c <HAL_UART_RxCpltCallback+0x264>)
 80025a8:	f001 feda 	bl	8004360 <HAL_GPIO_WritePin>

	// needed for re-enabing
	HAL_UART_Receive_IT(&huart1, (uint8_t*)puhver1, pikkus);
 80025ac:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <HAL_UART_RxCpltCallback+0x274>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4933      	ldr	r1, [pc, #204]	@ (8002680 <HAL_UART_RxCpltCallback+0x258>)
 80025b4:	4836      	ldr	r0, [pc, #216]	@ (8002690 <HAL_UART_RxCpltCallback+0x268>)
 80025b6:	f004 ff4c 	bl	8007452 <HAL_UART_Receive_IT>

	get_adc_values(adc_values);
 80025ba:	4839      	ldr	r0, [pc, #228]	@ (80026a0 <HAL_UART_RxCpltCallback+0x278>)
 80025bc:	f7fe fcca 	bl	8000f54 <get_adc_values>
	calculate_currents(&tx_data, adc_values);
 80025c0:	4937      	ldr	r1, [pc, #220]	@ (80026a0 <HAL_UART_RxCpltCallback+0x278>)
 80025c2:	482d      	ldr	r0, [pc, #180]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 80025c4:	f7fe fcf8 	bl	8000fb8 <calculate_currents>
	currents_calculate_status(&rec_data, &tx_data, adc_values);
 80025c8:	4a35      	ldr	r2, [pc, #212]	@ (80026a0 <HAL_UART_RxCpltCallback+0x278>)
 80025ca:	492b      	ldr	r1, [pc, #172]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 80025cc:	482b      	ldr	r0, [pc, #172]	@ (800267c <HAL_UART_RxCpltCallback+0x254>)
 80025ce:	f7fe fd4f 	bl	8001070 <currents_calculate_status>

	len = snprintf(puhverST, 99, "ST: %01u, Currents(A): 1: %.04f, 2: %.04f, 3: %.04f, 4: %.04f, 5: %.04f \n",
			tx_data.status, tx_data.currents[0], tx_data.currents[1], tx_data.currents[2], tx_data.currents[3], tx_data.currents[4]);
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
	len = snprintf(puhverST, 99, "ST: %01u, Currents(A): 1: %.04f, 2: %.04f, 3: %.04f, 4: %.04f, 5: %.04f \n",
 80025d6:	461e      	mov	r6, r3
			tx_data.status, tx_data.currents[0], tx_data.currents[1], tx_data.currents[2], tx_data.currents[3], tx_data.currents[4]);
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 80025da:	685b      	ldr	r3, [r3, #4]
	len = snprintf(puhverST, 99, "ST: %01u, Currents(A): 1: %.04f, 2: %.04f, 3: %.04f, 4: %.04f, 5: %.04f \n",
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ffbb 	bl	8000558 <__aeabi_f2d>
 80025e2:	4604      	mov	r4, r0
 80025e4:	460d      	mov	r5, r1
			tx_data.status, tx_data.currents[0], tx_data.currents[1], tx_data.currents[2], tx_data.currents[3], tx_data.currents[4]);
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 80025e8:	689b      	ldr	r3, [r3, #8]
	len = snprintf(puhverST, 99, "ST: %01u, Currents(A): 1: %.04f, 2: %.04f, 3: %.04f, 4: %.04f, 5: %.04f \n",
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffb4 	bl	8000558 <__aeabi_f2d>
 80025f0:	4680      	mov	r8, r0
 80025f2:	4689      	mov	r9, r1
			tx_data.status, tx_data.currents[0], tx_data.currents[1], tx_data.currents[2], tx_data.currents[3], tx_data.currents[4]);
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 80025f6:	68db      	ldr	r3, [r3, #12]
	len = snprintf(puhverST, 99, "ST: %01u, Currents(A): 1: %.04f, 2: %.04f, 3: %.04f, 4: %.04f, 5: %.04f \n",
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffad 	bl	8000558 <__aeabi_f2d>
 80025fe:	4682      	mov	sl, r0
 8002600:	468b      	mov	fp, r1
			tx_data.status, tx_data.currents[0], tx_data.currents[1], tx_data.currents[2], tx_data.currents[3], tx_data.currents[4]);
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 8002604:	691b      	ldr	r3, [r3, #16]
	len = snprintf(puhverST, 99, "ST: %01u, Currents(A): 1: %.04f, 2: %.04f, 3: %.04f, 4: %.04f, 5: %.04f \n",
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ffa6 	bl	8000558 <__aeabi_f2d>
 800260c:	e9c7 0100 	strd	r0, r1, [r7]
			tx_data.status, tx_data.currents[0], tx_data.currents[1], tx_data.currents[2], tx_data.currents[3], tx_data.currents[4]);
 8002610:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_UART_RxCpltCallback+0x250>)
 8002612:	695b      	ldr	r3, [r3, #20]
	len = snprintf(puhverST, 99, "ST: %01u, Currents(A): 1: %.04f, 2: %.04f, 3: %.04f, 4: %.04f, 5: %.04f \n",
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff9f 	bl	8000558 <__aeabi_f2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002622:	ed97 7b00 	vldr	d7, [r7]
 8002626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800262a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800262e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002632:	e9cd 4500 	strd	r4, r5, [sp]
 8002636:	4633      	mov	r3, r6
 8002638:	4a1a      	ldr	r2, [pc, #104]	@ (80026a4 <HAL_UART_RxCpltCallback+0x27c>)
 800263a:	2163      	movs	r1, #99	@ 0x63
 800263c:	481a      	ldr	r0, [pc, #104]	@ (80026a8 <HAL_UART_RxCpltCallback+0x280>)
 800263e:	f006 fe15 	bl	800926c <sniprintf>
 8002642:	6178      	str	r0, [r7, #20]

	if(len > 100) len = 100;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	dd01      	ble.n	800264e <HAL_UART_RxCpltCallback+0x226>
 800264a:	2364      	movs	r3, #100	@ 0x64
 800264c:	617b      	str	r3, [r7, #20]
	if(len > 0) uart_send_status(puhverST, len);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	dd03      	ble.n	800265c <HAL_UART_RxCpltCallback+0x234>
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	4814      	ldr	r0, [pc, #80]	@ (80026a8 <HAL_UART_RxCpltCallback+0x280>)
 8002658:	f000 f828 	bl	80026ac <uart_send_status>
  __ASM volatile ("cpsie i" : : : "memory");
 800265c:	b662      	cpsie	i
}
 800265e:	bf00      	nop

	__enable_irq();
	HAL_GPIO_WritePin(GPIOC, 0x0400, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002666:	4809      	ldr	r0, [pc, #36]	@ (800268c <HAL_UART_RxCpltCallback+0x264>)
 8002668:	f001 fe7a 	bl	8004360 <HAL_GPIO_WritePin>
}
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002676:	bf00      	nop
 8002678:	20000544 	.word	0x20000544
 800267c:	20000524 	.word	0x20000524
 8002680:	20000494 	.word	0x20000494
 8002684:	0800b508 	.word	0x0800b508
 8002688:	20000430 	.word	0x20000430
 800268c:	48000800 	.word	0x48000800
 8002690:	2000055c 	.word	0x2000055c
 8002694:	0800b53c 	.word	0x0800b53c
 8002698:	0800b570 	.word	0x0800b570
 800269c:	20000004 	.word	0x20000004
 80026a0:	20000518 	.word	0x20000518
 80026a4:	0800b5a4 	.word	0x0800b5a4
 80026a8:	200004b4 	.word	0x200004b4

080026ac <uart_send_status>:

void uart_send_status(char* puhver, int len){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	while(HAL_UART_Transmit(&huart1, (const uint8_t *)puhver, len, 1000));
 80026b6:	bf00      	nop
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <uart_send_status+0x2c>)
 80026c4:	f004 fe3c 	bl	8007340 <HAL_UART_Transmit>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f4      	bne.n	80026b8 <uart_send_status+0xc>
}
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	2000055c 	.word	0x2000055c

080026dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e0:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 80026e2:	4a19      	ldr	r2, [pc, #100]	@ (8002748 <MX_USART1_UART_Init+0x6c>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 80026e8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80026ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800271e:	4809      	ldr	r0, [pc, #36]	@ (8002744 <MX_USART1_UART_Init+0x68>)
 8002720:	f004 fdc0 	bl	80072a4 <HAL_UART_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800272a:	f7fe feed 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USART2 interrupt Init */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2025      	movs	r0, #37	@ 0x25
 8002734:	f001 fa25 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002738:	2025      	movs	r0, #37	@ 0x25
 800273a:	f001 fa3e 	bl	8003bba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000055c 	.word	0x2000055c
 8002748:	40013800 	.word	0x40013800

0800274c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	@ 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1b      	ldr	r2, [pc, #108]	@ (80027d8 <HAL_UART_MspInit+0x8c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12f      	bne.n	80027ce <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276e:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_UART_MspInit+0x90>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_UART_MspInit+0x90>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b18      	ldr	r3, [pc, #96]	@ (80027dc <HAL_UART_MspInit+0x90>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <HAL_UART_MspInit+0x90>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_UART_MspInit+0x90>)
 800278c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002790:	6153      	str	r3, [r2, #20]
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_UART_MspInit+0x90>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800279e:	2330      	movs	r3, #48	@ 0x30
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ae:	2307      	movs	r3, #7
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4809      	ldr	r0, [pc, #36]	@ (80027e0 <HAL_UART_MspInit+0x94>)
 80027ba:	f001 fc47 	bl	800404c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	2025      	movs	r0, #37	@ 0x25
 80027c4:	f001 f9dd 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027c8:	2025      	movs	r0, #37	@ 0x25
 80027ca:	f001 f9f6 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027ce:	bf00      	nop
 80027d0:	3728      	adds	r7, #40	@ 0x28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40021000 	.word	0x40021000
 80027e0:	48000800 	.word	0x48000800

080027e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800281c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80027e8:	f7ff fb82 	bl	8001ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ec:	480c      	ldr	r0, [pc, #48]	@ (8002820 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ee:	490d      	ldr	r1, [pc, #52]	@ (8002824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002828 <LoopForever+0xe>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002804:	4c0a      	ldr	r4, [pc, #40]	@ (8002830 <LoopForever+0x16>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002812:	f006 fdfb 	bl	800940c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002816:	f7fe fdb9 	bl	800138c <main>

0800281a <LoopForever>:

LoopForever:
    b LoopForever
 800281a:	e7fe      	b.n	800281a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800281c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002824:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002828:	0800b9a8 	.word	0x0800b9a8
  ldr r2, =_sbss
 800282c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002830:	20000734 	.word	0x20000734

08002834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002834:	e7fe      	b.n	8002834 <ADC1_2_IRQHandler>
	...

08002838 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <HAL_Init+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <HAL_Init+0x28>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f001 f98f 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	200f      	movs	r0, #15
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fa0a 	bl	8001c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000

08002864 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f001 f9a7 	bl	8003bd6 <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f001 f96f 	bl	8003b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	@ (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000000 	.word	0x20000000
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000008 	.word	0x20000008

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	200005e4 	.word	0x200005e4

080028ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80028f0:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	200005e4 	.word	0x200005e4

08002904 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff ffee 	bl	80028ec <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d005      	beq.n	800292a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291e:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <HAL_Delay+0x44>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800292a:	bf00      	nop
 800292c:	f7ff ffde 	bl	80028ec <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8f7      	bhi.n	800292c <HAL_Delay+0x28>
  {
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000000c 	.word	0x2000000c

0800294c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b09a      	sub	sp, #104	@ 0x68
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e1e3      	b.n	8002d70 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d176      	bne.n	8002aa8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d152      	bne.n	8002a68 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe f9e3 	bl	8000da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d13b      	bne.n	8002a68 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 ff85 	bl	8003900 <ADC_Disable>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d12f      	bne.n	8002a68 <HAL_ADC_Init+0xe0>
 8002a08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d12b      	bne.n	8002a68 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a18:	f023 0302 	bic.w	r3, r3, #2
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a32:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a42:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a44:	4b92      	ldr	r3, [pc, #584]	@ (8002c90 <HAL_ADC_Init+0x308>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a92      	ldr	r2, [pc, #584]	@ (8002c94 <HAL_ADC_Init+0x30c>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0c9a      	lsrs	r2, r3, #18
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a5a:	e002      	b.n	8002a62 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f9      	bne.n	8002a5c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a84:	d110      	bne.n	8002aa8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	f023 0312 	bic.w	r3, r3, #18
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f040 8150 	bne.w	8002d56 <HAL_ADC_Init+0x3ce>
 8002ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 814b 	bne.w	8002d56 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 8143 	bne.w	8002d56 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ad8:	f043 0202 	orr.w	r2, r3, #2
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_Init+0x16c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6a      	ldr	r2, [pc, #424]	@ (8002c98 <HAL_ADC_Init+0x310>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_Init+0x170>
 8002af4:	4b69      	ldr	r3, [pc, #420]	@ (8002c9c <HAL_ADC_Init+0x314>)
 8002af6:	e000      	b.n	8002afa <HAL_ADC_Init+0x172>
 8002af8:	4b69      	ldr	r3, [pc, #420]	@ (8002ca0 <HAL_ADC_Init+0x318>)
 8002afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b04:	d102      	bne.n	8002b0c <HAL_ADC_Init+0x184>
 8002b06:	4b64      	ldr	r3, [pc, #400]	@ (8002c98 <HAL_ADC_Init+0x310>)
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e01a      	b.n	8002b42 <HAL_ADC_Init+0x1ba>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a61      	ldr	r2, [pc, #388]	@ (8002c98 <HAL_ADC_Init+0x310>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d103      	bne.n	8002b1e <HAL_ADC_Init+0x196>
 8002b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e011      	b.n	8002b42 <HAL_ADC_Init+0x1ba>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a60      	ldr	r2, [pc, #384]	@ (8002ca4 <HAL_ADC_Init+0x31c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <HAL_ADC_Init+0x1a6>
 8002b28:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca8 <HAL_ADC_Init+0x320>)
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e009      	b.n	8002b42 <HAL_ADC_Init+0x1ba>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca8 <HAL_ADC_Init+0x320>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d102      	bne.n	8002b3e <HAL_ADC_Init+0x1b6>
 8002b38:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca4 <HAL_ADC_Init+0x31c>)
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e001      	b.n	8002b42 <HAL_ADC_Init+0x1ba>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d108      	bne.n	8002b62 <HAL_ADC_Init+0x1da>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_Init+0x1da>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_Init+0x1dc>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d11c      	bne.n	8002ba2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d010      	beq.n	8002b90 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_ADC_Init+0x202>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Init+0x202>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_Init+0x204>
 8002b8a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d108      	bne.n	8002ba2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ba0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7e5b      	ldrb	r3, [r3, #25]
 8002ba6:	035b      	lsls	r3, r3, #13
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bac:	2a01      	cmp	r2, #1
 8002bae:	d002      	beq.n	8002bb6 <HAL_ADC_Init+0x22e>
 8002bb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bb4:	e000      	b.n	8002bb8 <HAL_ADC_Init+0x230>
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d11b      	bne.n	8002c0e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7e5b      	ldrb	r3, [r3, #25]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	3b01      	subs	r3, #1
 8002be4:	045a      	lsls	r2, r3, #17
 8002be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bee:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bf0:	e00d      	b.n	8002c0e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d054      	beq.n	8002cc0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ca4 <HAL_ADC_Init+0x31c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_ADC_Init+0x2a2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a20      	ldr	r2, [pc, #128]	@ (8002ca8 <HAL_ADC_Init+0x320>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d140      	bne.n	8002cac <HAL_ADC_Init+0x324>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8002c32:	d02a      	beq.n	8002c8a <HAL_ADC_Init+0x302>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3c:	d022      	beq.n	8002c84 <HAL_ADC_Init+0x2fc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002c46:	d01a      	beq.n	8002c7e <HAL_ADC_Init+0x2f6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8002c50:	d012      	beq.n	8002c78 <HAL_ADC_Init+0x2f0>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8002c5a:	d00a      	beq.n	8002c72 <HAL_ADC_Init+0x2ea>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8002c64:	d002      	beq.n	8002c6c <HAL_ADC_Init+0x2e4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	e023      	b.n	8002cb4 <HAL_ADC_Init+0x32c>
 8002c6c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002c70:	e020      	b.n	8002cb4 <HAL_ADC_Init+0x32c>
 8002c72:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002c76:	e01d      	b.n	8002cb4 <HAL_ADC_Init+0x32c>
 8002c78:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002c7c:	e01a      	b.n	8002cb4 <HAL_ADC_Init+0x32c>
 8002c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c82:	e017      	b.n	8002cb4 <HAL_ADC_Init+0x32c>
 8002c84:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002c88:	e014      	b.n	8002cb4 <HAL_ADC_Init+0x32c>
 8002c8a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002c8e:	e011      	b.n	8002cb4 <HAL_ADC_Init+0x32c>
 8002c90:	20000000 	.word	0x20000000
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	50000100 	.word	0x50000100
 8002c9c:	50000300 	.word	0x50000300
 8002ca0:	50000700 	.word	0x50000700
 8002ca4:	50000400 	.word	0x50000400
 8002ca8:	50000500 	.word	0x50000500
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d114      	bne.n	8002cf8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7e1b      	ldrb	r3, [r3, #24]
 8002ce6:	039a      	lsls	r2, r3, #14
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_ADC_Init+0x3f0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10c      	bne.n	8002d2e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f023 010f 	bic.w	r1, r3, #15
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d2c:	e007      	b.n	8002d3e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 020f 	bic.w	r2, r2, #15
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f023 0303 	bic.w	r3, r3, #3
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d54:	e00a      	b.n	8002d6c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f023 0312 	bic.w	r3, r3, #18
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002d6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3768      	adds	r7, #104	@ 0x68
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	fff0c007 	.word	0xfff0c007

08002d7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80f7 	bne.w	8002f8a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_Start_DMA+0x2e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e0f2      	b.n	8002f90 <HAL_ADC_Start_DMA+0x214>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_Start_DMA+0x4a>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a75      	ldr	r2, [pc, #468]	@ (8002f98 <HAL_ADC_Start_DMA+0x21c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d109      	bne.n	8002dda <HAL_ADC_Start_DMA+0x5e>
 8002dc6:	4b75      	ldr	r3, [pc, #468]	@ (8002f9c <HAL_ADC_Start_DMA+0x220>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e008      	b.n	8002dec <HAL_ADC_Start_DMA+0x70>
 8002dda:	4b71      	ldr	r3, [pc, #452]	@ (8002fa0 <HAL_ADC_Start_DMA+0x224>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80c5 	beq.w	8002f7c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fd20 	bl	8003838 <ADC_Enable>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80b7 	bne.w	8002f72 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_Start_DMA+0xb0>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5c      	ldr	r2, [pc, #368]	@ (8002f98 <HAL_ADC_Start_DMA+0x21c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d106      	bne.n	8002e3a <HAL_ADC_Start_DMA+0xbe>
 8002e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f9c <HAL_ADC_Start_DMA+0x220>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <HAL_ADC_Start_DMA+0xde>
 8002e38:	e005      	b.n	8002e46 <HAL_ADC_Start_DMA+0xca>
 8002e3a:	4b59      	ldr	r3, [pc, #356]	@ (8002fa0 <HAL_ADC_Start_DMA+0x224>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_ADC_Start_DMA+0xde>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e4e:	d004      	beq.n	8002e5a <HAL_ADC_Start_DMA+0xde>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a53      	ldr	r2, [pc, #332]	@ (8002fa4 <HAL_ADC_Start_DMA+0x228>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d115      	bne.n	8002e86 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d036      	beq.n	8002ee2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e84:	e02d      	b.n	8002ee2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e9a:	d004      	beq.n	8002ea6 <HAL_ADC_Start_DMA+0x12a>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8002f98 <HAL_ADC_Start_DMA+0x21c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10a      	bne.n	8002ebc <HAL_ADC_Start_DMA+0x140>
 8002ea6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e008      	b.n	8002ece <HAL_ADC_Start_DMA+0x152>
 8002ebc:	4b39      	ldr	r3, [pc, #228]	@ (8002fa4 <HAL_ADC_Start_DMA+0x228>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002eda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eee:	d106      	bne.n	8002efe <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef4:	f023 0206 	bic.w	r2, r3, #6
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44
 8002efc:	e002      	b.n	8002f04 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	4a25      	ldr	r2, [pc, #148]	@ (8002fa8 <HAL_ADC_Start_DMA+0x22c>)
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	4a24      	ldr	r2, [pc, #144]	@ (8002fac <HAL_ADC_Start_DMA+0x230>)
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f20:	4a23      	ldr	r2, [pc, #140]	@ (8002fb0 <HAL_ADC_Start_DMA+0x234>)
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	221c      	movs	r2, #28
 8002f2a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0210 	orr.w	r2, r2, #16
 8002f3a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3340      	adds	r3, #64	@ 0x40
 8002f56:	4619      	mov	r1, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f000 fe8e 	bl	8003c7c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0204 	orr.w	r2, r2, #4
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e00d      	b.n	8002f8e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002f7a:	e008      	b.n	8002f8e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002f88:	e001      	b.n	8002f8e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	50000100 	.word	0x50000100
 8002f9c:	50000300 	.word	0x50000300
 8002fa0:	50000700 	.word	0x50000700
 8002fa4:	50000400 	.word	0x50000400
 8002fa8:	0800376d 	.word	0x0800376d
 8002fac:	080037e7 	.word	0x080037e7
 8002fb0:	08003803 	.word	0x08003803

08002fb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b09b      	sub	sp, #108	@ 0x6c
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x22>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e2c8      	b.n	8003568 <HAL_ADC_ConfigChannel+0x5b4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 82ac 	bne.w	8003546 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d81c      	bhi.n	8003030 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	461a      	mov	r2, r3
 800300a:	231f      	movs	r3, #31
 800300c:	4093      	lsls	r3, r2
 800300e:	43db      	mvns	r3, r3
 8003010:	4019      	ands	r1, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa00 f203 	lsl.w	r2, r0, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	631a      	str	r2, [r3, #48]	@ 0x30
 800302e:	e063      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d81e      	bhi.n	8003076 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	3b1e      	subs	r3, #30
 800304c:	221f      	movs	r2, #31
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	4019      	ands	r1, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	3b1e      	subs	r3, #30
 8003068:	fa00 f203 	lsl.w	r2, r0, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	635a      	str	r2, [r3, #52]	@ 0x34
 8003074:	e040      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b0e      	cmp	r3, #14
 800307c:	d81e      	bhi.n	80030bc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	3b3c      	subs	r3, #60	@ 0x3c
 8003092:	221f      	movs	r2, #31
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	4019      	ands	r1, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	3b3c      	subs	r3, #60	@ 0x3c
 80030ae:	fa00 f203 	lsl.w	r2, r0, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80030ba:	e01d      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	3b5a      	subs	r3, #90	@ 0x5a
 80030d0:	221f      	movs	r2, #31
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	4019      	ands	r1, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	3b5a      	subs	r3, #90	@ 0x5a
 80030ec:	fa00 f203 	lsl.w	r2, r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 80e5 	bne.w	80032d2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d91c      	bls.n	800314a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6999      	ldr	r1, [r3, #24]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	3b1e      	subs	r3, #30
 8003122:	2207      	movs	r2, #7
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	4019      	ands	r1, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6898      	ldr	r0, [r3, #8]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	3b1e      	subs	r3, #30
 800313c:	fa00 f203 	lsl.w	r2, r0, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	619a      	str	r2, [r3, #24]
 8003148:	e019      	b.n	800317e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6959      	ldr	r1, [r3, #20]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	2207      	movs	r2, #7
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	4019      	ands	r1, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6898      	ldr	r0, [r3, #8]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	3b01      	subs	r3, #1
 800319c:	2b03      	cmp	r3, #3
 800319e:	d84f      	bhi.n	8003240 <HAL_ADC_ConfigChannel+0x28c>
 80031a0:	a201      	add	r2, pc, #4	@ (adr r2, 80031a8 <HAL_ADC_ConfigChannel+0x1f4>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031fd 	.word	0x080031fd
 80031b4:	0800321f 	.word	0x0800321f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031be:	4b99      	ldr	r3, [pc, #612]	@ (8003424 <HAL_ADC_ConfigChannel+0x470>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	0691      	lsls	r1, r2, #26
 80031c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031ca:	430a      	orrs	r2, r1
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80031d6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031d8:	e07b      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80031e0:	4b90      	ldr	r3, [pc, #576]	@ (8003424 <HAL_ADC_ConfigChannel+0x470>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	0691      	lsls	r1, r2, #26
 80031ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031ec:	430a      	orrs	r2, r1
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80031f8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031fa:	e06a      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003202:	4b88      	ldr	r3, [pc, #544]	@ (8003424 <HAL_ADC_ConfigChannel+0x470>)
 8003204:	4013      	ands	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	0691      	lsls	r1, r2, #26
 800320c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800320e:	430a      	orrs	r2, r1
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800321a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800321c:	e059      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003224:	4b7f      	ldr	r3, [pc, #508]	@ (8003424 <HAL_ADC_ConfigChannel+0x470>)
 8003226:	4013      	ands	r3, r2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	0691      	lsls	r1, r2, #26
 800322e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003230:	430a      	orrs	r2, r1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800323c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800323e:	e048      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	069b      	lsls	r3, r3, #26
 8003250:	429a      	cmp	r2, r3
 8003252:	d107      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003262:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	069b      	lsls	r3, r3, #26
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003286:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800328e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	069b      	lsls	r3, r3, #26
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032aa:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	069b      	lsls	r3, r3, #26
 80032bc:	429a      	cmp	r2, r3
 80032be:	d107      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80032d0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x33e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x33e>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x340>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f040 8131 	bne.w	800355c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d00f      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2201      	movs	r2, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43da      	mvns	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	400a      	ands	r2, r1
 800331c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003320:	e049      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	409a      	lsls	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b09      	cmp	r3, #9
 8003342:	d91c      	bls.n	800337e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	3b1b      	subs	r3, #27
 8003356:	2207      	movs	r2, #7
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	4019      	ands	r1, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6898      	ldr	r0, [r3, #8]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	3b1b      	subs	r3, #27
 8003370:	fa00 f203 	lsl.w	r2, r0, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	619a      	str	r2, [r3, #24]
 800337c:	e01b      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6959      	ldr	r1, [r3, #20]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	2207      	movs	r2, #7
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	4019      	ands	r1, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6898      	ldr	r0, [r3, #8]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	fa00 f203 	lsl.w	r2, r0, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033be:	d004      	beq.n	80033ca <HAL_ADC_ConfigChannel+0x416>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a18      	ldr	r2, [pc, #96]	@ (8003428 <HAL_ADC_ConfigChannel+0x474>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x41a>
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <HAL_ADC_ConfigChannel+0x478>)
 80033cc:	e000      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x41c>
 80033ce:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <HAL_ADC_ConfigChannel+0x47c>)
 80033d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d105      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80033da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d015      	beq.n	8003412 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80033ea:	2b11      	cmp	r3, #17
 80033ec:	d105      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80033fe:	2b12      	cmp	r3, #18
 8003400:	f040 80ac 	bne.w	800355c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 80a5 	bne.w	800355c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800341a:	d10b      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x480>
 800341c:	4b02      	ldr	r3, [pc, #8]	@ (8003428 <HAL_ADC_ConfigChannel+0x474>)
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e023      	b.n	800346a <HAL_ADC_ConfigChannel+0x4b6>
 8003422:	bf00      	nop
 8003424:	83fff000 	.word	0x83fff000
 8003428:	50000100 	.word	0x50000100
 800342c:	50000300 	.word	0x50000300
 8003430:	50000700 	.word	0x50000700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4e      	ldr	r2, [pc, #312]	@ (8003574 <HAL_ADC_ConfigChannel+0x5c0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d103      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x492>
 800343e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e011      	b.n	800346a <HAL_ADC_ConfigChannel+0x4b6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a4b      	ldr	r2, [pc, #300]	@ (8003578 <HAL_ADC_ConfigChannel+0x5c4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d102      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x4a2>
 8003450:	4b4a      	ldr	r3, [pc, #296]	@ (800357c <HAL_ADC_ConfigChannel+0x5c8>)
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e009      	b.n	800346a <HAL_ADC_ConfigChannel+0x4b6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a48      	ldr	r2, [pc, #288]	@ (800357c <HAL_ADC_ConfigChannel+0x5c8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d102      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x4b2>
 8003460:	4b45      	ldr	r3, [pc, #276]	@ (8003578 <HAL_ADC_ConfigChannel+0x5c4>)
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e001      	b.n	800346a <HAL_ADC_ConfigChannel+0x4b6>
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_ADC_ConfigChannel+0x4d6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_ADC_ConfigChannel+0x4d6>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_ADC_ConfigChannel+0x4d8>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d150      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003490:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x4fe>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x4fe>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x500>
 80034b2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d13c      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d11d      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x548>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c8:	d118      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034d4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003580 <HAL_ADC_ConfigChannel+0x5cc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <HAL_ADC_ConfigChannel+0x5d0>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	0c9a      	lsrs	r2, r3, #18
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034ec:	e002      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f9      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034fa:	e02e      	b.n	800355a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b11      	cmp	r3, #17
 8003502:	d10b      	bne.n	800351c <HAL_ADC_ConfigChannel+0x568>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350c:	d106      	bne.n	800351c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800350e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003518:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800351a:	e01e      	b.n	800355a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d11a      	bne.n	800355a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003524:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800352c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800352e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003530:	e013      	b.n	800355a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003544:	e00a      	b.n	800355c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003558:	e000      	b.n	800355c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800355a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003564:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003568:	4618      	mov	r0, r3
 800356a:	376c      	adds	r7, #108	@ 0x6c
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	50000100 	.word	0x50000100
 8003578:	50000400 	.word	0x50000400
 800357c:	50000500 	.word	0x50000500
 8003580:	20000000 	.word	0x20000000
 8003584:	431bde83 	.word	0x431bde83

08003588 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003588:	b480      	push	{r7}
 800358a:	b099      	sub	sp, #100	@ 0x64
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a0:	d102      	bne.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80035a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	e01a      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d103      	bne.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80035b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	e011      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a67      	ldr	r2, [pc, #412]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d102      	bne.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035c4:	4b66      	ldr	r3, [pc, #408]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	e009      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a64      	ldr	r2, [pc, #400]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d102      	bne.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035d4:	4b61      	ldr	r3, [pc, #388]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	e001      	b.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b0      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0a9      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 808d 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8086 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4b      	ldr	r2, [pc, #300]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003630:	4b4c      	ldr	r3, [pc, #304]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003632:	e000      	b.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003634:	4b4c      	ldr	r3, [pc, #304]	@ (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003636:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d040      	beq.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003652:	035b      	lsls	r3, r3, #13
 8003654:	430b      	orrs	r3, r1
 8003656:	431a      	orrs	r2, r3
 8003658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800365a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d15c      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800369e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d14b      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80036a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036ac:	f023 030f 	bic.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6811      	ldr	r1, [r2, #0]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	e03c      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d108      	bne.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d123      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003710:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003712:	2b00      	cmp	r3, #0
 8003714:	d112      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003716:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003724:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003726:	e009      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800373a:	e000      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800373c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003746:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800374a:	4618      	mov	r0, r3
 800374c:	3764      	adds	r7, #100	@ 0x64
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	50000100 	.word	0x50000100
 800375c:	50000400 	.word	0x50000400
 8003760:	50000500 	.word	0x50000500
 8003764:	50000300 	.word	0x50000300
 8003768:	50000700 	.word	0x50000700

0800376c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003782:	2b00      	cmp	r3, #0
 8003784:	d126      	bne.n	80037d4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800379c:	2b00      	cmp	r3, #0
 800379e:	d115      	bne.n	80037cc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff f8bd 	bl	800294c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80037d2:	e004      	b.n	80037de <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff f8b3 	bl	8002960 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff f8a3 	bl	8002974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d108      	bne.n	8003864 <ADC_Enable+0x2c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <ADC_Enable+0x2c>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <ADC_Enable+0x2e>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d143      	bne.n	80038f2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b22      	ldr	r3, [pc, #136]	@ (80038fc <ADC_Enable+0xc4>)
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f043 0210 	orr.w	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e02f      	b.n	80038f4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80038a4:	f7ff f822 	bl	80028ec <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038aa:	e01b      	b.n	80038e4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ac:	f7ff f81e 	bl	80028ec <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d914      	bls.n	80038e4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d00d      	beq.n	80038e4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e007      	b.n	80038f4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d1dc      	bne.n	80038ac <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	8000003f 	.word	0x8000003f

08003900 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <ADC_Disable+0x2c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <ADC_Disable+0x2c>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <ADC_Disable+0x2e>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d047      	beq.n	80039c2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 030d 	and.w	r3, r3, #13
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10f      	bne.n	8003960 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0202 	orr.w	r2, r2, #2
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2203      	movs	r2, #3
 8003956:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003958:	f7fe ffc8 	bl	80028ec <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800395e:	e029      	b.n	80039b4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f043 0210 	orr.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e023      	b.n	80039c4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800397c:	f7fe ffb6 	bl	80028ec <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d914      	bls.n	80039b4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	f043 0210 	orr.w	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e007      	b.n	80039c4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d0dc      	beq.n	800397c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	@ (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <__NVIC_GetPriorityGrouping+0x18>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 0307 	and.w	r3, r3, #7
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	db0b      	blt.n	8003a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	4907      	ldr	r1, [pc, #28]	@ (8003a68 <__NVIC_EnableIRQ+0x38>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2001      	movs	r0, #1
 8003a52:	fa00 f202 	lsl.w	r2, r0, r2
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	@ (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	@ (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff8e 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff29 	bl	80039cc <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff3e 	bl	8003a14 <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff8e 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5d 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff31 	bl	8003a30 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffa2 	bl	8003b28 <SysTick_Config>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e037      	b.n	8003c74 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c1a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003c1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f9bc 	bl	8003fd4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_DMA_Start_IT+0x20>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e04a      	b.n	8003d32 <HAL_DMA_Start_IT+0xb6>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d13a      	bne.n	8003d24 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f950 	bl	8003f78 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 020e 	orr.w	r2, r2, #14
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e00f      	b.n	8003d12 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 020a 	orr.w	r2, r2, #10
 8003d00:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e005      	b.n	8003d30 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e02e      	b.n	8003daa <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d008      	beq.n	8003d68 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e020      	b.n	8003daa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 020e 	bic.w	r2, r2, #14
 8003d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	2101      	movs	r1, #1
 8003d92:	fa01 f202 	lsl.w	r2, r1, r2
 8003d96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d005      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e027      	b.n	8003e28 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 020e 	bic.w	r2, r2, #14
 8003de6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f202 	lsl.w	r2, r1, r2
 8003e06:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
    }
  }
  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	2204      	movs	r2, #4
 8003e50:	409a      	lsls	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d024      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x72>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01f      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d06a      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ea2:	e065      	b.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02c      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdc>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d027      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 020a 	bic.w	r2, r2, #10
 8003eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	2102      	movs	r1, #2
 8003eee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d035      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f0c:	e030      	b.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2208      	movs	r2, #8
 8003f14:	409a      	lsls	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d028      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 020e 	bic.w	r2, r2, #14
 8003f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f202 	lsl.w	r2, r1, r2
 8003f46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
    }
  }
}
 8003f6e:	e7ff      	b.n	8003f70 <HAL_DMA_IRQHandler+0x13e>
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d108      	bne.n	8003fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fb6:	e007      	b.n	8003fc8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b14      	ldr	r3, [pc, #80]	@ (8004034 <DMA_CalcBaseAndBitshift+0x60>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d80f      	bhi.n	8004008 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <DMA_CalcBaseAndBitshift+0x64>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	4a12      	ldr	r2, [pc, #72]	@ (800403c <DMA_CalcBaseAndBitshift+0x68>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	009a      	lsls	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0f      	ldr	r2, [pc, #60]	@ (8004040 <DMA_CalcBaseAndBitshift+0x6c>)
 8004004:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004006:	e00e      	b.n	8004026 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <DMA_CalcBaseAndBitshift+0x70>)
 8004010:	4413      	add	r3, r2
 8004012:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <DMA_CalcBaseAndBitshift+0x68>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	009a      	lsls	r2, r3, #2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a09      	ldr	r2, [pc, #36]	@ (8004048 <DMA_CalcBaseAndBitshift+0x74>)
 8004024:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40020407 	.word	0x40020407
 8004038:	bffdfff8 	.word	0xbffdfff8
 800403c:	cccccccd 	.word	0xcccccccd
 8004040:	40020000 	.word	0x40020000
 8004044:	bffdfbf8 	.word	0xbffdfbf8
 8004048:	40020400 	.word	0x40020400

0800404c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800405a:	e160      	b.n	800431e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2101      	movs	r1, #1
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8152 	beq.w	8004318 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d005      	beq.n	800408c <HAL_GPIO_Init+0x40>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d130      	bne.n	80040ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	2203      	movs	r2, #3
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040c2:	2201      	movs	r2, #1
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0201 	and.w	r2, r3, #1
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d017      	beq.n	800412a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	2203      	movs	r2, #3
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d123      	bne.n	800417e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	08da      	lsrs	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3208      	adds	r2, #8
 800413e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	220f      	movs	r2, #15
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	08da      	lsrs	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3208      	adds	r2, #8
 8004178:	6939      	ldr	r1, [r7, #16]
 800417a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2203      	movs	r2, #3
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0203 	and.w	r2, r3, #3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80ac 	beq.w	8004318 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c0:	4b5e      	ldr	r3, [pc, #376]	@ (800433c <HAL_GPIO_Init+0x2f0>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4a5d      	ldr	r2, [pc, #372]	@ (800433c <HAL_GPIO_Init+0x2f0>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6193      	str	r3, [r2, #24]
 80041cc:	4b5b      	ldr	r3, [pc, #364]	@ (800433c <HAL_GPIO_Init+0x2f0>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041d8:	4a59      	ldr	r2, [pc, #356]	@ (8004340 <HAL_GPIO_Init+0x2f4>)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3302      	adds	r3, #2
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	220f      	movs	r2, #15
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004202:	d025      	beq.n	8004250 <HAL_GPIO_Init+0x204>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a4f      	ldr	r2, [pc, #316]	@ (8004344 <HAL_GPIO_Init+0x2f8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01f      	beq.n	800424c <HAL_GPIO_Init+0x200>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a4e      	ldr	r2, [pc, #312]	@ (8004348 <HAL_GPIO_Init+0x2fc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d019      	beq.n	8004248 <HAL_GPIO_Init+0x1fc>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a4d      	ldr	r2, [pc, #308]	@ (800434c <HAL_GPIO_Init+0x300>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_GPIO_Init+0x1f8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a4c      	ldr	r2, [pc, #304]	@ (8004350 <HAL_GPIO_Init+0x304>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00d      	beq.n	8004240 <HAL_GPIO_Init+0x1f4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a4b      	ldr	r2, [pc, #300]	@ (8004354 <HAL_GPIO_Init+0x308>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d007      	beq.n	800423c <HAL_GPIO_Init+0x1f0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a4a      	ldr	r2, [pc, #296]	@ (8004358 <HAL_GPIO_Init+0x30c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <HAL_GPIO_Init+0x1ec>
 8004234:	2306      	movs	r3, #6
 8004236:	e00c      	b.n	8004252 <HAL_GPIO_Init+0x206>
 8004238:	2307      	movs	r3, #7
 800423a:	e00a      	b.n	8004252 <HAL_GPIO_Init+0x206>
 800423c:	2305      	movs	r3, #5
 800423e:	e008      	b.n	8004252 <HAL_GPIO_Init+0x206>
 8004240:	2304      	movs	r3, #4
 8004242:	e006      	b.n	8004252 <HAL_GPIO_Init+0x206>
 8004244:	2303      	movs	r3, #3
 8004246:	e004      	b.n	8004252 <HAL_GPIO_Init+0x206>
 8004248:	2302      	movs	r3, #2
 800424a:	e002      	b.n	8004252 <HAL_GPIO_Init+0x206>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_GPIO_Init+0x206>
 8004250:	2300      	movs	r3, #0
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	f002 0203 	and.w	r2, r2, #3
 8004258:	0092      	lsls	r2, r2, #2
 800425a:	4093      	lsls	r3, r2
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004262:	4937      	ldr	r1, [pc, #220]	@ (8004340 <HAL_GPIO_Init+0x2f4>)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3302      	adds	r3, #2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004270:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <HAL_GPIO_Init+0x310>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004294:	4a31      	ldr	r2, [pc, #196]	@ (800435c <HAL_GPIO_Init+0x310>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800429a:	4b30      	ldr	r3, [pc, #192]	@ (800435c <HAL_GPIO_Init+0x310>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042be:	4a27      	ldr	r2, [pc, #156]	@ (800435c <HAL_GPIO_Init+0x310>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042c4:	4b25      	ldr	r3, [pc, #148]	@ (800435c <HAL_GPIO_Init+0x310>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042e8:	4a1c      	ldr	r2, [pc, #112]	@ (800435c <HAL_GPIO_Init+0x310>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ee:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_GPIO_Init+0x310>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004312:	4a12      	ldr	r2, [pc, #72]	@ (800435c <HAL_GPIO_Init+0x310>)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	3301      	adds	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f ae97 	bne.w	800405c <HAL_GPIO_Init+0x10>
  }
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40021000 	.word	0x40021000
 8004340:	40010000 	.word	0x40010000
 8004344:	48000400 	.word	0x48000400
 8004348:	48000800 	.word	0x48000800
 800434c:	48000c00 	.word	0x48000c00
 8004350:	48001000 	.word	0x48001000
 8004354:	48001400 	.word	0x48001400
 8004358:	48001800 	.word	0x48001800
 800435c:	40010400 	.word	0x40010400

08004360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
 800436c:	4613      	mov	r3, r2
 800436e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004370:	787b      	ldrb	r3, [r7, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800437c:	e002      	b.n	8004384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	041a      	lsls	r2, r3, #16
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	43d9      	mvns	r1, r3
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	400b      	ands	r3, r1
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f001 b83a 	b.w	800545e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 816f 	beq.w	80046de <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004400:	4bb5      	ldr	r3, [pc, #724]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b04      	cmp	r3, #4
 800440a:	d00c      	beq.n	8004426 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800440c:	4bb2      	ldr	r3, [pc, #712]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d15c      	bne.n	80044d2 <HAL_RCC_OscConfig+0x10e>
 8004418:	4baf      	ldr	r3, [pc, #700]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004424:	d155      	bne.n	80044d2 <HAL_RCC_OscConfig+0x10e>
 8004426:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800442a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800443a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d102      	bne.n	8004458 <HAL_RCC_OscConfig+0x94>
 8004452:	4ba1      	ldr	r3, [pc, #644]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	e015      	b.n	8004484 <HAL_RCC_OscConfig+0xc0>
 8004458:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800445c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800446c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004470:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004474:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004480:	4b95      	ldr	r3, [pc, #596]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004488:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800448c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004490:	fa92 f2a2 	rbit	r2, r2
 8004494:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8004498:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800449c:	fab2 f282 	clz	r2, r2
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	f042 0220 	orr.w	r2, r2, #32
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	f002 021f 	and.w	r2, r2, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f202 	lsl.w	r2, r1, r2
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8111 	beq.w	80046dc <HAL_RCC_OscConfig+0x318>
 80044ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 8108 	bne.w	80046dc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f000 bfc6 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x12e>
 80044e4:	4b7c      	ldr	r3, [pc, #496]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a7b      	ldr	r2, [pc, #492]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	e036      	b.n	8004560 <HAL_RCC_OscConfig+0x19c>
 80044f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x158>
 8004502:	4b75      	ldr	r3, [pc, #468]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a74      	ldr	r2, [pc, #464]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b72      	ldr	r3, [pc, #456]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a71      	ldr	r2, [pc, #452]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004514:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e021      	b.n	8004560 <HAL_RCC_OscConfig+0x19c>
 800451c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004520:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x184>
 800452e:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a69      	ldr	r2, [pc, #420]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b67      	ldr	r3, [pc, #412]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a66      	ldr	r2, [pc, #408]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0x19c>
 8004548:	4b63      	ldr	r3, [pc, #396]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a62      	ldr	r2, [pc, #392]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5f      	ldr	r2, [pc, #380]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800455e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004564:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d059      	beq.n	8004624 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe f9bc 	bl	80028ec <HAL_GetTick>
 8004574:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457a:	f7fe f9b7 	bl	80028ec <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d902      	bls.n	8004590 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	f000 bf67 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
 8004590:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004594:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80045a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_OscConfig+0x1fe>
 80045bc:	4b46      	ldr	r3, [pc, #280]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x22a>
 80045c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045c6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80045d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045da:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80045de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80045ea:	4b3b      	ldr	r3, [pc, #236]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045f2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80045f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80045fa:	fa92 f2a2 	rbit	r2, r2
 80045fe:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8004602:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004606:	fab2 f282 	clz	r2, r2
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	f042 0220 	orr.w	r2, r2, #32
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	f002 021f 	and.w	r2, r2, #31
 8004616:	2101      	movs	r1, #1
 8004618:	fa01 f202 	lsl.w	r2, r1, r2
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ab      	beq.n	800457a <HAL_RCC_OscConfig+0x1b6>
 8004622:	e05c      	b.n	80046de <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe f962 	bl	80028ec <HAL_GetTick>
 8004628:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462e:	f7fe f95d 	bl	80028ec <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	@ 0x64
 800463c:	d902      	bls.n	8004644 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	f000 bf0d 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
 8004644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004648:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004658:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d102      	bne.n	8004676 <HAL_RCC_OscConfig+0x2b2>
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	e015      	b.n	80046a2 <HAL_RCC_OscConfig+0x2de>
 8004676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800467a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800468a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800468e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004692:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800469e:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <HAL_RCC_OscConfig+0x314>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046a6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80046aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80046ae:	fa92 f2a2 	rbit	r2, r2
 80046b2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80046b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80046ba:	fab2 f282 	clz	r2, r2
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	f042 0220 	orr.w	r2, r2, #32
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	f002 021f 	and.w	r2, r2, #31
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f202 	lsl.w	r2, r1, r2
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ab      	bne.n	800462e <HAL_RCC_OscConfig+0x26a>
 80046d6:	e002      	b.n	80046de <HAL_RCC_OscConfig+0x31a>
 80046d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 817f 	beq.w	80049f2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046f4:	4ba7      	ldr	r3, [pc, #668]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004700:	4ba4      	ldr	r3, [pc, #656]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d173      	bne.n	80047f4 <HAL_RCC_OscConfig+0x430>
 800470c:	4ba1      	ldr	r3, [pc, #644]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004718:	d16c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x430>
 800471a:	2302      	movs	r3, #2
 800471c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800472c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d102      	bne.n	800474a <HAL_RCC_OscConfig+0x386>
 8004744:	4b93      	ldr	r3, [pc, #588]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	e013      	b.n	8004772 <HAL_RCC_OscConfig+0x3ae>
 800474a:	2302      	movs	r3, #2
 800474c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800475c:	2302      	movs	r3, #2
 800475e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004762:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800476e:	4b89      	ldr	r3, [pc, #548]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	2202      	movs	r2, #2
 8004774:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004778:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800477c:	fa92 f2a2 	rbit	r2, r2
 8004780:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004784:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004788:	fab2 f282 	clz	r2, r2
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	f042 0220 	orr.w	r2, r2, #32
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	f002 021f 	and.w	r2, r2, #31
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f202 	lsl.w	r2, r1, r2
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCC_OscConfig+0x3f6>
 80047a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d002      	beq.n	80047ba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f000 be52 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b76      	ldr	r3, [pc, #472]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	21f8      	movs	r1, #248	@ 0xf8
 80047d0:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80047d8:	fa91 f1a1 	rbit	r1, r1
 80047dc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80047e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80047e4:	fab1 f181 	clz	r1, r1
 80047e8:	b2c9      	uxtb	r1, r1
 80047ea:	408b      	lsls	r3, r1
 80047ec:	4969      	ldr	r1, [pc, #420]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	e0fe      	b.n	80049f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8088 	beq.w	8004916 <HAL_RCC_OscConfig+0x552>
 8004806:	2301      	movs	r3, #1
 8004808:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004818:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004826:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	461a      	mov	r2, r3
 800482e:	2301      	movs	r3, #1
 8004830:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004832:	f7fe f85b 	bl	80028ec <HAL_GetTick>
 8004836:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	e00a      	b.n	8004852 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800483c:	f7fe f856 	bl	80028ec <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d902      	bls.n	8004852 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	f000 be06 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
 8004852:	2302      	movs	r3, #2
 8004854:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8004864:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d102      	bne.n	8004882 <HAL_RCC_OscConfig+0x4be>
 800487c:	4b45      	ldr	r3, [pc, #276]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	e013      	b.n	80048aa <HAL_RCC_OscConfig+0x4e6>
 8004882:	2302      	movs	r3, #2
 8004884:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004894:	2302      	movs	r3, #2
 8004896:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800489a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80048a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	2202      	movs	r2, #2
 80048ac:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80048b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80048b4:	fa92 f2a2 	rbit	r2, r2
 80048b8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80048bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80048c0:	fab2 f282 	clz	r2, r2
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f042 0220 	orr.w	r2, r2, #32
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	f002 021f 	and.w	r2, r2, #31
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f202 	lsl.w	r2, r1, r2
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0af      	beq.n	800483c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	21f8      	movs	r1, #248	@ 0xf8
 80048f2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80048fa:	fa91 f1a1 	rbit	r1, r1
 80048fe:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8004902:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004906:	fab1 f181 	clz	r1, r1
 800490a:	b2c9      	uxtb	r1, r1
 800490c:	408b      	lsls	r3, r1
 800490e:	4921      	ldr	r1, [pc, #132]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]
 8004914:	e06d      	b.n	80049f2 <HAL_RCC_OscConfig+0x62e>
 8004916:	2301      	movs	r3, #1
 8004918:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004928:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004936:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004942:	f7fd ffd3 	bl	80028ec <HAL_GetTick>
 8004946:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800494c:	f7fd ffce 	bl	80028ec <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d902      	bls.n	8004962 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	f000 bd7e 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
 8004962:	2302      	movs	r3, #2
 8004964:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004974:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCC_OscConfig+0x5d4>
 800498c:	4b01      	ldr	r3, [pc, #4]	@ (8004994 <HAL_RCC_OscConfig+0x5d0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	e016      	b.n	80049c0 <HAL_RCC_OscConfig+0x5fc>
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	2302      	movs	r3, #2
 800499a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80049aa:	2302      	movs	r3, #2
 80049ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80049b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80049bc:	4bbf      	ldr	r3, [pc, #764]	@ (8004cbc <HAL_RCC_OscConfig+0x8f8>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	2202      	movs	r2, #2
 80049c2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80049c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80049ca:	fa92 f2a2 	rbit	r2, r2
 80049ce:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80049d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80049d6:	fab2 f282 	clz	r2, r2
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	f042 0220 	orr.w	r2, r2, #32
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	f002 021f 	and.w	r2, r2, #31
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ac      	bne.n	800494c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8113 	beq.w	8004c2e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d07c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x74e>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004a2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	4ba2      	ldr	r3, [pc, #648]	@ (8004cc0 <HAL_RCC_OscConfig+0x8fc>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2301      	movs	r3, #1
 8004a40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fd ff53 	bl	80028ec <HAL_GetTick>
 8004a46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fd ff4e 	bl	80028ec <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d902      	bls.n	8004a62 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	f000 bcfe 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
 8004a62:	2302      	movs	r3, #2
 8004a64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6c:	fa93 f2a3 	rbit	r2, r3
 8004a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a82:	2202      	movs	r2, #2
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	fa93 f2a3 	rbit	r2, r3
 8004a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004abc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004ac0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8004cbc <HAL_RCC_OscConfig+0x8f8>)
 8004ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ac6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004ace:	2102      	movs	r1, #2
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ad6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	fa93 f1a3 	rbit	r1, r3
 8004ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ae4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ae8:	6019      	str	r1, [r3, #0]
  return result;
 8004aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	fab3 f383 	clz	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d09d      	beq.n	8004a4c <HAL_RCC_OscConfig+0x688>
 8004b10:	e08d      	b.n	8004c2e <HAL_RCC_OscConfig+0x86a>
 8004b12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	fa93 f2a3 	rbit	r2, r3
 8004b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004b34:	601a      	str	r2, [r3, #0]
  return result;
 8004b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004b3e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc0 <HAL_RCC_OscConfig+0x8fc>)
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b54:	f7fd feca 	bl	80028ec <HAL_GetTick>
 8004b58:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fd fec5 	bl	80028ec <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d902      	bls.n	8004b74 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	f000 bc75 	b.w	800545e <HAL_RCC_OscConfig+0x109a>
 8004b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	fa93 f2a3 	rbit	r2, r3
 8004b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ba8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bb6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bc0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	fa93 f2a3 	rbit	r2, r3
 8004bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004bde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	4b36      	ldr	r3, [pc, #216]	@ (8004cbc <HAL_RCC_OscConfig+0x8f8>)
 8004be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004be8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004bec:	2102      	movs	r1, #2
 8004bee:	6019      	str	r1, [r3, #0]
 8004bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	fa93 f1a3 	rbit	r1, r3
 8004bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c02:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c06:	6019      	str	r1, [r3, #0]
  return result;
 8004c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	fab3 f383 	clz	r3, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d197      	bne.n	8004b5e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 81a5 	beq.w	8004f8e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cbc <HAL_RCC_OscConfig+0x8f8>)
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d116      	bne.n	8004c84 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_RCC_OscConfig+0x8f8>)
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	@ (8004cbc <HAL_RCC_OscConfig+0x8f8>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	61d3      	str	r3, [r2, #28]
 8004c62:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <HAL_RCC_OscConfig+0x8f8>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <HAL_RCC_OscConfig+0x900>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d121      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c90:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <HAL_RCC_OscConfig+0x900>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc4 <HAL_RCC_OscConfig+0x900>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fd fe26 	bl	80028ec <HAL_GetTick>
 8004ca0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	e010      	b.n	8004cc8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fd fe21 	bl	80028ec <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	@ 0x64
 8004cb4:	d908      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e3d1      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	10908120 	.word	0x10908120
 8004cc4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8004f00 <HAL_RCC_OscConfig+0xb3c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0e8      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d106      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x92e>
 8004ce4:	4b87      	ldr	r3, [pc, #540]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	4a86      	ldr	r2, [pc, #536]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	6213      	str	r3, [r2, #32]
 8004cf0:	e035      	b.n	8004d5e <HAL_RCC_OscConfig+0x99a>
 8004cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x958>
 8004d02:	4b80      	ldr	r3, [pc, #512]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	4a7f      	ldr	r2, [pc, #508]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	6213      	str	r3, [r2, #32]
 8004d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4a7c      	ldr	r2, [pc, #496]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d14:	f023 0304 	bic.w	r3, r3, #4
 8004d18:	6213      	str	r3, [r2, #32]
 8004d1a:	e020      	b.n	8004d5e <HAL_RCC_OscConfig+0x99a>
 8004d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b05      	cmp	r3, #5
 8004d2a:	d10c      	bne.n	8004d46 <HAL_RCC_OscConfig+0x982>
 8004d2c:	4b75      	ldr	r3, [pc, #468]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	4a74      	ldr	r2, [pc, #464]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6213      	str	r3, [r2, #32]
 8004d38:	4b72      	ldr	r3, [pc, #456]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4a71      	ldr	r2, [pc, #452]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6213      	str	r3, [r2, #32]
 8004d44:	e00b      	b.n	8004d5e <HAL_RCC_OscConfig+0x99a>
 8004d46:	4b6f      	ldr	r3, [pc, #444]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	4b6c      	ldr	r3, [pc, #432]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4a6b      	ldr	r2, [pc, #428]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8081 	beq.w	8004e72 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d70:	f7fd fdbc 	bl	80028ec <HAL_GetTick>
 8004d74:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00b      	b.n	8004d92 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fdb7 	bl	80028ec <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e365      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
 8004d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004da2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fa93 f2a3 	rbit	r2, r3
 8004dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004db0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dc6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	fa93 f2a3 	rbit	r2, r3
 8004dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dd4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004dd8:	601a      	str	r2, [r3, #0]
  return result;
 8004dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dde:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004de2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f043 0302 	orr.w	r3, r3, #2
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d102      	bne.n	8004dfe <HAL_RCC_OscConfig+0xa3a>
 8004df8:	4b42      	ldr	r3, [pc, #264]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	e013      	b.n	8004e26 <HAL_RCC_OscConfig+0xa62>
 8004dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004e06:	2202      	movs	r2, #2
 8004e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e0e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	fa93 f2a3 	rbit	r2, r3
 8004e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e1c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	4b38      	ldr	r3, [pc, #224]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e2a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004e2e:	2102      	movs	r1, #2
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e36:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	fa92 f1a2 	rbit	r1, r2
 8004e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e44:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004e48:	6011      	str	r1, [r2, #0]
  return result;
 8004e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e4e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	fab2 f282 	clz	r2, r2
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f002 021f 	and.w	r2, r2, #31
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d084      	beq.n	8004d7a <HAL_RCC_OscConfig+0x9b6>
 8004e70:	e083      	b.n	8004f7a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e72:	f7fd fd3b 	bl	80028ec <HAL_GetTick>
 8004e76:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fd fd36 	bl	80028ec <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e2e4      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
 8004e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e98:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ea4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eb2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ebc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ec8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	fa93 f2a3 	rbit	r2, r3
 8004ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ed6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004eda:	601a      	str	r2, [r3, #0]
  return result;
 8004edc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ee0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004ee4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d106      	bne.n	8004f08 <HAL_RCC_OscConfig+0xb44>
 8004efa:	4b02      	ldr	r3, [pc, #8]	@ (8004f04 <HAL_RCC_OscConfig+0xb40>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	e017      	b.n	8004f30 <HAL_RCC_OscConfig+0xb6c>
 8004f00:	40007000 	.word	0x40007000
 8004f04:	40021000 	.word	0x40021000
 8004f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f0c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004f10:	2202      	movs	r2, #2
 8004f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f18:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	fa93 f2a3 	rbit	r2, r3
 8004f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f26:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	4bb3      	ldr	r3, [pc, #716]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f34:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004f38:	2102      	movs	r1, #2
 8004f3a:	6011      	str	r1, [r2, #0]
 8004f3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f40:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	fa92 f1a2 	rbit	r1, r2
 8004f4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f4e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004f52:	6011      	str	r1, [r2, #0]
  return result;
 8004f54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f58:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	fab2 f282 	clz	r2, r2
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	f002 021f 	and.w	r2, r2, #31
 8004f6e:	2101      	movs	r1, #1
 8004f70:	fa01 f202 	lsl.w	r2, r1, r2
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d180      	bne.n	8004e7c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f7a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d105      	bne.n	8004f8e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f82:	4b9e      	ldr	r3, [pc, #632]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	4a9d      	ldr	r2, [pc, #628]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 8004f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 825e 	beq.w	800545c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fa0:	4b96      	ldr	r3, [pc, #600]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 030c 	and.w	r3, r3, #12
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	f000 821f 	beq.w	80053ec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	f040 8170 	bne.w	80052a0 <HAL_RCC_OscConfig+0xedc>
 8004fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fc4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004fc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fd2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	fa93 f2a3 	rbit	r2, r3
 8004fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fe0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004fe4:	601a      	str	r2, [r3, #0]
  return result;
 8004fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004fee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	fab3 f383 	clz	r3, r3
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ffa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	461a      	mov	r2, r3
 8005002:	2300      	movs	r3, #0
 8005004:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005006:	f7fd fc71 	bl	80028ec <HAL_GetTick>
 800500a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800500e:	e009      	b.n	8005024 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005010:	f7fd fc6c 	bl	80028ec <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e21c      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
 8005024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005028:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800502c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005036:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	fa93 f2a3 	rbit	r2, r3
 8005040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005044:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005048:	601a      	str	r2, [r3, #0]
  return result;
 800504a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800504e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005052:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005054:	fab3 f383 	clz	r3, r3
 8005058:	b2db      	uxtb	r3, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d102      	bne.n	800506e <HAL_RCC_OscConfig+0xcaa>
 8005068:	4b64      	ldr	r3, [pc, #400]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	e027      	b.n	80050be <HAL_RCC_OscConfig+0xcfa>
 800506e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005072:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005076:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800507a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005080:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	fa93 f2a3 	rbit	r2, r3
 800508a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800508e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005098:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800509c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	fa93 f2a3 	rbit	r2, r3
 80050b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050b4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	4b50      	ldr	r3, [pc, #320]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80050c2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80050c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80050ca:	6011      	str	r1, [r2, #0]
 80050cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80050d0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	fa92 f1a2 	rbit	r1, r2
 80050da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80050de:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80050e2:	6011      	str	r1, [r2, #0]
  return result;
 80050e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80050e8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	fab2 f282 	clz	r2, r2
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	f042 0220 	orr.w	r2, r2, #32
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	f002 021f 	and.w	r2, r2, #31
 80050fe:	2101      	movs	r1, #1
 8005100:	fa01 f202 	lsl.w	r2, r1, r2
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d182      	bne.n	8005010 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800510a:	4b3c      	ldr	r3, [pc, #240]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 800510c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510e:	f023 020f 	bic.w	r2, r3, #15
 8005112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005116:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	4937      	ldr	r1, [pc, #220]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 8005120:	4313      	orrs	r3, r2
 8005122:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005124:	4b35      	ldr	r3, [pc, #212]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800512c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005130:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a19      	ldr	r1, [r3, #32]
 8005138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800513c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	430b      	orrs	r3, r1
 8005146:	492d      	ldr	r1, [pc, #180]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
 800514c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005150:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005154:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800515e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	fa93 f2a3 	rbit	r2, r3
 8005168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800516c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005170:	601a      	str	r2, [r3, #0]
  return result;
 8005172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005176:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800517a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005186:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	461a      	mov	r2, r3
 800518e:	2301      	movs	r3, #1
 8005190:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7fd fbab 	bl	80028ec <HAL_GetTick>
 8005196:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800519a:	e009      	b.n	80051b0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800519c:	f7fd fba6 	bl	80028ec <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e156      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
 80051b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80051b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051c2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fa93 f2a3 	rbit	r2, r3
 80051cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051d0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80051d4:	601a      	str	r2, [r3, #0]
  return result;
 80051d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051da:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80051de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e0:	fab3 f383 	clz	r3, r3
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <HAL_RCC_OscConfig+0xe3c>
 80051f4:	4b01      	ldr	r3, [pc, #4]	@ (80051fc <HAL_RCC_OscConfig+0xe38>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	e02a      	b.n	8005250 <HAL_RCC_OscConfig+0xe8c>
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
 8005200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005204:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005208:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800520c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005212:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	fa93 f2a3 	rbit	r2, r3
 800521c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005220:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800522a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800522e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005238:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	fa93 f2a3 	rbit	r2, r3
 8005242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005246:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	4b86      	ldr	r3, [pc, #536]	@ (8005468 <HAL_RCC_OscConfig+0x10a4>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005254:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005258:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800525c:	6011      	str	r1, [r2, #0]
 800525e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005262:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	fa92 f1a2 	rbit	r1, r2
 800526c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005270:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005274:	6011      	str	r1, [r2, #0]
  return result;
 8005276:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800527a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	fab2 f282 	clz	r2, r2
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	f042 0220 	orr.w	r2, r2, #32
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	f002 021f 	and.w	r2, r2, #31
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f202 	lsl.w	r2, r1, r2
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	f43f af7f 	beq.w	800519c <HAL_RCC_OscConfig+0xdd8>
 800529e:	e0dd      	b.n	800545c <HAL_RCC_OscConfig+0x1098>
 80052a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80052a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	fa93 f2a3 	rbit	r2, r3
 80052bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80052c4:	601a      	str	r2, [r3, #0]
  return result;
 80052c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80052ce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d0:	fab3 f383 	clz	r3, r3
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80052da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e6:	f7fd fb01 	bl	80028ec <HAL_GetTick>
 80052ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ee:	e009      	b.n	8005304 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fd fafc 	bl	80028ec <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e0ac      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
 8005304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005308:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800530c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005316:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	fa93 f2a3 	rbit	r2, r3
 8005320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005324:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005328:	601a      	str	r2, [r3, #0]
  return result;
 800532a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800532e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005332:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d102      	bne.n	800534e <HAL_RCC_OscConfig+0xf8a>
 8005348:	4b47      	ldr	r3, [pc, #284]	@ (8005468 <HAL_RCC_OscConfig+0x10a4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	e027      	b.n	800539e <HAL_RCC_OscConfig+0xfda>
 800534e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005352:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005356:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800535a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005360:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	fa93 f2a3 	rbit	r2, r3
 800536a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800536e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005378:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800537c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005386:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	fa93 f2a3 	rbit	r2, r3
 8005390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005394:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	4b33      	ldr	r3, [pc, #204]	@ (8005468 <HAL_RCC_OscConfig+0x10a4>)
 800539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053a2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80053a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80053aa:	6011      	str	r1, [r2, #0]
 80053ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	fa92 f1a2 	rbit	r1, r2
 80053ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053be:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80053c2:	6011      	str	r1, [r2, #0]
  return result;
 80053c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80053c8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	fab2 f282 	clz	r2, r2
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	f042 0220 	orr.w	r2, r2, #32
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	f002 021f 	and.w	r2, r2, #31
 80053de:	2101      	movs	r1, #1
 80053e0:	fa01 f202 	lsl.w	r2, r1, r2
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d182      	bne.n	80052f0 <HAL_RCC_OscConfig+0xf2c>
 80053ea:	e037      	b.n	800545c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e02e      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005400:	4b19      	ldr	r3, [pc, #100]	@ (8005468 <HAL_RCC_OscConfig+0x10a4>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005408:	4b17      	ldr	r3, [pc, #92]	@ (8005468 <HAL_RCC_OscConfig+0x10a4>)
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005410:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005414:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8005418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800541c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	429a      	cmp	r2, r3
 8005426:	d117      	bne.n	8005458 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005428:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800542c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005434:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800543c:	429a      	cmp	r2, r3
 800543e:	d10b      	bne.n	8005458 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005444:	f003 020f 	and.w	r2, r3, #15
 8005448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800544c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40021000 	.word	0x40021000

0800546c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b09e      	sub	sp, #120	@ 0x78
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e162      	b.n	800574a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005484:	4b90      	ldr	r3, [pc, #576]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d910      	bls.n	80054b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b8d      	ldr	r3, [pc, #564]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 0207 	bic.w	r2, r3, #7
 800549a:	498b      	ldr	r1, [pc, #556]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b89      	ldr	r3, [pc, #548]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e14a      	b.n	800574a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c0:	4b82      	ldr	r3, [pc, #520]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	497f      	ldr	r1, [pc, #508]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80dc 	beq.w	8005698 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d13c      	bne.n	8005562 <HAL_RCC_ClockConfig+0xf6>
 80054e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054f0:	fa93 f3a3 	rbit	r3, r3
 80054f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80054f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f8:	fab3 f383 	clz	r3, r3
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d102      	bne.n	8005512 <HAL_RCC_ClockConfig+0xa6>
 800550c:	4b6f      	ldr	r3, [pc, #444]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	e00f      	b.n	8005532 <HAL_RCC_ClockConfig+0xc6>
 8005512:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005516:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005524:	663b      	str	r3, [r7, #96]	@ 0x60
 8005526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005528:	fa93 f3a3 	rbit	r3, r3
 800552c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800552e:	4b67      	ldr	r3, [pc, #412]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005536:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005538:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800553a:	fa92 f2a2 	rbit	r2, r2
 800553e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005540:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005542:	fab2 f282 	clz	r2, r2
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	f042 0220 	orr.w	r2, r2, #32
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	f002 021f 	and.w	r2, r2, #31
 8005552:	2101      	movs	r1, #1
 8005554:	fa01 f202 	lsl.w	r2, r1, r2
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d17b      	bne.n	8005656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0f3      	b.n	800574a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d13c      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x178>
 800556a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800556e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d102      	bne.n	8005594 <HAL_RCC_ClockConfig+0x128>
 800558e:	4b4f      	ldr	r3, [pc, #316]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	e00f      	b.n	80055b4 <HAL_RCC_ClockConfig+0x148>
 8005594:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005598:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800559c:	fa93 f3a3 	rbit	r3, r3
 80055a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80055a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055aa:	fa93 f3a3 	rbit	r3, r3
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b0:	4b46      	ldr	r3, [pc, #280]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055b8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80055ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055bc:	fa92 f2a2 	rbit	r2, r2
 80055c0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80055c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055c4:	fab2 f282 	clz	r2, r2
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	f042 0220 	orr.w	r2, r2, #32
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	f002 021f 	and.w	r2, r2, #31
 80055d4:	2101      	movs	r1, #1
 80055d6:	fa01 f202 	lsl.w	r2, r1, r2
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d13a      	bne.n	8005656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0b2      	b.n	800574a <HAL_RCC_ClockConfig+0x2de>
 80055e4:	2302      	movs	r3, #2
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	fa93 f3a3 	rbit	r3, r3
 80055ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f2:	fab3 f383 	clz	r3, r3
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d102      	bne.n	800560c <HAL_RCC_ClockConfig+0x1a0>
 8005606:	4b31      	ldr	r3, [pc, #196]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	e00d      	b.n	8005628 <HAL_RCC_ClockConfig+0x1bc>
 800560c:	2302      	movs	r3, #2
 800560e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	fa93 f3a3 	rbit	r3, r3
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
 8005618:	2302      	movs	r3, #2
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	fa93 f3a3 	rbit	r3, r3
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	4b29      	ldr	r3, [pc, #164]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	2202      	movs	r2, #2
 800562a:	61ba      	str	r2, [r7, #24]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	fa92 f2a2 	rbit	r2, r2
 8005632:	617a      	str	r2, [r7, #20]
  return result;
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	fab2 f282 	clz	r2, r2
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	f042 0220 	orr.w	r2, r2, #32
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	f002 021f 	and.w	r2, r2, #31
 8005646:	2101      	movs	r1, #1
 8005648:	fa01 f202 	lsl.w	r2, r1, r2
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e079      	b.n	800574a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005656:	4b1d      	ldr	r3, [pc, #116]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f023 0203 	bic.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	491a      	ldr	r1, [pc, #104]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 8005664:	4313      	orrs	r3, r2
 8005666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005668:	f7fd f940 	bl	80028ec <HAL_GetTick>
 800566c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566e:	e00a      	b.n	8005686 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005670:	f7fd f93c 	bl	80028ec <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e061      	b.n	800574a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005686:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <HAL_RCC_ClockConfig+0x260>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 020c 	and.w	r2, r3, #12
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	429a      	cmp	r2, r3
 8005696:	d1eb      	bne.n	8005670 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005698:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d214      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 0207 	bic.w	r2, r3, #7
 80056ae:	4906      	ldr	r1, [pc, #24]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b04      	ldr	r3, [pc, #16]	@ (80056c8 <HAL_RCC_ClockConfig+0x25c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e040      	b.n	800574a <HAL_RCC_ClockConfig+0x2de>
 80056c8:	40022000 	.word	0x40022000
 80056cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <HAL_RCC_ClockConfig+0x2e8>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	491a      	ldr	r1, [pc, #104]	@ (8005754 <HAL_RCC_ClockConfig+0x2e8>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056fa:	4b16      	ldr	r3, [pc, #88]	@ (8005754 <HAL_RCC_ClockConfig+0x2e8>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4912      	ldr	r1, [pc, #72]	@ (8005754 <HAL_RCC_ClockConfig+0x2e8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800570e:	f000 f829 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8005712:	4601      	mov	r1, r0
 8005714:	4b0f      	ldr	r3, [pc, #60]	@ (8005754 <HAL_RCC_ClockConfig+0x2e8>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800571c:	22f0      	movs	r2, #240	@ 0xf0
 800571e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	fa92 f2a2 	rbit	r2, r2
 8005726:	60fa      	str	r2, [r7, #12]
  return result;
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	fab2 f282 	clz	r2, r2
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	40d3      	lsrs	r3, r2
 8005732:	4a09      	ldr	r2, [pc, #36]	@ (8005758 <HAL_RCC_ClockConfig+0x2ec>)
 8005734:	5cd3      	ldrb	r3, [r2, r3]
 8005736:	fa21 f303 	lsr.w	r3, r1, r3
 800573a:	4a08      	ldr	r2, [pc, #32]	@ (800575c <HAL_RCC_ClockConfig+0x2f0>)
 800573c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800573e:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <HAL_RCC_ClockConfig+0x2f4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd f88e 	bl	8002864 <HAL_InitTick>
  
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3778      	adds	r7, #120	@ 0x78
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	0800b5f0 	.word	0x0800b5f0
 800575c:	20000000 	.word	0x20000000
 8005760:	20000008 	.word	0x20000008

08005764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800577e:	4b1f      	ldr	r3, [pc, #124]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x98>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b04      	cmp	r3, #4
 800578c:	d002      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x30>
 800578e:	2b08      	cmp	r3, #8
 8005790:	d003      	beq.n	800579a <HAL_RCC_GetSysClockFreq+0x36>
 8005792:	e029      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005794:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005796:	613b      	str	r3, [r7, #16]
      break;
 8005798:	e029      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	0c9b      	lsrs	r3, r3, #18
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	4a18      	ldr	r2, [pc, #96]	@ (8005804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80057a4:	5cd3      	ldrb	r3, [r2, r3]
 80057a6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80057a8:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x98>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	4a15      	ldr	r2, [pc, #84]	@ (8005808 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057b2:	5cd3      	ldrb	r3, [r2, r3]
 80057b4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057c0:	4a0f      	ldr	r2, [pc, #60]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e007      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	613b      	str	r3, [r7, #16]
      break;
 80057e6:	e002      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057e8:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057ea:	613b      	str	r3, [r7, #16]
      break;
 80057ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ee:	693b      	ldr	r3, [r7, #16]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40021000 	.word	0x40021000
 8005800:	007a1200 	.word	0x007a1200
 8005804:	0800b608 	.word	0x0800b608
 8005808:	0800b618 	.word	0x0800b618

0800580c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_RCC_GetHCLKFreq+0x14>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000000 	.word	0x20000000

08005824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800582a:	f7ff ffef 	bl	800580c <HAL_RCC_GetHCLKFreq>
 800582e:	4601      	mov	r1, r0
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005838:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800583c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	fa92 f2a2 	rbit	r2, r2
 8005844:	603a      	str	r2, [r7, #0]
  return result;
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	fab2 f282 	clz	r2, r2
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	40d3      	lsrs	r3, r2
 8005850:	4a04      	ldr	r2, [pc, #16]	@ (8005864 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005852:	5cd3      	ldrb	r3, [r2, r3]
 8005854:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	0800b600 	.word	0x0800b600

08005868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800586e:	f7ff ffcd 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8005872:	4601      	mov	r1, r0
 8005874:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800587c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005880:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	fa92 f2a2 	rbit	r2, r2
 8005888:	603a      	str	r2, [r7, #0]
  return result;
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	fab2 f282 	clz	r2, r2
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	40d3      	lsrs	r3, r2
 8005894:	4a04      	ldr	r2, [pc, #16]	@ (80058a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005896:	5cd3      	ldrb	r3, [r2, r3]
 8005898:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	0800b600 	.word	0x0800b600

080058ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b092      	sub	sp, #72	@ 0x48
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80d4 	beq.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d0:	4b4e      	ldr	r3, [pc, #312]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10e      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058dc:	4b4b      	ldr	r3, [pc, #300]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	4a4a      	ldr	r2, [pc, #296]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058e6:	61d3      	str	r3, [r2, #28]
 80058e8:	4b48      	ldr	r3, [pc, #288]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fa:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d118      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005906:	4b42      	ldr	r3, [pc, #264]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a41      	ldr	r2, [pc, #260]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005910:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005912:	f7fc ffeb 	bl	80028ec <HAL_GetTick>
 8005916:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	e008      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591a:	f7fc ffe7 	bl	80028ec <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b64      	cmp	r3, #100	@ 0x64
 8005926:	d901      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e1d6      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800592c:	4b38      	ldr	r3, [pc, #224]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005938:	4b34      	ldr	r3, [pc, #208]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005940:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8084 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005952:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005954:	429a      	cmp	r2, r3
 8005956:	d07c      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005958:	4b2c      	ldr	r3, [pc, #176]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005962:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005966:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	fa93 f3a3 	rbit	r3, r3
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	461a      	mov	r2, r3
 8005982:	2301      	movs	r3, #1
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005996:	fab3 f383 	clz	r3, r3
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	461a      	mov	r2, r3
 80059a6:	2300      	movs	r3, #0
 80059a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059aa:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d04b      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ba:	f7fc ff97 	bl	80028ec <HAL_GetTick>
 80059be:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c0:	e00a      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fc ff93 	bl	80028ec <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e180      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80059d8:	2302      	movs	r3, #2
 80059da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e4:	2302      	movs	r3, #2
 80059e6:	623b      	str	r3, [r7, #32]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	61fb      	str	r3, [r7, #28]
  return result;
 80059f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f2:	fab3 f383 	clz	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d108      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a06:	4b01      	ldr	r3, [pc, #4]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	e00d      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40007000 	.word	0x40007000
 8005a14:	10908100 	.word	0x10908100
 8005a18:	2302      	movs	r3, #2
 8005a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	fa93 f3a3 	rbit	r3, r3
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	4b9a      	ldr	r3, [pc, #616]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	2202      	movs	r2, #2
 8005a2a:	613a      	str	r2, [r7, #16]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	fa92 f2a2 	rbit	r2, r2
 8005a32:	60fa      	str	r2, [r7, #12]
  return result;
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	fab2 f282 	clz	r2, r2
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	f002 021f 	and.w	r2, r2, #31
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0b7      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a52:	4b8f      	ldr	r3, [pc, #572]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	498c      	ldr	r1, [pc, #560]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6c:	4b88      	ldr	r3, [pc, #544]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	4a87      	ldr	r2, [pc, #540]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a84:	4b82      	ldr	r3, [pc, #520]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a88:	f023 0203 	bic.w	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	497f      	ldr	r1, [pc, #508]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	4978      	ldr	r1, [pc, #480]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ac0:	4b73      	ldr	r3, [pc, #460]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4970      	ldr	r1, [pc, #448]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ade:	4b6c      	ldr	r3, [pc, #432]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae2:	f023 0210 	bic.w	r2, r3, #16
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	4969      	ldr	r1, [pc, #420]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005afc:	4b64      	ldr	r3, [pc, #400]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b08:	4961      	ldr	r1, [pc, #388]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	f023 0220 	bic.w	r2, r3, #32
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	495a      	ldr	r1, [pc, #360]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b38:	4b55      	ldr	r3, [pc, #340]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	4952      	ldr	r1, [pc, #328]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b56:	4b4e      	ldr	r3, [pc, #312]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	494b      	ldr	r1, [pc, #300]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b74:	4b46      	ldr	r3, [pc, #280]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	4943      	ldr	r1, [pc, #268]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b92:	4b3f      	ldr	r3, [pc, #252]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	493c      	ldr	r1, [pc, #240]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bb0:	4b37      	ldr	r3, [pc, #220]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbc:	4934      	ldr	r1, [pc, #208]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005bce:	4b30      	ldr	r3, [pc, #192]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bda:	492d      	ldr	r1, [pc, #180]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005bec:	4b28      	ldr	r3, [pc, #160]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf8:	4925      	ldr	r1, [pc, #148]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d008      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c0a:	4b21      	ldr	r3, [pc, #132]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	491e      	ldr	r1, [pc, #120]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005c28:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	4916      	ldr	r1, [pc, #88]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005c46:	4b12      	ldr	r3, [pc, #72]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c52:	490f      	ldr	r1, [pc, #60]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c64:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c68:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c70:	4907      	ldr	r1, [pc, #28]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005c82:	4b03      	ldr	r3, [pc, #12]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c8e:	bf00      	nop
 8005c90:	40021000 	.word	0x40021000
 8005c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c96:	4913      	ldr	r1, [pc, #76]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb4:	490b      	ldr	r1, [pc, #44]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005cc6:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd2:	4904      	ldr	r1, [pc, #16]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3748      	adds	r7, #72	@ 0x48
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000

08005ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e049      	b.n	8005d8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fc face 	bl	80022b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f000 fd1c 	bl	8006764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d001      	beq.n	8005db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e04f      	b.n	8005e50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a23      	ldr	r2, [pc, #140]	@ (8005e5c <HAL_TIM_Base_Start_IT+0xc4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01d      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x76>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dda:	d018      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x76>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xc8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x76>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1e      	ldr	r2, [pc, #120]	@ (8005e64 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x76>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x76>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8005e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0x76>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a19      	ldr	r2, [pc, #100]	@ (8005e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d115      	bne.n	8005e3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d015      	beq.n	8005e4c <HAL_TIM_Base_Start_IT+0xb4>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e26:	d011      	beq.n	8005e4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e38:	e008      	b.n	8005e4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e000      	b.n	8005e4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40013400 	.word	0x40013400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40015000 	.word	0x40015000
 8005e74:	00010007 	.word	0x00010007

08005e78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e049      	b.n	8005f1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f841 	bl	8005f26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f000 fc54 	bl	8006764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <HAL_TIM_PWM_Start+0x24>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e03c      	b.n	8005fda <HAL_TIM_PWM_Start+0x9e>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d109      	bne.n	8005f7a <HAL_TIM_PWM_Start+0x3e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	bf14      	ite	ne
 8005f72:	2301      	movne	r3, #1
 8005f74:	2300      	moveq	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	e02f      	b.n	8005fda <HAL_TIM_PWM_Start+0x9e>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d109      	bne.n	8005f94 <HAL_TIM_PWM_Start+0x58>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e022      	b.n	8005fda <HAL_TIM_PWM_Start+0x9e>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b0c      	cmp	r3, #12
 8005f98:	d109      	bne.n	8005fae <HAL_TIM_PWM_Start+0x72>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	bf14      	ite	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	2300      	moveq	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	e015      	b.n	8005fda <HAL_TIM_PWM_Start+0x9e>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIM_PWM_Start+0x8c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e008      	b.n	8005fda <HAL_TIM_PWM_Start+0x9e>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	bf14      	ite	ne
 8005fd4:	2301      	movne	r3, #1
 8005fd6:	2300      	moveq	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0a1      	b.n	8006126 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xb6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff0:	e023      	b.n	800603a <HAL_TIM_PWM_Start+0xfe>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_PWM_Start+0xc6>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006000:	e01b      	b.n	800603a <HAL_TIM_PWM_Start+0xfe>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b08      	cmp	r3, #8
 8006006:	d104      	bne.n	8006012 <HAL_TIM_PWM_Start+0xd6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006010:	e013      	b.n	800603a <HAL_TIM_PWM_Start+0xfe>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b0c      	cmp	r3, #12
 8006016:	d104      	bne.n	8006022 <HAL_TIM_PWM_Start+0xe6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006020:	e00b      	b.n	800603a <HAL_TIM_PWM_Start+0xfe>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b10      	cmp	r3, #16
 8006026:	d104      	bne.n	8006032 <HAL_TIM_PWM_Start+0xf6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006030:	e003      	b.n	800603a <HAL_TIM_PWM_Start+0xfe>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2201      	movs	r2, #1
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 ffd8 	bl	8006ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a38      	ldr	r2, [pc, #224]	@ (8006130 <HAL_TIM_PWM_Start+0x1f4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_TIM_PWM_Start+0x148>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a37      	ldr	r2, [pc, #220]	@ (8006134 <HAL_TIM_PWM_Start+0x1f8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_TIM_PWM_Start+0x148>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a35      	ldr	r2, [pc, #212]	@ (8006138 <HAL_TIM_PWM_Start+0x1fc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_TIM_PWM_Start+0x148>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a34      	ldr	r2, [pc, #208]	@ (800613c <HAL_TIM_PWM_Start+0x200>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_TIM_PWM_Start+0x148>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a32      	ldr	r2, [pc, #200]	@ (8006140 <HAL_TIM_PWM_Start+0x204>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_TIM_PWM_Start+0x148>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a31      	ldr	r2, [pc, #196]	@ (8006144 <HAL_TIM_PWM_Start+0x208>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_TIM_PWM_Start+0x14c>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <HAL_TIM_PWM_Start+0x14e>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800609c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a23      	ldr	r2, [pc, #140]	@ (8006130 <HAL_TIM_PWM_Start+0x1f4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d01d      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x1a8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b0:	d018      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x1a8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a24      	ldr	r2, [pc, #144]	@ (8006148 <HAL_TIM_PWM_Start+0x20c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x1a8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a22      	ldr	r2, [pc, #136]	@ (800614c <HAL_TIM_PWM_Start+0x210>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x1a8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006134 <HAL_TIM_PWM_Start+0x1f8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x1a8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <HAL_TIM_PWM_Start+0x1fc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x1a8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <HAL_TIM_PWM_Start+0x208>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d115      	bne.n	8006110 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	4b19      	ldr	r3, [pc, #100]	@ (8006150 <HAL_TIM_PWM_Start+0x214>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d015      	beq.n	8006122 <HAL_TIM_PWM_Start+0x1e6>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060fc:	d011      	beq.n	8006122 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610e:	e008      	b.n	8006122 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e000      	b.n	8006124 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40012c00 	.word	0x40012c00
 8006134:	40013400 	.word	0x40013400
 8006138:	40014000 	.word	0x40014000
 800613c:	40014400 	.word	0x40014400
 8006140:	40014800 	.word	0x40014800
 8006144:	40015000 	.word	0x40015000
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800
 8006150:	00010007 	.word	0x00010007

08006154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d020      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01b      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0202 	mvn.w	r2, #2
 8006188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fac1 	bl	8006726 <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fab3 	bl	8006712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fac4 	bl	800673a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0204 	mvn.w	r2, #4
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2202      	movs	r2, #2
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa9b 	bl	8006726 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa8d 	bl	8006712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa9e 	bl	800673a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d020      	beq.n	8006250 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01b      	beq.n	8006250 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0208 	mvn.w	r2, #8
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2204      	movs	r2, #4
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa75 	bl	8006726 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa67 	bl	8006712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa78 	bl	800673a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	d020      	beq.n	800629c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01b      	beq.n	800629c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0210 	mvn.w	r2, #16
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2208      	movs	r2, #8
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa4f 	bl	8006726 <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa41 	bl	8006712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fa52 	bl	800673a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00c      	beq.n	80062c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0201 	mvn.w	r2, #1
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fb fab4 	bl	8001828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 ffcc 	bl	800727c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 ffc4 	bl	8007290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa11 	bl	800674e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0220 	mvn.w	r2, #32
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 ff8c 	bl	8007268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006372:	2302      	movs	r3, #2
 8006374:	e0ff      	b.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b14      	cmp	r3, #20
 8006382:	f200 80f0 	bhi.w	8006566 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006386:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	080063e1 	.word	0x080063e1
 8006390:	08006567 	.word	0x08006567
 8006394:	08006567 	.word	0x08006567
 8006398:	08006567 	.word	0x08006567
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006567 	.word	0x08006567
 80063a4:	08006567 	.word	0x08006567
 80063a8:	08006567 	.word	0x08006567
 80063ac:	08006463 	.word	0x08006463
 80063b0:	08006567 	.word	0x08006567
 80063b4:	08006567 	.word	0x08006567
 80063b8:	08006567 	.word	0x08006567
 80063bc:	080064a3 	.word	0x080064a3
 80063c0:	08006567 	.word	0x08006567
 80063c4:	08006567 	.word	0x08006567
 80063c8:	08006567 	.word	0x08006567
 80063cc:	080064e5 	.word	0x080064e5
 80063d0:	08006567 	.word	0x08006567
 80063d4:	08006567 	.word	0x08006567
 80063d8:	08006567 	.word	0x08006567
 80063dc:	08006525 	.word	0x08006525
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fa66 	bl	80068b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0208 	orr.w	r2, r2, #8
 80063fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0204 	bic.w	r2, r2, #4
 800640a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6999      	ldr	r1, [r3, #24]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	619a      	str	r2, [r3, #24]
      break;
 800641e:	e0a5      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fae0 	bl	80069ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800643a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800644a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6999      	ldr	r1, [r3, #24]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	021a      	lsls	r2, r3, #8
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	619a      	str	r2, [r3, #24]
      break;
 8006460:	e084      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fb53 	bl	8006b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0208 	orr.w	r2, r2, #8
 800647c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0204 	bic.w	r2, r2, #4
 800648c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69d9      	ldr	r1, [r3, #28]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	61da      	str	r2, [r3, #28]
      break;
 80064a0:	e064      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fbc5 	bl	8006c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69d9      	ldr	r1, [r3, #28]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	61da      	str	r2, [r3, #28]
      break;
 80064e2:	e043      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fc14 	bl	8006d18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0208 	orr.w	r2, r2, #8
 80064fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0204 	bic.w	r2, r2, #4
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006522:	e023      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fc5e 	bl	8006dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800653e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800654e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006564:	e002      	b.n	800656c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
      break;
 800656a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop

08006580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_TIM_ConfigClockSource+0x1c>
 8006598:	2302      	movs	r3, #2
 800659a:	e0b6      	b.n	800670a <HAL_TIM_ConfigClockSource+0x18a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d8:	d03e      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0xd8>
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065de:	f200 8087 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e6:	f000 8086 	beq.w	80066f6 <HAL_TIM_ConfigClockSource+0x176>
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ee:	d87f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 80065f0:	2b70      	cmp	r3, #112	@ 0x70
 80065f2:	d01a      	beq.n	800662a <HAL_TIM_ConfigClockSource+0xaa>
 80065f4:	2b70      	cmp	r3, #112	@ 0x70
 80065f6:	d87b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 80065f8:	2b60      	cmp	r3, #96	@ 0x60
 80065fa:	d050      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x11e>
 80065fc:	2b60      	cmp	r3, #96	@ 0x60
 80065fe:	d877      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 8006600:	2b50      	cmp	r3, #80	@ 0x50
 8006602:	d03c      	beq.n	800667e <HAL_TIM_ConfigClockSource+0xfe>
 8006604:	2b50      	cmp	r3, #80	@ 0x50
 8006606:	d873      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 8006608:	2b40      	cmp	r3, #64	@ 0x40
 800660a:	d058      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x13e>
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d86f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 8006610:	2b30      	cmp	r3, #48	@ 0x30
 8006612:	d064      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15e>
 8006614:	2b30      	cmp	r3, #48	@ 0x30
 8006616:	d86b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d060      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15e>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d867      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d05c      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15e>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d05a      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x15e>
 8006628:	e062      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800663a:	f000 fcbd 	bl	8006fb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800664c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	609a      	str	r2, [r3, #8]
      break;
 8006656:	e04f      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006668:	f000 fca6 	bl	8006fb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800667a:	609a      	str	r2, [r3, #8]
      break;
 800667c:	e03c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fc1a 	bl	8006ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2150      	movs	r1, #80	@ 0x50
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fc73 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 800669c:	e02c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fc39 	bl	8006f22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2160      	movs	r1, #96	@ 0x60
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fc63 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 80066bc:	e01c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 fbfa 	bl	8006ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2140      	movs	r1, #64	@ 0x40
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fc53 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 80066dc:	e00c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f000 fc4a 	bl	8006f82 <TIM_ITRx_SetConfig>
      break;
 80066ee:	e003      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      break;
 80066f4:	e000      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a48      	ldr	r2, [pc, #288]	@ (8006898 <TIM_Base_SetConfig+0x134>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d013      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006782:	d00f      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a45      	ldr	r2, [pc, #276]	@ (800689c <TIM_Base_SetConfig+0x138>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00b      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a44      	ldr	r2, [pc, #272]	@ (80068a0 <TIM_Base_SetConfig+0x13c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d007      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a43      	ldr	r2, [pc, #268]	@ (80068a4 <TIM_Base_SetConfig+0x140>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d003      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a42      	ldr	r2, [pc, #264]	@ (80068a8 <TIM_Base_SetConfig+0x144>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d108      	bne.n	80067b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a37      	ldr	r2, [pc, #220]	@ (8006898 <TIM_Base_SetConfig+0x134>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01f      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c4:	d01b      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a34      	ldr	r2, [pc, #208]	@ (800689c <TIM_Base_SetConfig+0x138>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d017      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a33      	ldr	r2, [pc, #204]	@ (80068a0 <TIM_Base_SetConfig+0x13c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d013      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a32      	ldr	r2, [pc, #200]	@ (80068a4 <TIM_Base_SetConfig+0x140>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00f      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a32      	ldr	r2, [pc, #200]	@ (80068ac <TIM_Base_SetConfig+0x148>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a31      	ldr	r2, [pc, #196]	@ (80068b0 <TIM_Base_SetConfig+0x14c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a30      	ldr	r2, [pc, #192]	@ (80068b4 <TIM_Base_SetConfig+0x150>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2b      	ldr	r2, [pc, #172]	@ (80068a8 <TIM_Base_SetConfig+0x144>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d108      	bne.n	8006810 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a18      	ldr	r2, [pc, #96]	@ (8006898 <TIM_Base_SetConfig+0x134>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <TIM_Base_SetConfig+0x100>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a19      	ldr	r2, [pc, #100]	@ (80068a4 <TIM_Base_SetConfig+0x140>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00f      	beq.n	8006864 <TIM_Base_SetConfig+0x100>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a19      	ldr	r2, [pc, #100]	@ (80068ac <TIM_Base_SetConfig+0x148>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00b      	beq.n	8006864 <TIM_Base_SetConfig+0x100>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a18      	ldr	r2, [pc, #96]	@ (80068b0 <TIM_Base_SetConfig+0x14c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d007      	beq.n	8006864 <TIM_Base_SetConfig+0x100>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a17      	ldr	r2, [pc, #92]	@ (80068b4 <TIM_Base_SetConfig+0x150>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_Base_SetConfig+0x100>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a12      	ldr	r2, [pc, #72]	@ (80068a8 <TIM_Base_SetConfig+0x144>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d103      	bne.n	800686c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b01      	cmp	r3, #1
 800687c:	d105      	bne.n	800688a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f023 0201 	bic.w	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	611a      	str	r2, [r3, #16]
  }
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40013400 	.word	0x40013400
 80068a8:	40015000 	.word	0x40015000
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f023 0201 	bic.w	r2, r3, #1
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 0302 	bic.w	r3, r3, #2
 8006904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a30      	ldr	r2, [pc, #192]	@ (80069d4 <TIM_OC1_SetConfig+0x11c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a2f      	ldr	r2, [pc, #188]	@ (80069d8 <TIM_OC1_SetConfig+0x120>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a2e      	ldr	r2, [pc, #184]	@ (80069dc <TIM_OC1_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2d      	ldr	r2, [pc, #180]	@ (80069e0 <TIM_OC1_SetConfig+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a2c      	ldr	r2, [pc, #176]	@ (80069e4 <TIM_OC1_SetConfig+0x12c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a2b      	ldr	r2, [pc, #172]	@ (80069e8 <TIM_OC1_SetConfig+0x130>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10c      	bne.n	800695a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0308 	bic.w	r3, r3, #8
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1d      	ldr	r2, [pc, #116]	@ (80069d4 <TIM_OC1_SetConfig+0x11c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <TIM_OC1_SetConfig+0x120>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1b      	ldr	r2, [pc, #108]	@ (80069dc <TIM_OC1_SetConfig+0x124>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1a      	ldr	r2, [pc, #104]	@ (80069e0 <TIM_OC1_SetConfig+0x128>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a19      	ldr	r2, [pc, #100]	@ (80069e4 <TIM_OC1_SetConfig+0x12c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a18      	ldr	r2, [pc, #96]	@ (80069e8 <TIM_OC1_SetConfig+0x130>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d111      	bne.n	80069ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800
 80069e8:	40015000 	.word	0x40015000

080069ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	f023 0210 	bic.w	r2, r3, #16
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f023 0320 	bic.w	r3, r3, #32
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8006afc <TIM_OC2_SetConfig+0x110>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_OC2_SetConfig+0x74>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2b      	ldr	r2, [pc, #172]	@ (8006b00 <TIM_OC2_SetConfig+0x114>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_OC2_SetConfig+0x74>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <TIM_OC2_SetConfig+0x118>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10d      	bne.n	8006a7c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006afc <TIM_OC2_SetConfig+0x110>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1e      	ldr	r2, [pc, #120]	@ (8006b00 <TIM_OC2_SetConfig+0x114>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b08 <TIM_OC2_SetConfig+0x11c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1d      	ldr	r2, [pc, #116]	@ (8006b0c <TIM_OC2_SetConfig+0x120>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b10 <TIM_OC2_SetConfig+0x124>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	@ (8006b04 <TIM_OC2_SetConfig+0x118>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d113      	bne.n	8006ad4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ab2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006aba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40013400 	.word	0x40013400
 8006b04:	40015000 	.word	0x40015000
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800

08006b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0303 	bic.w	r3, r3, #3
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a2b      	ldr	r2, [pc, #172]	@ (8006c20 <TIM_OC3_SetConfig+0x10c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <TIM_OC3_SetConfig+0x72>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2a      	ldr	r2, [pc, #168]	@ (8006c24 <TIM_OC3_SetConfig+0x110>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <TIM_OC3_SetConfig+0x72>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a29      	ldr	r2, [pc, #164]	@ (8006c28 <TIM_OC3_SetConfig+0x114>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d10d      	bne.n	8006ba2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ba0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c20 <TIM_OC3_SetConfig+0x10c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1d      	ldr	r2, [pc, #116]	@ (8006c24 <TIM_OC3_SetConfig+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00f      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c2c <TIM_OC3_SetConfig+0x118>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00b      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c30 <TIM_OC3_SetConfig+0x11c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d007      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c34 <TIM_OC3_SetConfig+0x120>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d003      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a16      	ldr	r2, [pc, #88]	@ (8006c28 <TIM_OC3_SetConfig+0x114>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d113      	bne.n	8006bfa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	621a      	str	r2, [r3, #32]
}
 8006c14:	bf00      	nop
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40012c00 	.word	0x40012c00
 8006c24:	40013400 	.word	0x40013400
 8006c28:	40015000 	.word	0x40015000
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800

08006c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	031b      	lsls	r3, r3, #12
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a1a      	ldr	r2, [pc, #104]	@ (8006d00 <TIM_OC4_SetConfig+0xc8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d013      	beq.n	8006cc4 <TIM_OC4_SetConfig+0x8c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <TIM_OC4_SetConfig+0xcc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00f      	beq.n	8006cc4 <TIM_OC4_SetConfig+0x8c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <TIM_OC4_SetConfig+0xd0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00b      	beq.n	8006cc4 <TIM_OC4_SetConfig+0x8c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <TIM_OC4_SetConfig+0xd4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d007      	beq.n	8006cc4 <TIM_OC4_SetConfig+0x8c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a16      	ldr	r2, [pc, #88]	@ (8006d10 <TIM_OC4_SetConfig+0xd8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_OC4_SetConfig+0x8c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a15      	ldr	r2, [pc, #84]	@ (8006d14 <TIM_OC4_SetConfig+0xdc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d109      	bne.n	8006cd8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	019b      	lsls	r3, r3, #6
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40012c00 	.word	0x40012c00
 8006d04:	40013400 	.word	0x40013400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800
 8006d14:	40015000 	.word	0x40015000

08006d18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a19      	ldr	r2, [pc, #100]	@ (8006dd4 <TIM_OC5_SetConfig+0xbc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <TIM_OC5_SetConfig+0x82>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a18      	ldr	r2, [pc, #96]	@ (8006dd8 <TIM_OC5_SetConfig+0xc0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00f      	beq.n	8006d9a <TIM_OC5_SetConfig+0x82>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a17      	ldr	r2, [pc, #92]	@ (8006ddc <TIM_OC5_SetConfig+0xc4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00b      	beq.n	8006d9a <TIM_OC5_SetConfig+0x82>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a16      	ldr	r2, [pc, #88]	@ (8006de0 <TIM_OC5_SetConfig+0xc8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d007      	beq.n	8006d9a <TIM_OC5_SetConfig+0x82>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <TIM_OC5_SetConfig+0xcc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_OC5_SetConfig+0x82>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a14      	ldr	r2, [pc, #80]	@ (8006de8 <TIM_OC5_SetConfig+0xd0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d109      	bne.n	8006dae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	621a      	str	r2, [r3, #32]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800
 8006de8:	40015000 	.word	0x40015000

08006dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	051b      	lsls	r3, r3, #20
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a1a      	ldr	r2, [pc, #104]	@ (8006eac <TIM_OC6_SetConfig+0xc0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d013      	beq.n	8006e70 <TIM_OC6_SetConfig+0x84>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a19      	ldr	r2, [pc, #100]	@ (8006eb0 <TIM_OC6_SetConfig+0xc4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00f      	beq.n	8006e70 <TIM_OC6_SetConfig+0x84>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a18      	ldr	r2, [pc, #96]	@ (8006eb4 <TIM_OC6_SetConfig+0xc8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00b      	beq.n	8006e70 <TIM_OC6_SetConfig+0x84>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a17      	ldr	r2, [pc, #92]	@ (8006eb8 <TIM_OC6_SetConfig+0xcc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d007      	beq.n	8006e70 <TIM_OC6_SetConfig+0x84>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a16      	ldr	r2, [pc, #88]	@ (8006ebc <TIM_OC6_SetConfig+0xd0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_OC6_SetConfig+0x84>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a15      	ldr	r2, [pc, #84]	@ (8006ec0 <TIM_OC6_SetConfig+0xd4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d109      	bne.n	8006e84 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	029b      	lsls	r3, r3, #10
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40013400 	.word	0x40013400
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800
 8006ec0:	40015000 	.word	0x40015000

08006ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 030a 	bic.w	r3, r3, #10
 8006f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b087      	sub	sp, #28
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f023 0210 	bic.w	r2, r3, #16
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	031b      	lsls	r3, r3, #12
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f043 0307 	orr.w	r3, r3, #7
 8006fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	609a      	str	r2, [r3, #8]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	021a      	lsls	r2, r3, #8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	609a      	str	r2, [r3, #8]
}
 8006fec:	bf00      	nop
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2201      	movs	r2, #1
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	43db      	mvns	r3, r3
 800701a:	401a      	ands	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	fa01 f303 	lsl.w	r3, r1, r3
 8007030:	431a      	orrs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007058:	2302      	movs	r3, #2
 800705a:	e06d      	b.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a30      	ldr	r2, [pc, #192]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2f      	ldr	r2, [pc, #188]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a2d      	ldr	r2, [pc, #180]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d108      	bne.n	80070ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d01d      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d8:	d018      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d013      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00e      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d009      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a16      	ldr	r2, [pc, #88]	@ (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a11      	ldr	r2, [pc, #68]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10c      	bne.n	8007126 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	4313      	orrs	r3, r2
 800711c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	40012c00 	.word	0x40012c00
 8007148:	40013400 	.word	0x40013400
 800714c:	40015000 	.word	0x40015000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40014000 	.word	0x40014000

0800715c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007174:	2302      	movs	r3, #2
 8007176:	e06a      	b.n	800724e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a19      	ldr	r2, [pc, #100]	@ (800725c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d009      	beq.n	8007210 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a17      	ldr	r2, [pc, #92]	@ (8007260 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d004      	beq.n	8007210 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a16      	ldr	r2, [pc, #88]	@ (8007264 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d115      	bne.n	800723c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721a:	051b      	lsls	r3, r3, #20
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40013400 	.word	0x40013400
 8007264:	40015000 	.word	0x40015000

08007268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e040      	b.n	8007338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fb fa40 	bl	800274c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	@ 0x24
 80072d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fdd0 	bl	8007e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fbf9 	bl	8007ae8 <UART_SetConfig>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e01b      	b.n	8007338 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800730e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800731e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fe4f 	bl	8007fd4 <UART_CheckIdleState>
 8007336:	4603      	mov	r3, r0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	@ 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007354:	2b20      	cmp	r3, #32
 8007356:	d177      	bne.n	8007448 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_UART_Transmit+0x24>
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e070      	b.n	800744a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2221      	movs	r2, #33	@ 0x21
 8007374:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007376:	f7fb fab9 	bl	80028ec <HAL_GetTick>
 800737a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007394:	d108      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e003      	b.n	80073b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073b0:	e02f      	b.n	8007412 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	@ 0x80
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 feb1 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e03b      	b.n	800744a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10b      	bne.n	80073f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e4:	b292      	uxth	r2, r2
 80073e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	3302      	adds	r3, #2
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e007      	b.n	8007400 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3301      	adds	r3, #1
 80073fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1c9      	bne.n	80073b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	2140      	movs	r1, #64	@ 0x40
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fe7b 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e005      	b.n	800744a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	e000      	b.n	800744a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3720      	adds	r7, #32
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08a      	sub	sp, #40	@ 0x28
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	4613      	mov	r3, r2
 800745e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007466:	2b20      	cmp	r3, #32
 8007468:	d132      	bne.n	80074d0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_UART_Receive_IT+0x24>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e02b      	b.n	80074d2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d018      	beq.n	80074c0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	613b      	str	r3, [r7, #16]
   return(result);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	623b      	str	r3, [r7, #32]
 80074ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	461a      	mov	r2, r3
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fe9a 	bl	8008200 <UART_Start_Receive_IT>
 80074cc:	4603      	mov	r3, r0
 80074ce:	e000      	b.n	80074d2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3728      	adds	r7, #40	@ 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b0ba      	sub	sp, #232	@ 0xe8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007506:	f640 030f 	movw	r3, #2063	@ 0x80f
 800750a:	4013      	ands	r3, r2
 800750c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d115      	bne.n	8007544 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 82ab 	beq.w	8007a90 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      }
      return;
 8007542:	e2a5      	b.n	8007a90 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8117 	beq.w	800777c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800754e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800755a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800755e:	4b85      	ldr	r3, [pc, #532]	@ (8007774 <HAL_UART_IRQHandler+0x298>)
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 810a 	beq.w	800777c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d011      	beq.n	8007598 <HAL_UART_IRQHandler+0xbc>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2201      	movs	r2, #1
 8007586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800758e:	f043 0201 	orr.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d011      	beq.n	80075c8 <HAL_UART_IRQHandler+0xec>
 80075a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2202      	movs	r2, #2
 80075b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075be:	f043 0204 	orr.w	r2, r3, #4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d011      	beq.n	80075f8 <HAL_UART_IRQHandler+0x11c>
 80075d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2204      	movs	r2, #4
 80075e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ee:	f043 0202 	orr.w	r2, r3, #2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d017      	beq.n	8007634 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007614:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2208      	movs	r2, #8
 8007622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800762a:	f043 0208 	orr.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <HAL_UART_IRQHandler+0x18a>
 8007640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007644:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00c      	beq.n	8007666 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 8211 	beq.w	8007a94 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00d      	beq.n	800769a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ae:	2b40      	cmp	r3, #64	@ 0x40
 80076b0:	d005      	beq.n	80076be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d04f      	beq.n	800775e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fe64 	bl	800838c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ce:	2b40      	cmp	r3, #64	@ 0x40
 80076d0:	d141      	bne.n	8007756 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800770a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1d9      	bne.n	80076d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007722:	2b00      	cmp	r3, #0
 8007724:	d013      	beq.n	800774e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800772a:	4a13      	ldr	r2, [pc, #76]	@ (8007778 <HAL_UART_IRQHandler+0x29c>)
 800772c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007732:	4618      	mov	r0, r3
 8007734:	f7fc fb3f 	bl	8003db6 <HAL_DMA_Abort_IT>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d017      	beq.n	800776e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774c:	e00f      	b.n	800776e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f9b4 	bl	8007abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	e00b      	b.n	800776e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9b0 	bl	8007abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	e007      	b.n	800776e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9ac 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800776c:	e192      	b.n	8007a94 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776e:	bf00      	nop
    return;
 8007770:	e190      	b.n	8007a94 <HAL_UART_IRQHandler+0x5b8>
 8007772:	bf00      	nop
 8007774:	04000120 	.word	0x04000120
 8007778:	08008455 	.word	0x08008455

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007780:	2b01      	cmp	r3, #1
 8007782:	f040 814b 	bne.w	8007a1c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8144 	beq.w	8007a1c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 813d 	beq.w	8007a1c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2210      	movs	r2, #16
 80077a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b4:	2b40      	cmp	r3, #64	@ 0x40
 80077b6:	f040 80b5 	bne.w	8007924 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8164 	beq.w	8007a98 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077da:	429a      	cmp	r2, r3
 80077dc:	f080 815c 	bcs.w	8007a98 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	f000 8086 	beq.w	8007902 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800780a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800780e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007812:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007820:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007824:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800782c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1da      	bne.n	80077f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007864:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007868:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800786c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e1      	bne.n	8007840 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800788c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800788e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e3      	bne.n	800787c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d2:	f023 0310 	bic.w	r3, r3, #16
 80078d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e4      	bne.n	80078c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fc fa1c 	bl	8003d3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007914:	b29b      	uxth	r3, r3
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	b29b      	uxth	r3, r3
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8d7 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007922:	e0b9      	b.n	8007a98 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007930:	b29b      	uxth	r3, r3
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 80ab 	beq.w	8007a9c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80a6 	beq.w	8007a9c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800795e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007960:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007964:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007972:	647b      	str	r3, [r7, #68]	@ 0x44
 8007974:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e4      	bne.n	8007950 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	623b      	str	r3, [r7, #32]
   return(result);
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80079ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e3      	bne.n	8007986 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0310 	bic.w	r3, r3, #16
 80079e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079f4:	61fb      	str	r3, [r7, #28]
 80079f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	69b9      	ldr	r1, [r7, #24]
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	617b      	str	r3, [r7, #20]
   return(result);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e4      	bne.n	80079d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f85b 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a1a:	e03f      	b.n	8007a9c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00e      	beq.n	8007a46 <HAL_UART_IRQHandler+0x56a>
 8007a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fef0 	bl	8008824 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a44:	e02d      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01c      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
    }
    return;
 8007a6e:	e017      	b.n	8007aa0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d012      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00c      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fcf9 	bl	8008480 <UART_EndTransmit_IT>
    return;
 8007a8e:	e008      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a90:	bf00      	nop
 8007a92:	e006      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007a94:	bf00      	nop
 8007a96:	e004      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a98:	bf00      	nop
 8007a9a:	e002      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a9c:	bf00      	nop
 8007a9e:	e000      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007aa0:	bf00      	nop
  }

}
 8007aa2:	37e8      	adds	r7, #232	@ 0xe8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b92      	ldr	r3, [pc, #584]	@ (8007d5c <UART_SetConfig+0x274>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	6979      	ldr	r1, [r7, #20]
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a80      	ldr	r2, [pc, #512]	@ (8007d60 <UART_SetConfig+0x278>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d120      	bne.n	8007ba6 <UART_SetConfig+0xbe>
 8007b64:	4b7f      	ldr	r3, [pc, #508]	@ (8007d64 <UART_SetConfig+0x27c>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d817      	bhi.n	8007ba0 <UART_SetConfig+0xb8>
 8007b70:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <UART_SetConfig+0x90>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007b9b 	.word	0x08007b9b
 8007b84:	08007b8f 	.word	0x08007b8f
 8007b88:	2301      	movs	r3, #1
 8007b8a:	77fb      	strb	r3, [r7, #31]
 8007b8c:	e0b5      	b.n	8007cfa <UART_SetConfig+0x212>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	77fb      	strb	r3, [r7, #31]
 8007b92:	e0b2      	b.n	8007cfa <UART_SetConfig+0x212>
 8007b94:	2304      	movs	r3, #4
 8007b96:	77fb      	strb	r3, [r7, #31]
 8007b98:	e0af      	b.n	8007cfa <UART_SetConfig+0x212>
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	77fb      	strb	r3, [r7, #31]
 8007b9e:	e0ac      	b.n	8007cfa <UART_SetConfig+0x212>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e0a9      	b.n	8007cfa <UART_SetConfig+0x212>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a6f      	ldr	r2, [pc, #444]	@ (8007d68 <UART_SetConfig+0x280>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d124      	bne.n	8007bfa <UART_SetConfig+0x112>
 8007bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8007d64 <UART_SetConfig+0x27c>)
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bbc:	d011      	beq.n	8007be2 <UART_SetConfig+0xfa>
 8007bbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bc2:	d817      	bhi.n	8007bf4 <UART_SetConfig+0x10c>
 8007bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc8:	d011      	beq.n	8007bee <UART_SetConfig+0x106>
 8007bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bce:	d811      	bhi.n	8007bf4 <UART_SetConfig+0x10c>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <UART_SetConfig+0xf4>
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd8:	d006      	beq.n	8007be8 <UART_SetConfig+0x100>
 8007bda:	e00b      	b.n	8007bf4 <UART_SetConfig+0x10c>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e08b      	b.n	8007cfa <UART_SetConfig+0x212>
 8007be2:	2302      	movs	r3, #2
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	e088      	b.n	8007cfa <UART_SetConfig+0x212>
 8007be8:	2304      	movs	r3, #4
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e085      	b.n	8007cfa <UART_SetConfig+0x212>
 8007bee:	2308      	movs	r3, #8
 8007bf0:	77fb      	strb	r3, [r7, #31]
 8007bf2:	e082      	b.n	8007cfa <UART_SetConfig+0x212>
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	77fb      	strb	r3, [r7, #31]
 8007bf8:	e07f      	b.n	8007cfa <UART_SetConfig+0x212>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a5b      	ldr	r2, [pc, #364]	@ (8007d6c <UART_SetConfig+0x284>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d124      	bne.n	8007c4e <UART_SetConfig+0x166>
 8007c04:	4b57      	ldr	r3, [pc, #348]	@ (8007d64 <UART_SetConfig+0x27c>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007c0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c10:	d011      	beq.n	8007c36 <UART_SetConfig+0x14e>
 8007c12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c16:	d817      	bhi.n	8007c48 <UART_SetConfig+0x160>
 8007c18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c1c:	d011      	beq.n	8007c42 <UART_SetConfig+0x15a>
 8007c1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c22:	d811      	bhi.n	8007c48 <UART_SetConfig+0x160>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <UART_SetConfig+0x148>
 8007c28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c2c:	d006      	beq.n	8007c3c <UART_SetConfig+0x154>
 8007c2e:	e00b      	b.n	8007c48 <UART_SetConfig+0x160>
 8007c30:	2300      	movs	r3, #0
 8007c32:	77fb      	strb	r3, [r7, #31]
 8007c34:	e061      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c36:	2302      	movs	r3, #2
 8007c38:	77fb      	strb	r3, [r7, #31]
 8007c3a:	e05e      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e05b      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c42:	2308      	movs	r3, #8
 8007c44:	77fb      	strb	r3, [r7, #31]
 8007c46:	e058      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e055      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a47      	ldr	r2, [pc, #284]	@ (8007d70 <UART_SetConfig+0x288>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d124      	bne.n	8007ca2 <UART_SetConfig+0x1ba>
 8007c58:	4b42      	ldr	r3, [pc, #264]	@ (8007d64 <UART_SetConfig+0x27c>)
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007c60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c64:	d011      	beq.n	8007c8a <UART_SetConfig+0x1a2>
 8007c66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c6a:	d817      	bhi.n	8007c9c <UART_SetConfig+0x1b4>
 8007c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c70:	d011      	beq.n	8007c96 <UART_SetConfig+0x1ae>
 8007c72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c76:	d811      	bhi.n	8007c9c <UART_SetConfig+0x1b4>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <UART_SetConfig+0x19c>
 8007c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c80:	d006      	beq.n	8007c90 <UART_SetConfig+0x1a8>
 8007c82:	e00b      	b.n	8007c9c <UART_SetConfig+0x1b4>
 8007c84:	2300      	movs	r3, #0
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e037      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	77fb      	strb	r3, [r7, #31]
 8007c8e:	e034      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c90:	2304      	movs	r3, #4
 8007c92:	77fb      	strb	r3, [r7, #31]
 8007c94:	e031      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c96:	2308      	movs	r3, #8
 8007c98:	77fb      	strb	r3, [r7, #31]
 8007c9a:	e02e      	b.n	8007cfa <UART_SetConfig+0x212>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e02b      	b.n	8007cfa <UART_SetConfig+0x212>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a33      	ldr	r2, [pc, #204]	@ (8007d74 <UART_SetConfig+0x28c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d124      	bne.n	8007cf6 <UART_SetConfig+0x20e>
 8007cac:	4b2d      	ldr	r3, [pc, #180]	@ (8007d64 <UART_SetConfig+0x27c>)
 8007cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007cb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007cb8:	d011      	beq.n	8007cde <UART_SetConfig+0x1f6>
 8007cba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007cbe:	d817      	bhi.n	8007cf0 <UART_SetConfig+0x208>
 8007cc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cc4:	d011      	beq.n	8007cea <UART_SetConfig+0x202>
 8007cc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cca:	d811      	bhi.n	8007cf0 <UART_SetConfig+0x208>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <UART_SetConfig+0x1f0>
 8007cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cd4:	d006      	beq.n	8007ce4 <UART_SetConfig+0x1fc>
 8007cd6:	e00b      	b.n	8007cf0 <UART_SetConfig+0x208>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e00d      	b.n	8007cfa <UART_SetConfig+0x212>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e00a      	b.n	8007cfa <UART_SetConfig+0x212>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e007      	b.n	8007cfa <UART_SetConfig+0x212>
 8007cea:	2308      	movs	r3, #8
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e004      	b.n	8007cfa <UART_SetConfig+0x212>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e001      	b.n	8007cfa <UART_SetConfig+0x212>
 8007cf6:	2310      	movs	r3, #16
 8007cf8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d02:	d16b      	bne.n	8007ddc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007d04:	7ffb      	ldrb	r3, [r7, #31]
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d838      	bhi.n	8007d7c <UART_SetConfig+0x294>
 8007d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <UART_SetConfig+0x228>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d35 	.word	0x08007d35
 8007d14:	08007d3d 	.word	0x08007d3d
 8007d18:	08007d45 	.word	0x08007d45
 8007d1c:	08007d7d 	.word	0x08007d7d
 8007d20:	08007d4b 	.word	0x08007d4b
 8007d24:	08007d7d 	.word	0x08007d7d
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007d7d 	.word	0x08007d7d
 8007d30:	08007d53 	.word	0x08007d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d34:	f7fd fd76 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 8007d38:	61b8      	str	r0, [r7, #24]
        break;
 8007d3a:	e024      	b.n	8007d86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d3c:	f7fd fd94 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 8007d40:	61b8      	str	r0, [r7, #24]
        break;
 8007d42:	e020      	b.n	8007d86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d44:	4b0c      	ldr	r3, [pc, #48]	@ (8007d78 <UART_SetConfig+0x290>)
 8007d46:	61bb      	str	r3, [r7, #24]
        break;
 8007d48:	e01d      	b.n	8007d86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d4a:	f7fd fd0b 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8007d4e:	61b8      	str	r0, [r7, #24]
        break;
 8007d50:	e019      	b.n	8007d86 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d56:	61bb      	str	r3, [r7, #24]
        break;
 8007d58:	e015      	b.n	8007d86 <UART_SetConfig+0x29e>
 8007d5a:	bf00      	nop
 8007d5c:	efff69f3 	.word	0xefff69f3
 8007d60:	40013800 	.word	0x40013800
 8007d64:	40021000 	.word	0x40021000
 8007d68:	40004400 	.word	0x40004400
 8007d6c:	40004800 	.word	0x40004800
 8007d70:	40004c00 	.word	0x40004c00
 8007d74:	40005000 	.word	0x40005000
 8007d78:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	77bb      	strb	r3, [r7, #30]
        break;
 8007d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d073      	beq.n	8007e74 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	005a      	lsls	r2, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	085b      	lsrs	r3, r3, #1
 8007d96:	441a      	add	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b0f      	cmp	r3, #15
 8007da6:	d916      	bls.n	8007dd6 <UART_SetConfig+0x2ee>
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dae:	d212      	bcs.n	8007dd6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f023 030f 	bic.w	r3, r3, #15
 8007db8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	89fb      	ldrh	r3, [r7, #14]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	89fa      	ldrh	r2, [r7, #14]
 8007dd2:	60da      	str	r2, [r3, #12]
 8007dd4:	e04e      	b.n	8007e74 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	77bb      	strb	r3, [r7, #30]
 8007dda:	e04b      	b.n	8007e74 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ddc:	7ffb      	ldrb	r3, [r7, #31]
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d827      	bhi.n	8007e32 <UART_SetConfig+0x34a>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0x300>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e1d 	.word	0x08007e1d
 8007df4:	08007e33 	.word	0x08007e33
 8007df8:	08007e23 	.word	0x08007e23
 8007dfc:	08007e33 	.word	0x08007e33
 8007e00:	08007e33 	.word	0x08007e33
 8007e04:	08007e33 	.word	0x08007e33
 8007e08:	08007e2b 	.word	0x08007e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e0c:	f7fd fd0a 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 8007e10:	61b8      	str	r0, [r7, #24]
        break;
 8007e12:	e013      	b.n	8007e3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e14:	f7fd fd28 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 8007e18:	61b8      	str	r0, [r7, #24]
        break;
 8007e1a:	e00f      	b.n	8007e3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007e8c <UART_SetConfig+0x3a4>)
 8007e1e:	61bb      	str	r3, [r7, #24]
        break;
 8007e20:	e00c      	b.n	8007e3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e22:	f7fd fc9f 	bl	8005764 <HAL_RCC_GetSysClockFreq>
 8007e26:	61b8      	str	r0, [r7, #24]
        break;
 8007e28:	e008      	b.n	8007e3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e2e:	61bb      	str	r3, [r7, #24]
        break;
 8007e30:	e004      	b.n	8007e3c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	77bb      	strb	r3, [r7, #30]
        break;
 8007e3a:	bf00      	nop
    }

    if (pclk != 0U)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d018      	beq.n	8007e74 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	085a      	lsrs	r2, r3, #1
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	441a      	add	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b0f      	cmp	r3, #15
 8007e5a:	d909      	bls.n	8007e70 <UART_SetConfig+0x388>
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e62:	d205      	bcs.n	8007e70 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60da      	str	r2, [r3, #12]
 8007e6e:	e001      	b.n	8007e74 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e80:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	007a1200 	.word	0x007a1200

08007e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01a      	beq.n	8007fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f8e:	d10a      	bne.n	8007fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]
  }
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b098      	sub	sp, #96	@ 0x60
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fe4:	f7fa fc82 	bl	80028ec <HAL_GetTick>
 8007fe8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d12e      	bne.n	8008056 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008000:	2200      	movs	r2, #0
 8008002:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f88c 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d021      	beq.n	8008056 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008026:	653b      	str	r3, [r7, #80]	@ 0x50
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008030:	647b      	str	r3, [r7, #68]	@ 0x44
 8008032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800803e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e6      	bne.n	8008012 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e062      	b.n	800811c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b04      	cmp	r3, #4
 8008062:	d149      	bne.n	80080f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800806c:	2200      	movs	r2, #0
 800806e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f856 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d03c      	beq.n	80080f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	623b      	str	r3, [r7, #32]
   return(result);
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800809c:	633b      	str	r3, [r7, #48]	@ 0x30
 800809e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e6      	bne.n	800807e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3308      	adds	r3, #8
 80080b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080d0:	61fa      	str	r2, [r7, #28]
 80080d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	69b9      	ldr	r1, [r7, #24]
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	617b      	str	r3, [r7, #20]
   return(result);
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e5      	bne.n	80080b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e011      	b.n	800811c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3758      	adds	r7, #88	@ 0x58
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008134:	e04f      	b.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d04b      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813e:	f7fa fbd5 	bl	80028ec <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <UART_WaitOnFlagUntilTimeout+0x30>
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e04e      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	d037      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b80      	cmp	r3, #128	@ 0x80
 800816a:	d034      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	d031      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f003 0308 	and.w	r3, r3, #8
 800817c:	2b08      	cmp	r3, #8
 800817e:	d110      	bne.n	80081a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2208      	movs	r2, #8
 8008186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f8ff 	bl	800838c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2208      	movs	r2, #8
 8008192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e029      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081b0:	d111      	bne.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f8e5 	bl	800838c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e00f      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4013      	ands	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d0a0      	beq.n	8008136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008200:	b480      	push	{r7}
 8008202:	b097      	sub	sp, #92	@ 0x5c
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	88fa      	ldrh	r2, [r7, #6]
 8008218:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	88fa      	ldrh	r2, [r7, #6]
 8008220:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008232:	d10e      	bne.n	8008252 <UART_Start_Receive_IT+0x52>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d105      	bne.n	8008248 <UART_Start_Receive_IT+0x48>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008246:	e02d      	b.n	80082a4 <UART_Start_Receive_IT+0xa4>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	22ff      	movs	r2, #255	@ 0xff
 800824c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008250:	e028      	b.n	80082a4 <UART_Start_Receive_IT+0xa4>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10d      	bne.n	8008276 <UART_Start_Receive_IT+0x76>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d104      	bne.n	800826c <UART_Start_Receive_IT+0x6c>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	22ff      	movs	r2, #255	@ 0xff
 8008266:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800826a:	e01b      	b.n	80082a4 <UART_Start_Receive_IT+0xa4>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	227f      	movs	r2, #127	@ 0x7f
 8008270:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008274:	e016      	b.n	80082a4 <UART_Start_Receive_IT+0xa4>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800827e:	d10d      	bne.n	800829c <UART_Start_Receive_IT+0x9c>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <UART_Start_Receive_IT+0x92>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	227f      	movs	r2, #127	@ 0x7f
 800828c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008290:	e008      	b.n	80082a4 <UART_Start_Receive_IT+0xa4>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	223f      	movs	r2, #63	@ 0x3f
 8008296:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800829a:	e003      	b.n	80082a4 <UART_Start_Receive_IT+0xa4>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2222      	movs	r2, #34	@ 0x22
 80082b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80082d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80082e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e5      	bne.n	80082b4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f0:	d107      	bne.n	8008302 <UART_Start_Receive_IT+0x102>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4a21      	ldr	r2, [pc, #132]	@ (8008384 <UART_Start_Receive_IT+0x184>)
 80082fe:	669a      	str	r2, [r3, #104]	@ 0x68
 8008300:	e002      	b.n	8008308 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4a20      	ldr	r2, [pc, #128]	@ (8008388 <UART_Start_Receive_IT+0x188>)
 8008306:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d019      	beq.n	8008344 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800832e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008330:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800833c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_Start_Receive_IT+0x110>
 8008342:	e018      	b.n	8008376 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	613b      	str	r3, [r7, #16]
   return(result);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f043 0320 	orr.w	r3, r3, #32
 8008358:	653b      	str	r3, [r7, #80]	@ 0x50
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008362:	623b      	str	r3, [r7, #32]
 8008364:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	69f9      	ldr	r1, [r7, #28]
 8008368:	6a3a      	ldr	r2, [r7, #32]
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e6      	bne.n	8008344 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	375c      	adds	r7, #92	@ 0x5c
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	0800867d 	.word	0x0800867d
 8008388:	080084d5 	.word	0x080084d5

0800838c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800838c:	b480      	push	{r7}
 800838e:	b095      	sub	sp, #84	@ 0x54
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e6      	bne.n	8008394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3308      	adds	r3, #8
 80083cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	f023 0301 	bic.w	r3, r3, #1
 80083dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e5      	bne.n	80083c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d118      	bne.n	8008434 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f023 0310 	bic.w	r3, r3, #16
 8008416:	647b      	str	r3, [r7, #68]	@ 0x44
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008420:	61bb      	str	r3, [r7, #24]
 8008422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6979      	ldr	r1, [r7, #20]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	613b      	str	r3, [r7, #16]
   return(result);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e6      	bne.n	8008402 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2220      	movs	r2, #32
 8008438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008448:	bf00      	nop
 800844a:	3754      	adds	r7, #84	@ 0x54
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7ff fb22 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	60bb      	str	r3, [r7, #8]
   return(result);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	61bb      	str	r3, [r7, #24]
 80084a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6979      	ldr	r1, [r7, #20]
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	613b      	str	r3, [r7, #16]
   return(result);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e6      	bne.n	8008488 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff faee 	bl	8007aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084cc:	bf00      	nop
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b09c      	sub	sp, #112	@ 0x70
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ec:	2b22      	cmp	r3, #34	@ 0x22
 80084ee:	f040 80b9 	bne.w	8008664 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80084f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008500:	b2d9      	uxtb	r1, r3
 8008502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008506:	b2da      	uxtb	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850c:	400a      	ands	r2, r1
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 809c 	bne.w	8008674 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800854a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800854c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800855a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800855c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e6      	bne.n	800853c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3308      	adds	r3, #8
 8008574:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800857e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	667b      	str	r3, [r7, #100]	@ 0x64
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800858e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008590:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800859c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e5      	bne.n	800856e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d018      	beq.n	80085f6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	623b      	str	r3, [r7, #32]
   return(result);
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80085e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e6      	bne.n	80085c4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d12e      	bne.n	800865c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	60fb      	str	r3, [r7, #12]
   return(result);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f023 0310 	bic.w	r3, r3, #16
 8008618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	69b9      	ldr	r1, [r7, #24]
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	617b      	str	r3, [r7, #20]
   return(result);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e6      	bne.n	8008604 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b10      	cmp	r3, #16
 8008642:	d103      	bne.n	800864c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2210      	movs	r2, #16
 800864a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff fa3b 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800865a:	e00b      	b.n	8008674 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7f9 fee3 	bl	8002428 <HAL_UART_RxCpltCallback>
}
 8008662:	e007      	b.n	8008674 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699a      	ldr	r2, [r3, #24]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0208 	orr.w	r2, r2, #8
 8008672:	619a      	str	r2, [r3, #24]
}
 8008674:	bf00      	nop
 8008676:	3770      	adds	r7, #112	@ 0x70
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b09c      	sub	sp, #112	@ 0x70
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800868a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008694:	2b22      	cmp	r3, #34	@ 0x22
 8008696:	f040 80b9 	bne.w	800880c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80086a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80086aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80086ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086b2:	4013      	ands	r3, r2
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086be:	1c9a      	adds	r2, r3, #2
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 809c 	bne.w	800881c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008702:	657b      	str	r3, [r7, #84]	@ 0x54
 8008704:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008708:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e6      	bne.n	80086e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	663b      	str	r3, [r7, #96]	@ 0x60
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008736:	643a      	str	r2, [r7, #64]	@ 0x40
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800873c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e5      	bne.n	8008716 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2220      	movs	r2, #32
 800874e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d018      	beq.n	800879e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	61fb      	str	r3, [r7, #28]
   return(result);
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800878a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800878c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e6      	bne.n	800876c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d12e      	bne.n	8008804 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f023 0310 	bic.w	r3, r3, #16
 80087c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087ca:	61bb      	str	r3, [r7, #24]
 80087cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6979      	ldr	r1, [r7, #20]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	613b      	str	r3, [r7, #16]
   return(result);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e6      	bne.n	80087ac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d103      	bne.n	80087f4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2210      	movs	r2, #16
 80087f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff f967 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008802:	e00b      	b.n	800881c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7f9 fe0f 	bl	8002428 <HAL_UART_RxCpltCallback>
}
 800880a:	e007      	b.n	800881c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0208 	orr.w	r2, r2, #8
 800881a:	619a      	str	r2, [r3, #24]
}
 800881c:	bf00      	nop
 800881e:	3770      	adds	r7, #112	@ 0x70
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <__cvt>:
 8008838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	ec57 6b10 	vmov	r6, r7, d0
 8008840:	2f00      	cmp	r7, #0
 8008842:	460c      	mov	r4, r1
 8008844:	4619      	mov	r1, r3
 8008846:	463b      	mov	r3, r7
 8008848:	bfbb      	ittet	lt
 800884a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800884e:	461f      	movlt	r7, r3
 8008850:	2300      	movge	r3, #0
 8008852:	232d      	movlt	r3, #45	@ 0x2d
 8008854:	700b      	strb	r3, [r1, #0]
 8008856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008858:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800885c:	4691      	mov	r9, r2
 800885e:	f023 0820 	bic.w	r8, r3, #32
 8008862:	bfbc      	itt	lt
 8008864:	4632      	movlt	r2, r6
 8008866:	4616      	movlt	r6, r2
 8008868:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800886c:	d005      	beq.n	800887a <__cvt+0x42>
 800886e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008872:	d100      	bne.n	8008876 <__cvt+0x3e>
 8008874:	3401      	adds	r4, #1
 8008876:	2102      	movs	r1, #2
 8008878:	e000      	b.n	800887c <__cvt+0x44>
 800887a:	2103      	movs	r1, #3
 800887c:	ab03      	add	r3, sp, #12
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	ab02      	add	r3, sp, #8
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	ec47 6b10 	vmov	d0, r6, r7
 8008888:	4653      	mov	r3, sl
 800888a:	4622      	mov	r2, r4
 800888c:	f000 fe70 	bl	8009570 <_dtoa_r>
 8008890:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008894:	4605      	mov	r5, r0
 8008896:	d119      	bne.n	80088cc <__cvt+0x94>
 8008898:	f019 0f01 	tst.w	r9, #1
 800889c:	d00e      	beq.n	80088bc <__cvt+0x84>
 800889e:	eb00 0904 	add.w	r9, r0, r4
 80088a2:	2200      	movs	r2, #0
 80088a4:	2300      	movs	r3, #0
 80088a6:	4630      	mov	r0, r6
 80088a8:	4639      	mov	r1, r7
 80088aa:	f7f8 f915 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ae:	b108      	cbz	r0, 80088b4 <__cvt+0x7c>
 80088b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80088b4:	2230      	movs	r2, #48	@ 0x30
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	454b      	cmp	r3, r9
 80088ba:	d31e      	bcc.n	80088fa <__cvt+0xc2>
 80088bc:	9b03      	ldr	r3, [sp, #12]
 80088be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088c0:	1b5b      	subs	r3, r3, r5
 80088c2:	4628      	mov	r0, r5
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	b004      	add	sp, #16
 80088c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088d0:	eb00 0904 	add.w	r9, r0, r4
 80088d4:	d1e5      	bne.n	80088a2 <__cvt+0x6a>
 80088d6:	7803      	ldrb	r3, [r0, #0]
 80088d8:	2b30      	cmp	r3, #48	@ 0x30
 80088da:	d10a      	bne.n	80088f2 <__cvt+0xba>
 80088dc:	2200      	movs	r2, #0
 80088de:	2300      	movs	r3, #0
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f8 f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80088e8:	b918      	cbnz	r0, 80088f2 <__cvt+0xba>
 80088ea:	f1c4 0401 	rsb	r4, r4, #1
 80088ee:	f8ca 4000 	str.w	r4, [sl]
 80088f2:	f8da 3000 	ldr.w	r3, [sl]
 80088f6:	4499      	add	r9, r3
 80088f8:	e7d3      	b.n	80088a2 <__cvt+0x6a>
 80088fa:	1c59      	adds	r1, r3, #1
 80088fc:	9103      	str	r1, [sp, #12]
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	e7d9      	b.n	80088b6 <__cvt+0x7e>

08008902 <__exponent>:
 8008902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008904:	2900      	cmp	r1, #0
 8008906:	bfba      	itte	lt
 8008908:	4249      	neglt	r1, r1
 800890a:	232d      	movlt	r3, #45	@ 0x2d
 800890c:	232b      	movge	r3, #43	@ 0x2b
 800890e:	2909      	cmp	r1, #9
 8008910:	7002      	strb	r2, [r0, #0]
 8008912:	7043      	strb	r3, [r0, #1]
 8008914:	dd29      	ble.n	800896a <__exponent+0x68>
 8008916:	f10d 0307 	add.w	r3, sp, #7
 800891a:	461d      	mov	r5, r3
 800891c:	270a      	movs	r7, #10
 800891e:	461a      	mov	r2, r3
 8008920:	fbb1 f6f7 	udiv	r6, r1, r7
 8008924:	fb07 1416 	mls	r4, r7, r6, r1
 8008928:	3430      	adds	r4, #48	@ 0x30
 800892a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800892e:	460c      	mov	r4, r1
 8008930:	2c63      	cmp	r4, #99	@ 0x63
 8008932:	f103 33ff 	add.w	r3, r3, #4294967295
 8008936:	4631      	mov	r1, r6
 8008938:	dcf1      	bgt.n	800891e <__exponent+0x1c>
 800893a:	3130      	adds	r1, #48	@ 0x30
 800893c:	1e94      	subs	r4, r2, #2
 800893e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008942:	1c41      	adds	r1, r0, #1
 8008944:	4623      	mov	r3, r4
 8008946:	42ab      	cmp	r3, r5
 8008948:	d30a      	bcc.n	8008960 <__exponent+0x5e>
 800894a:	f10d 0309 	add.w	r3, sp, #9
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	42ac      	cmp	r4, r5
 8008952:	bf88      	it	hi
 8008954:	2300      	movhi	r3, #0
 8008956:	3302      	adds	r3, #2
 8008958:	4403      	add	r3, r0
 800895a:	1a18      	subs	r0, r3, r0
 800895c:	b003      	add	sp, #12
 800895e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008960:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008964:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008968:	e7ed      	b.n	8008946 <__exponent+0x44>
 800896a:	2330      	movs	r3, #48	@ 0x30
 800896c:	3130      	adds	r1, #48	@ 0x30
 800896e:	7083      	strb	r3, [r0, #2]
 8008970:	70c1      	strb	r1, [r0, #3]
 8008972:	1d03      	adds	r3, r0, #4
 8008974:	e7f1      	b.n	800895a <__exponent+0x58>
	...

08008978 <_printf_float>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	b08d      	sub	sp, #52	@ 0x34
 800897e:	460c      	mov	r4, r1
 8008980:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008984:	4616      	mov	r6, r2
 8008986:	461f      	mov	r7, r3
 8008988:	4605      	mov	r5, r0
 800898a:	f000 fcef 	bl	800936c <_localeconv_r>
 800898e:	6803      	ldr	r3, [r0, #0]
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	4618      	mov	r0, r3
 8008994:	f7f7 fc74 	bl	8000280 <strlen>
 8008998:	2300      	movs	r3, #0
 800899a:	930a      	str	r3, [sp, #40]	@ 0x28
 800899c:	f8d8 3000 	ldr.w	r3, [r8]
 80089a0:	9005      	str	r0, [sp, #20]
 80089a2:	3307      	adds	r3, #7
 80089a4:	f023 0307 	bic.w	r3, r3, #7
 80089a8:	f103 0208 	add.w	r2, r3, #8
 80089ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089b0:	f8d4 b000 	ldr.w	fp, [r4]
 80089b4:	f8c8 2000 	str.w	r2, [r8]
 80089b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089c0:	9307      	str	r3, [sp, #28]
 80089c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80089c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008c40 <_printf_float+0x2c8>)
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295
 80089d4:	f7f8 f8b2 	bl	8000b3c <__aeabi_dcmpun>
 80089d8:	bb70      	cbnz	r0, 8008a38 <_printf_float+0xc0>
 80089da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089de:	4b98      	ldr	r3, [pc, #608]	@ (8008c40 <_printf_float+0x2c8>)
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	f7f8 f88c 	bl	8000b00 <__aeabi_dcmple>
 80089e8:	bb30      	cbnz	r0, 8008a38 <_printf_float+0xc0>
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	4640      	mov	r0, r8
 80089f0:	4649      	mov	r1, r9
 80089f2:	f7f8 f87b 	bl	8000aec <__aeabi_dcmplt>
 80089f6:	b110      	cbz	r0, 80089fe <_printf_float+0x86>
 80089f8:	232d      	movs	r3, #45	@ 0x2d
 80089fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089fe:	4a91      	ldr	r2, [pc, #580]	@ (8008c44 <_printf_float+0x2cc>)
 8008a00:	4b91      	ldr	r3, [pc, #580]	@ (8008c48 <_printf_float+0x2d0>)
 8008a02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a06:	bf94      	ite	ls
 8008a08:	4690      	movls	r8, r2
 8008a0a:	4698      	movhi	r8, r3
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	f02b 0304 	bic.w	r3, fp, #4
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	f04f 0900 	mov.w	r9, #0
 8008a1a:	9700      	str	r7, [sp, #0]
 8008a1c:	4633      	mov	r3, r6
 8008a1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a20:	4621      	mov	r1, r4
 8008a22:	4628      	mov	r0, r5
 8008a24:	f000 f9d2 	bl	8008dcc <_printf_common>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f040 808d 	bne.w	8008b48 <_printf_float+0x1d0>
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a32:	b00d      	add	sp, #52	@ 0x34
 8008a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a38:	4642      	mov	r2, r8
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	4649      	mov	r1, r9
 8008a40:	f7f8 f87c 	bl	8000b3c <__aeabi_dcmpun>
 8008a44:	b140      	cbz	r0, 8008a58 <_printf_float+0xe0>
 8008a46:	464b      	mov	r3, r9
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfbc      	itt	lt
 8008a4c:	232d      	movlt	r3, #45	@ 0x2d
 8008a4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a52:	4a7e      	ldr	r2, [pc, #504]	@ (8008c4c <_printf_float+0x2d4>)
 8008a54:	4b7e      	ldr	r3, [pc, #504]	@ (8008c50 <_printf_float+0x2d8>)
 8008a56:	e7d4      	b.n	8008a02 <_printf_float+0x8a>
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a5e:	9206      	str	r2, [sp, #24]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	d13b      	bne.n	8008adc <_printf_float+0x164>
 8008a64:	2306      	movs	r3, #6
 8008a66:	6063      	str	r3, [r4, #4]
 8008a68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	9303      	str	r3, [sp, #12]
 8008a72:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a78:	ab09      	add	r3, sp, #36	@ 0x24
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	6861      	ldr	r1, [r4, #4]
 8008a7e:	ec49 8b10 	vmov	d0, r8, r9
 8008a82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a86:	4628      	mov	r0, r5
 8008a88:	f7ff fed6 	bl	8008838 <__cvt>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a90:	2b47      	cmp	r3, #71	@ 0x47
 8008a92:	4680      	mov	r8, r0
 8008a94:	d129      	bne.n	8008aea <_printf_float+0x172>
 8008a96:	1cc8      	adds	r0, r1, #3
 8008a98:	db02      	blt.n	8008aa0 <_printf_float+0x128>
 8008a9a:	6863      	ldr	r3, [r4, #4]
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	dd41      	ble.n	8008b24 <_printf_float+0x1ac>
 8008aa0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008aa4:	fa5f fa8a 	uxtb.w	sl, sl
 8008aa8:	3901      	subs	r1, #1
 8008aaa:	4652      	mov	r2, sl
 8008aac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ab0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ab2:	f7ff ff26 	bl	8008902 <__exponent>
 8008ab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ab8:	1813      	adds	r3, r2, r0
 8008aba:	2a01      	cmp	r2, #1
 8008abc:	4681      	mov	r9, r0
 8008abe:	6123      	str	r3, [r4, #16]
 8008ac0:	dc02      	bgt.n	8008ac8 <_printf_float+0x150>
 8008ac2:	6822      	ldr	r2, [r4, #0]
 8008ac4:	07d2      	lsls	r2, r2, #31
 8008ac6:	d501      	bpl.n	8008acc <_printf_float+0x154>
 8008ac8:	3301      	adds	r3, #1
 8008aca:	6123      	str	r3, [r4, #16]
 8008acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0a2      	beq.n	8008a1a <_printf_float+0xa2>
 8008ad4:	232d      	movs	r3, #45	@ 0x2d
 8008ad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ada:	e79e      	b.n	8008a1a <_printf_float+0xa2>
 8008adc:	9a06      	ldr	r2, [sp, #24]
 8008ade:	2a47      	cmp	r2, #71	@ 0x47
 8008ae0:	d1c2      	bne.n	8008a68 <_printf_float+0xf0>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1c0      	bne.n	8008a68 <_printf_float+0xf0>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7bd      	b.n	8008a66 <_printf_float+0xee>
 8008aea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aee:	d9db      	bls.n	8008aa8 <_printf_float+0x130>
 8008af0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008af4:	d118      	bne.n	8008b28 <_printf_float+0x1b0>
 8008af6:	2900      	cmp	r1, #0
 8008af8:	6863      	ldr	r3, [r4, #4]
 8008afa:	dd0b      	ble.n	8008b14 <_printf_float+0x19c>
 8008afc:	6121      	str	r1, [r4, #16]
 8008afe:	b913      	cbnz	r3, 8008b06 <_printf_float+0x18e>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	07d0      	lsls	r0, r2, #31
 8008b04:	d502      	bpl.n	8008b0c <_printf_float+0x194>
 8008b06:	3301      	adds	r3, #1
 8008b08:	440b      	add	r3, r1
 8008b0a:	6123      	str	r3, [r4, #16]
 8008b0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b0e:	f04f 0900 	mov.w	r9, #0
 8008b12:	e7db      	b.n	8008acc <_printf_float+0x154>
 8008b14:	b913      	cbnz	r3, 8008b1c <_printf_float+0x1a4>
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	07d2      	lsls	r2, r2, #31
 8008b1a:	d501      	bpl.n	8008b20 <_printf_float+0x1a8>
 8008b1c:	3302      	adds	r3, #2
 8008b1e:	e7f4      	b.n	8008b0a <_printf_float+0x192>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e7f2      	b.n	8008b0a <_printf_float+0x192>
 8008b24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	db05      	blt.n	8008b3a <_printf_float+0x1c2>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	6121      	str	r1, [r4, #16]
 8008b32:	07d8      	lsls	r0, r3, #31
 8008b34:	d5ea      	bpl.n	8008b0c <_printf_float+0x194>
 8008b36:	1c4b      	adds	r3, r1, #1
 8008b38:	e7e7      	b.n	8008b0a <_printf_float+0x192>
 8008b3a:	2900      	cmp	r1, #0
 8008b3c:	bfd4      	ite	le
 8008b3e:	f1c1 0202 	rsble	r2, r1, #2
 8008b42:	2201      	movgt	r2, #1
 8008b44:	4413      	add	r3, r2
 8008b46:	e7e0      	b.n	8008b0a <_printf_float+0x192>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	055a      	lsls	r2, r3, #21
 8008b4c:	d407      	bmi.n	8008b5e <_printf_float+0x1e6>
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	4642      	mov	r2, r8
 8008b52:	4631      	mov	r1, r6
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b8      	blx	r7
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d12b      	bne.n	8008bb4 <_printf_float+0x23c>
 8008b5c:	e767      	b.n	8008a2e <_printf_float+0xb6>
 8008b5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b62:	f240 80dd 	bls.w	8008d20 <_printf_float+0x3a8>
 8008b66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f7f7 ffb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d033      	beq.n	8008bde <_printf_float+0x266>
 8008b76:	4a37      	ldr	r2, [pc, #220]	@ (8008c54 <_printf_float+0x2dc>)
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b8      	blx	r7
 8008b80:	3001      	adds	r0, #1
 8008b82:	f43f af54 	beq.w	8008a2e <_printf_float+0xb6>
 8008b86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b8a:	4543      	cmp	r3, r8
 8008b8c:	db02      	blt.n	8008b94 <_printf_float+0x21c>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	07d8      	lsls	r0, r3, #31
 8008b92:	d50f      	bpl.n	8008bb4 <_printf_float+0x23c>
 8008b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f43f af45 	beq.w	8008a2e <_printf_float+0xb6>
 8008ba4:	f04f 0900 	mov.w	r9, #0
 8008ba8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bac:	f104 0a1a 	add.w	sl, r4, #26
 8008bb0:	45c8      	cmp	r8, r9
 8008bb2:	dc09      	bgt.n	8008bc8 <_printf_float+0x250>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	079b      	lsls	r3, r3, #30
 8008bb8:	f100 8103 	bmi.w	8008dc2 <_printf_float+0x44a>
 8008bbc:	68e0      	ldr	r0, [r4, #12]
 8008bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bc0:	4298      	cmp	r0, r3
 8008bc2:	bfb8      	it	lt
 8008bc4:	4618      	movlt	r0, r3
 8008bc6:	e734      	b.n	8008a32 <_printf_float+0xba>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	4652      	mov	r2, sl
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f af2b 	beq.w	8008a2e <_printf_float+0xb6>
 8008bd8:	f109 0901 	add.w	r9, r9, #1
 8008bdc:	e7e8      	b.n	8008bb0 <_printf_float+0x238>
 8008bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dc39      	bgt.n	8008c58 <_printf_float+0x2e0>
 8008be4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c54 <_printf_float+0x2dc>)
 8008be6:	2301      	movs	r3, #1
 8008be8:	4631      	mov	r1, r6
 8008bea:	4628      	mov	r0, r5
 8008bec:	47b8      	blx	r7
 8008bee:	3001      	adds	r0, #1
 8008bf0:	f43f af1d 	beq.w	8008a2e <_printf_float+0xb6>
 8008bf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bf8:	ea59 0303 	orrs.w	r3, r9, r3
 8008bfc:	d102      	bne.n	8008c04 <_printf_float+0x28c>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	07d9      	lsls	r1, r3, #31
 8008c02:	d5d7      	bpl.n	8008bb4 <_printf_float+0x23c>
 8008c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f43f af0d 	beq.w	8008a2e <_printf_float+0xb6>
 8008c14:	f04f 0a00 	mov.w	sl, #0
 8008c18:	f104 0b1a 	add.w	fp, r4, #26
 8008c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1e:	425b      	negs	r3, r3
 8008c20:	4553      	cmp	r3, sl
 8008c22:	dc01      	bgt.n	8008c28 <_printf_float+0x2b0>
 8008c24:	464b      	mov	r3, r9
 8008c26:	e793      	b.n	8008b50 <_printf_float+0x1d8>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	465a      	mov	r2, fp
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b8      	blx	r7
 8008c32:	3001      	adds	r0, #1
 8008c34:	f43f aefb 	beq.w	8008a2e <_printf_float+0xb6>
 8008c38:	f10a 0a01 	add.w	sl, sl, #1
 8008c3c:	e7ee      	b.n	8008c1c <_printf_float+0x2a4>
 8008c3e:	bf00      	nop
 8008c40:	7fefffff 	.word	0x7fefffff
 8008c44:	0800b628 	.word	0x0800b628
 8008c48:	0800b62c 	.word	0x0800b62c
 8008c4c:	0800b630 	.word	0x0800b630
 8008c50:	0800b634 	.word	0x0800b634
 8008c54:	0800b638 	.word	0x0800b638
 8008c58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c5e:	4553      	cmp	r3, sl
 8008c60:	bfa8      	it	ge
 8008c62:	4653      	movge	r3, sl
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	4699      	mov	r9, r3
 8008c68:	dc36      	bgt.n	8008cd8 <_printf_float+0x360>
 8008c6a:	f04f 0b00 	mov.w	fp, #0
 8008c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c72:	f104 021a 	add.w	r2, r4, #26
 8008c76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c78:	9306      	str	r3, [sp, #24]
 8008c7a:	eba3 0309 	sub.w	r3, r3, r9
 8008c7e:	455b      	cmp	r3, fp
 8008c80:	dc31      	bgt.n	8008ce6 <_printf_float+0x36e>
 8008c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c84:	459a      	cmp	sl, r3
 8008c86:	dc3a      	bgt.n	8008cfe <_printf_float+0x386>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	07da      	lsls	r2, r3, #31
 8008c8c:	d437      	bmi.n	8008cfe <_printf_float+0x386>
 8008c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c90:	ebaa 0903 	sub.w	r9, sl, r3
 8008c94:	9b06      	ldr	r3, [sp, #24]
 8008c96:	ebaa 0303 	sub.w	r3, sl, r3
 8008c9a:	4599      	cmp	r9, r3
 8008c9c:	bfa8      	it	ge
 8008c9e:	4699      	movge	r9, r3
 8008ca0:	f1b9 0f00 	cmp.w	r9, #0
 8008ca4:	dc33      	bgt.n	8008d0e <_printf_float+0x396>
 8008ca6:	f04f 0800 	mov.w	r8, #0
 8008caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cae:	f104 0b1a 	add.w	fp, r4, #26
 8008cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8008cb8:	eba3 0309 	sub.w	r3, r3, r9
 8008cbc:	4543      	cmp	r3, r8
 8008cbe:	f77f af79 	ble.w	8008bb4 <_printf_float+0x23c>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	465a      	mov	r2, fp
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f43f aeae 	beq.w	8008a2e <_printf_float+0xb6>
 8008cd2:	f108 0801 	add.w	r8, r8, #1
 8008cd6:	e7ec      	b.n	8008cb2 <_printf_float+0x33a>
 8008cd8:	4642      	mov	r2, r8
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d1c2      	bne.n	8008c6a <_printf_float+0x2f2>
 8008ce4:	e6a3      	b.n	8008a2e <_printf_float+0xb6>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	9206      	str	r2, [sp, #24]
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	f43f ae9c 	beq.w	8008a2e <_printf_float+0xb6>
 8008cf6:	9a06      	ldr	r2, [sp, #24]
 8008cf8:	f10b 0b01 	add.w	fp, fp, #1
 8008cfc:	e7bb      	b.n	8008c76 <_printf_float+0x2fe>
 8008cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d1c0      	bne.n	8008c8e <_printf_float+0x316>
 8008d0c:	e68f      	b.n	8008a2e <_printf_float+0xb6>
 8008d0e:	9a06      	ldr	r2, [sp, #24]
 8008d10:	464b      	mov	r3, r9
 8008d12:	4442      	add	r2, r8
 8008d14:	4631      	mov	r1, r6
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d1c3      	bne.n	8008ca6 <_printf_float+0x32e>
 8008d1e:	e686      	b.n	8008a2e <_printf_float+0xb6>
 8008d20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d24:	f1ba 0f01 	cmp.w	sl, #1
 8008d28:	dc01      	bgt.n	8008d2e <_printf_float+0x3b6>
 8008d2a:	07db      	lsls	r3, r3, #31
 8008d2c:	d536      	bpl.n	8008d9c <_printf_float+0x424>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	4642      	mov	r2, r8
 8008d32:	4631      	mov	r1, r6
 8008d34:	4628      	mov	r0, r5
 8008d36:	47b8      	blx	r7
 8008d38:	3001      	adds	r0, #1
 8008d3a:	f43f ae78 	beq.w	8008a2e <_printf_float+0xb6>
 8008d3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f ae70 	beq.w	8008a2e <_printf_float+0xb6>
 8008d4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d52:	2200      	movs	r2, #0
 8008d54:	2300      	movs	r3, #0
 8008d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d5a:	f7f7 febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d5e:	b9c0      	cbnz	r0, 8008d92 <_printf_float+0x41a>
 8008d60:	4653      	mov	r3, sl
 8008d62:	f108 0201 	add.w	r2, r8, #1
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	47b8      	blx	r7
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d10c      	bne.n	8008d8a <_printf_float+0x412>
 8008d70:	e65d      	b.n	8008a2e <_printf_float+0xb6>
 8008d72:	2301      	movs	r3, #1
 8008d74:	465a      	mov	r2, fp
 8008d76:	4631      	mov	r1, r6
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47b8      	blx	r7
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f43f ae56 	beq.w	8008a2e <_printf_float+0xb6>
 8008d82:	f108 0801 	add.w	r8, r8, #1
 8008d86:	45d0      	cmp	r8, sl
 8008d88:	dbf3      	blt.n	8008d72 <_printf_float+0x3fa>
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d90:	e6df      	b.n	8008b52 <_printf_float+0x1da>
 8008d92:	f04f 0800 	mov.w	r8, #0
 8008d96:	f104 0b1a 	add.w	fp, r4, #26
 8008d9a:	e7f4      	b.n	8008d86 <_printf_float+0x40e>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4642      	mov	r2, r8
 8008da0:	e7e1      	b.n	8008d66 <_printf_float+0x3ee>
 8008da2:	2301      	movs	r3, #1
 8008da4:	464a      	mov	r2, r9
 8008da6:	4631      	mov	r1, r6
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b8      	blx	r7
 8008dac:	3001      	adds	r0, #1
 8008dae:	f43f ae3e 	beq.w	8008a2e <_printf_float+0xb6>
 8008db2:	f108 0801 	add.w	r8, r8, #1
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	4543      	cmp	r3, r8
 8008dbe:	dcf0      	bgt.n	8008da2 <_printf_float+0x42a>
 8008dc0:	e6fc      	b.n	8008bbc <_printf_float+0x244>
 8008dc2:	f04f 0800 	mov.w	r8, #0
 8008dc6:	f104 0919 	add.w	r9, r4, #25
 8008dca:	e7f4      	b.n	8008db6 <_printf_float+0x43e>

08008dcc <_printf_common>:
 8008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	4698      	mov	r8, r3
 8008dd4:	688a      	ldr	r2, [r1, #8]
 8008dd6:	690b      	ldr	r3, [r1, #16]
 8008dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bfb8      	it	lt
 8008de0:	4613      	movlt	r3, r2
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008de8:	4607      	mov	r7, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b10a      	cbz	r2, 8008df2 <_printf_common+0x26>
 8008dee:	3301      	adds	r3, #1
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	0699      	lsls	r1, r3, #26
 8008df6:	bf42      	ittt	mi
 8008df8:	6833      	ldrmi	r3, [r6, #0]
 8008dfa:	3302      	addmi	r3, #2
 8008dfc:	6033      	strmi	r3, [r6, #0]
 8008dfe:	6825      	ldr	r5, [r4, #0]
 8008e00:	f015 0506 	ands.w	r5, r5, #6
 8008e04:	d106      	bne.n	8008e14 <_printf_common+0x48>
 8008e06:	f104 0a19 	add.w	sl, r4, #25
 8008e0a:	68e3      	ldr	r3, [r4, #12]
 8008e0c:	6832      	ldr	r2, [r6, #0]
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc26      	bgt.n	8008e62 <_printf_common+0x96>
 8008e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e18:	6822      	ldr	r2, [r4, #0]
 8008e1a:	3b00      	subs	r3, #0
 8008e1c:	bf18      	it	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	0692      	lsls	r2, r2, #26
 8008e22:	d42b      	bmi.n	8008e7c <_printf_common+0xb0>
 8008e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e28:	4641      	mov	r1, r8
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c8      	blx	r9
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d01e      	beq.n	8008e70 <_printf_common+0xa4>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	6922      	ldr	r2, [r4, #16]
 8008e36:	f003 0306 	and.w	r3, r3, #6
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	bf02      	ittt	eq
 8008e3e:	68e5      	ldreq	r5, [r4, #12]
 8008e40:	6833      	ldreq	r3, [r6, #0]
 8008e42:	1aed      	subeq	r5, r5, r3
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	bf0c      	ite	eq
 8008e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e4c:	2500      	movne	r5, #0
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	bfc4      	itt	gt
 8008e52:	1a9b      	subgt	r3, r3, r2
 8008e54:	18ed      	addgt	r5, r5, r3
 8008e56:	2600      	movs	r6, #0
 8008e58:	341a      	adds	r4, #26
 8008e5a:	42b5      	cmp	r5, r6
 8008e5c:	d11a      	bne.n	8008e94 <_printf_common+0xc8>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e008      	b.n	8008e74 <_printf_common+0xa8>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4652      	mov	r2, sl
 8008e66:	4641      	mov	r1, r8
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c8      	blx	r9
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d103      	bne.n	8008e78 <_printf_common+0xac>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	3501      	adds	r5, #1
 8008e7a:	e7c6      	b.n	8008e0a <_printf_common+0x3e>
 8008e7c:	18e1      	adds	r1, r4, r3
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	2030      	movs	r0, #48	@ 0x30
 8008e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e86:	4422      	add	r2, r4
 8008e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e90:	3302      	adds	r3, #2
 8008e92:	e7c7      	b.n	8008e24 <_printf_common+0x58>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4622      	mov	r2, r4
 8008e98:	4641      	mov	r1, r8
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c8      	blx	r9
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d0e6      	beq.n	8008e70 <_printf_common+0xa4>
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7d9      	b.n	8008e5a <_printf_common+0x8e>
	...

08008ea8 <_printf_i>:
 8008ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	7e0f      	ldrb	r7, [r1, #24]
 8008eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eb0:	2f78      	cmp	r7, #120	@ 0x78
 8008eb2:	4691      	mov	r9, r2
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ebe:	d807      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ec0:	2f62      	cmp	r7, #98	@ 0x62
 8008ec2:	d80a      	bhi.n	8008eda <_printf_i+0x32>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	f000 80d2 	beq.w	800906e <_printf_i+0x1c6>
 8008eca:	2f58      	cmp	r7, #88	@ 0x58
 8008ecc:	f000 80b9 	beq.w	8009042 <_printf_i+0x19a>
 8008ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ed8:	e03a      	b.n	8008f50 <_printf_i+0xa8>
 8008eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ede:	2b15      	cmp	r3, #21
 8008ee0:	d8f6      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ee8 <_printf_i+0x40>)
 8008ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008ed1 	.word	0x08008ed1
 8008ef4:	08008ed1 	.word	0x08008ed1
 8008ef8:	08008ed1 	.word	0x08008ed1
 8008efc:	08008ed1 	.word	0x08008ed1
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008ed1 	.word	0x08008ed1
 8008f08:	08008ed1 	.word	0x08008ed1
 8008f0c:	08008ed1 	.word	0x08008ed1
 8008f10:	08008ed1 	.word	0x08008ed1
 8008f14:	08009055 	.word	0x08009055
 8008f18:	08008f7f 	.word	0x08008f7f
 8008f1c:	0800900f 	.word	0x0800900f
 8008f20:	08008ed1 	.word	0x08008ed1
 8008f24:	08008ed1 	.word	0x08008ed1
 8008f28:	08009077 	.word	0x08009077
 8008f2c:	08008ed1 	.word	0x08008ed1
 8008f30:	08008f7f 	.word	0x08008f7f
 8008f34:	08008ed1 	.word	0x08008ed1
 8008f38:	08008ed1 	.word	0x08008ed1
 8008f3c:	08009017 	.word	0x08009017
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6032      	str	r2, [r6, #0]
 8008f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f50:	2301      	movs	r3, #1
 8008f52:	e09d      	b.n	8009090 <_printf_i+0x1e8>
 8008f54:	6833      	ldr	r3, [r6, #0]
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	1d19      	adds	r1, r3, #4
 8008f5a:	6031      	str	r1, [r6, #0]
 8008f5c:	0606      	lsls	r6, r0, #24
 8008f5e:	d501      	bpl.n	8008f64 <_printf_i+0xbc>
 8008f60:	681d      	ldr	r5, [r3, #0]
 8008f62:	e003      	b.n	8008f6c <_printf_i+0xc4>
 8008f64:	0645      	lsls	r5, r0, #25
 8008f66:	d5fb      	bpl.n	8008f60 <_printf_i+0xb8>
 8008f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	da03      	bge.n	8008f78 <_printf_i+0xd0>
 8008f70:	232d      	movs	r3, #45	@ 0x2d
 8008f72:	426d      	negs	r5, r5
 8008f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f78:	4859      	ldr	r0, [pc, #356]	@ (80090e0 <_printf_i+0x238>)
 8008f7a:	230a      	movs	r3, #10
 8008f7c:	e011      	b.n	8008fa2 <_printf_i+0xfa>
 8008f7e:	6821      	ldr	r1, [r4, #0]
 8008f80:	6833      	ldr	r3, [r6, #0]
 8008f82:	0608      	lsls	r0, r1, #24
 8008f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f88:	d402      	bmi.n	8008f90 <_printf_i+0xe8>
 8008f8a:	0649      	lsls	r1, r1, #25
 8008f8c:	bf48      	it	mi
 8008f8e:	b2ad      	uxthmi	r5, r5
 8008f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f92:	4853      	ldr	r0, [pc, #332]	@ (80090e0 <_printf_i+0x238>)
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	bf14      	ite	ne
 8008f98:	230a      	movne	r3, #10
 8008f9a:	2308      	moveq	r3, #8
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fa2:	6866      	ldr	r6, [r4, #4]
 8008fa4:	60a6      	str	r6, [r4, #8]
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	bfa2      	ittt	ge
 8008faa:	6821      	ldrge	r1, [r4, #0]
 8008fac:	f021 0104 	bicge.w	r1, r1, #4
 8008fb0:	6021      	strge	r1, [r4, #0]
 8008fb2:	b90d      	cbnz	r5, 8008fb8 <_printf_i+0x110>
 8008fb4:	2e00      	cmp	r6, #0
 8008fb6:	d04b      	beq.n	8009050 <_printf_i+0x1a8>
 8008fb8:	4616      	mov	r6, r2
 8008fba:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fbe:	fb03 5711 	mls	r7, r3, r1, r5
 8008fc2:	5dc7      	ldrb	r7, [r0, r7]
 8008fc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fc8:	462f      	mov	r7, r5
 8008fca:	42bb      	cmp	r3, r7
 8008fcc:	460d      	mov	r5, r1
 8008fce:	d9f4      	bls.n	8008fba <_printf_i+0x112>
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d10b      	bne.n	8008fec <_printf_i+0x144>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	07df      	lsls	r7, r3, #31
 8008fd8:	d508      	bpl.n	8008fec <_printf_i+0x144>
 8008fda:	6923      	ldr	r3, [r4, #16]
 8008fdc:	6861      	ldr	r1, [r4, #4]
 8008fde:	4299      	cmp	r1, r3
 8008fe0:	bfde      	ittt	le
 8008fe2:	2330      	movle	r3, #48	@ 0x30
 8008fe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fec:	1b92      	subs	r2, r2, r6
 8008fee:	6122      	str	r2, [r4, #16]
 8008ff0:	f8cd a000 	str.w	sl, [sp]
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	aa03      	add	r2, sp, #12
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	f7ff fee6 	bl	8008dcc <_printf_common>
 8009000:	3001      	adds	r0, #1
 8009002:	d14a      	bne.n	800909a <_printf_i+0x1f2>
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	b004      	add	sp, #16
 800900a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f043 0320 	orr.w	r3, r3, #32
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	4833      	ldr	r0, [pc, #204]	@ (80090e4 <_printf_i+0x23c>)
 8009018:	2778      	movs	r7, #120	@ 0x78
 800901a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	6831      	ldr	r1, [r6, #0]
 8009022:	061f      	lsls	r7, r3, #24
 8009024:	f851 5b04 	ldr.w	r5, [r1], #4
 8009028:	d402      	bmi.n	8009030 <_printf_i+0x188>
 800902a:	065f      	lsls	r7, r3, #25
 800902c:	bf48      	it	mi
 800902e:	b2ad      	uxthmi	r5, r5
 8009030:	6031      	str	r1, [r6, #0]
 8009032:	07d9      	lsls	r1, r3, #31
 8009034:	bf44      	itt	mi
 8009036:	f043 0320 	orrmi.w	r3, r3, #32
 800903a:	6023      	strmi	r3, [r4, #0]
 800903c:	b11d      	cbz	r5, 8009046 <_printf_i+0x19e>
 800903e:	2310      	movs	r3, #16
 8009040:	e7ac      	b.n	8008f9c <_printf_i+0xf4>
 8009042:	4827      	ldr	r0, [pc, #156]	@ (80090e0 <_printf_i+0x238>)
 8009044:	e7e9      	b.n	800901a <_printf_i+0x172>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	f023 0320 	bic.w	r3, r3, #32
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	e7f6      	b.n	800903e <_printf_i+0x196>
 8009050:	4616      	mov	r6, r2
 8009052:	e7bd      	b.n	8008fd0 <_printf_i+0x128>
 8009054:	6833      	ldr	r3, [r6, #0]
 8009056:	6825      	ldr	r5, [r4, #0]
 8009058:	6961      	ldr	r1, [r4, #20]
 800905a:	1d18      	adds	r0, r3, #4
 800905c:	6030      	str	r0, [r6, #0]
 800905e:	062e      	lsls	r6, r5, #24
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	d501      	bpl.n	8009068 <_printf_i+0x1c0>
 8009064:	6019      	str	r1, [r3, #0]
 8009066:	e002      	b.n	800906e <_printf_i+0x1c6>
 8009068:	0668      	lsls	r0, r5, #25
 800906a:	d5fb      	bpl.n	8009064 <_printf_i+0x1bc>
 800906c:	8019      	strh	r1, [r3, #0]
 800906e:	2300      	movs	r3, #0
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	4616      	mov	r6, r2
 8009074:	e7bc      	b.n	8008ff0 <_printf_i+0x148>
 8009076:	6833      	ldr	r3, [r6, #0]
 8009078:	1d1a      	adds	r2, r3, #4
 800907a:	6032      	str	r2, [r6, #0]
 800907c:	681e      	ldr	r6, [r3, #0]
 800907e:	6862      	ldr	r2, [r4, #4]
 8009080:	2100      	movs	r1, #0
 8009082:	4630      	mov	r0, r6
 8009084:	f7f7 f8ac 	bl	80001e0 <memchr>
 8009088:	b108      	cbz	r0, 800908e <_printf_i+0x1e6>
 800908a:	1b80      	subs	r0, r0, r6
 800908c:	6060      	str	r0, [r4, #4]
 800908e:	6863      	ldr	r3, [r4, #4]
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	2300      	movs	r3, #0
 8009094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009098:	e7aa      	b.n	8008ff0 <_printf_i+0x148>
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	4632      	mov	r2, r6
 800909e:	4649      	mov	r1, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	47d0      	blx	sl
 80090a4:	3001      	adds	r0, #1
 80090a6:	d0ad      	beq.n	8009004 <_printf_i+0x15c>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	079b      	lsls	r3, r3, #30
 80090ac:	d413      	bmi.n	80090d6 <_printf_i+0x22e>
 80090ae:	68e0      	ldr	r0, [r4, #12]
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	4298      	cmp	r0, r3
 80090b4:	bfb8      	it	lt
 80090b6:	4618      	movlt	r0, r3
 80090b8:	e7a6      	b.n	8009008 <_printf_i+0x160>
 80090ba:	2301      	movs	r3, #1
 80090bc:	4632      	mov	r2, r6
 80090be:	4649      	mov	r1, r9
 80090c0:	4640      	mov	r0, r8
 80090c2:	47d0      	blx	sl
 80090c4:	3001      	adds	r0, #1
 80090c6:	d09d      	beq.n	8009004 <_printf_i+0x15c>
 80090c8:	3501      	adds	r5, #1
 80090ca:	68e3      	ldr	r3, [r4, #12]
 80090cc:	9903      	ldr	r1, [sp, #12]
 80090ce:	1a5b      	subs	r3, r3, r1
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	dcf2      	bgt.n	80090ba <_printf_i+0x212>
 80090d4:	e7eb      	b.n	80090ae <_printf_i+0x206>
 80090d6:	2500      	movs	r5, #0
 80090d8:	f104 0619 	add.w	r6, r4, #25
 80090dc:	e7f5      	b.n	80090ca <_printf_i+0x222>
 80090de:	bf00      	nop
 80090e0:	0800b63a 	.word	0x0800b63a
 80090e4:	0800b64b 	.word	0x0800b64b

080090e8 <std>:
 80090e8:	2300      	movs	r3, #0
 80090ea:	b510      	push	{r4, lr}
 80090ec:	4604      	mov	r4, r0
 80090ee:	e9c0 3300 	strd	r3, r3, [r0]
 80090f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090f6:	6083      	str	r3, [r0, #8]
 80090f8:	8181      	strh	r1, [r0, #12]
 80090fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80090fc:	81c2      	strh	r2, [r0, #14]
 80090fe:	6183      	str	r3, [r0, #24]
 8009100:	4619      	mov	r1, r3
 8009102:	2208      	movs	r2, #8
 8009104:	305c      	adds	r0, #92	@ 0x5c
 8009106:	f000 f928 	bl	800935a <memset>
 800910a:	4b0d      	ldr	r3, [pc, #52]	@ (8009140 <std+0x58>)
 800910c:	6263      	str	r3, [r4, #36]	@ 0x24
 800910e:	4b0d      	ldr	r3, [pc, #52]	@ (8009144 <std+0x5c>)
 8009110:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009112:	4b0d      	ldr	r3, [pc, #52]	@ (8009148 <std+0x60>)
 8009114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009116:	4b0d      	ldr	r3, [pc, #52]	@ (800914c <std+0x64>)
 8009118:	6323      	str	r3, [r4, #48]	@ 0x30
 800911a:	4b0d      	ldr	r3, [pc, #52]	@ (8009150 <std+0x68>)
 800911c:	6224      	str	r4, [r4, #32]
 800911e:	429c      	cmp	r4, r3
 8009120:	d006      	beq.n	8009130 <std+0x48>
 8009122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009126:	4294      	cmp	r4, r2
 8009128:	d002      	beq.n	8009130 <std+0x48>
 800912a:	33d0      	adds	r3, #208	@ 0xd0
 800912c:	429c      	cmp	r4, r3
 800912e:	d105      	bne.n	800913c <std+0x54>
 8009130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009138:	f000 b98c 	b.w	8009454 <__retarget_lock_init_recursive>
 800913c:	bd10      	pop	{r4, pc}
 800913e:	bf00      	nop
 8009140:	080092d5 	.word	0x080092d5
 8009144:	080092f7 	.word	0x080092f7
 8009148:	0800932f 	.word	0x0800932f
 800914c:	08009353 	.word	0x08009353
 8009150:	200005e8 	.word	0x200005e8

08009154 <stdio_exit_handler>:
 8009154:	4a02      	ldr	r2, [pc, #8]	@ (8009160 <stdio_exit_handler+0xc>)
 8009156:	4903      	ldr	r1, [pc, #12]	@ (8009164 <stdio_exit_handler+0x10>)
 8009158:	4803      	ldr	r0, [pc, #12]	@ (8009168 <stdio_exit_handler+0x14>)
 800915a:	f000 b869 	b.w	8009230 <_fwalk_sglue>
 800915e:	bf00      	nop
 8009160:	20000010 	.word	0x20000010
 8009164:	0800adb5 	.word	0x0800adb5
 8009168:	20000020 	.word	0x20000020

0800916c <cleanup_stdio>:
 800916c:	6841      	ldr	r1, [r0, #4]
 800916e:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <cleanup_stdio+0x34>)
 8009170:	4299      	cmp	r1, r3
 8009172:	b510      	push	{r4, lr}
 8009174:	4604      	mov	r4, r0
 8009176:	d001      	beq.n	800917c <cleanup_stdio+0x10>
 8009178:	f001 fe1c 	bl	800adb4 <_fflush_r>
 800917c:	68a1      	ldr	r1, [r4, #8]
 800917e:	4b09      	ldr	r3, [pc, #36]	@ (80091a4 <cleanup_stdio+0x38>)
 8009180:	4299      	cmp	r1, r3
 8009182:	d002      	beq.n	800918a <cleanup_stdio+0x1e>
 8009184:	4620      	mov	r0, r4
 8009186:	f001 fe15 	bl	800adb4 <_fflush_r>
 800918a:	68e1      	ldr	r1, [r4, #12]
 800918c:	4b06      	ldr	r3, [pc, #24]	@ (80091a8 <cleanup_stdio+0x3c>)
 800918e:	4299      	cmp	r1, r3
 8009190:	d004      	beq.n	800919c <cleanup_stdio+0x30>
 8009192:	4620      	mov	r0, r4
 8009194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009198:	f001 be0c 	b.w	800adb4 <_fflush_r>
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	200005e8 	.word	0x200005e8
 80091a4:	20000650 	.word	0x20000650
 80091a8:	200006b8 	.word	0x200006b8

080091ac <global_stdio_init.part.0>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	4b0b      	ldr	r3, [pc, #44]	@ (80091dc <global_stdio_init.part.0+0x30>)
 80091b0:	4c0b      	ldr	r4, [pc, #44]	@ (80091e0 <global_stdio_init.part.0+0x34>)
 80091b2:	4a0c      	ldr	r2, [pc, #48]	@ (80091e4 <global_stdio_init.part.0+0x38>)
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	4620      	mov	r0, r4
 80091b8:	2200      	movs	r2, #0
 80091ba:	2104      	movs	r1, #4
 80091bc:	f7ff ff94 	bl	80090e8 <std>
 80091c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091c4:	2201      	movs	r2, #1
 80091c6:	2109      	movs	r1, #9
 80091c8:	f7ff ff8e 	bl	80090e8 <std>
 80091cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091d0:	2202      	movs	r2, #2
 80091d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091d6:	2112      	movs	r1, #18
 80091d8:	f7ff bf86 	b.w	80090e8 <std>
 80091dc:	20000720 	.word	0x20000720
 80091e0:	200005e8 	.word	0x200005e8
 80091e4:	08009155 	.word	0x08009155

080091e8 <__sfp_lock_acquire>:
 80091e8:	4801      	ldr	r0, [pc, #4]	@ (80091f0 <__sfp_lock_acquire+0x8>)
 80091ea:	f000 b934 	b.w	8009456 <__retarget_lock_acquire_recursive>
 80091ee:	bf00      	nop
 80091f0:	20000729 	.word	0x20000729

080091f4 <__sfp_lock_release>:
 80091f4:	4801      	ldr	r0, [pc, #4]	@ (80091fc <__sfp_lock_release+0x8>)
 80091f6:	f000 b92f 	b.w	8009458 <__retarget_lock_release_recursive>
 80091fa:	bf00      	nop
 80091fc:	20000729 	.word	0x20000729

08009200 <__sinit>:
 8009200:	b510      	push	{r4, lr}
 8009202:	4604      	mov	r4, r0
 8009204:	f7ff fff0 	bl	80091e8 <__sfp_lock_acquire>
 8009208:	6a23      	ldr	r3, [r4, #32]
 800920a:	b11b      	cbz	r3, 8009214 <__sinit+0x14>
 800920c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009210:	f7ff bff0 	b.w	80091f4 <__sfp_lock_release>
 8009214:	4b04      	ldr	r3, [pc, #16]	@ (8009228 <__sinit+0x28>)
 8009216:	6223      	str	r3, [r4, #32]
 8009218:	4b04      	ldr	r3, [pc, #16]	@ (800922c <__sinit+0x2c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1f5      	bne.n	800920c <__sinit+0xc>
 8009220:	f7ff ffc4 	bl	80091ac <global_stdio_init.part.0>
 8009224:	e7f2      	b.n	800920c <__sinit+0xc>
 8009226:	bf00      	nop
 8009228:	0800916d 	.word	0x0800916d
 800922c:	20000720 	.word	0x20000720

08009230 <_fwalk_sglue>:
 8009230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009234:	4607      	mov	r7, r0
 8009236:	4688      	mov	r8, r1
 8009238:	4614      	mov	r4, r2
 800923a:	2600      	movs	r6, #0
 800923c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009240:	f1b9 0901 	subs.w	r9, r9, #1
 8009244:	d505      	bpl.n	8009252 <_fwalk_sglue+0x22>
 8009246:	6824      	ldr	r4, [r4, #0]
 8009248:	2c00      	cmp	r4, #0
 800924a:	d1f7      	bne.n	800923c <_fwalk_sglue+0xc>
 800924c:	4630      	mov	r0, r6
 800924e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d907      	bls.n	8009268 <_fwalk_sglue+0x38>
 8009258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800925c:	3301      	adds	r3, #1
 800925e:	d003      	beq.n	8009268 <_fwalk_sglue+0x38>
 8009260:	4629      	mov	r1, r5
 8009262:	4638      	mov	r0, r7
 8009264:	47c0      	blx	r8
 8009266:	4306      	orrs	r6, r0
 8009268:	3568      	adds	r5, #104	@ 0x68
 800926a:	e7e9      	b.n	8009240 <_fwalk_sglue+0x10>

0800926c <sniprintf>:
 800926c:	b40c      	push	{r2, r3}
 800926e:	b530      	push	{r4, r5, lr}
 8009270:	4b17      	ldr	r3, [pc, #92]	@ (80092d0 <sniprintf+0x64>)
 8009272:	1e0c      	subs	r4, r1, #0
 8009274:	681d      	ldr	r5, [r3, #0]
 8009276:	b09d      	sub	sp, #116	@ 0x74
 8009278:	da08      	bge.n	800928c <sniprintf+0x20>
 800927a:	238b      	movs	r3, #139	@ 0x8b
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	f04f 30ff 	mov.w	r0, #4294967295
 8009282:	b01d      	add	sp, #116	@ 0x74
 8009284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009288:	b002      	add	sp, #8
 800928a:	4770      	bx	lr
 800928c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009290:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009294:	bf14      	ite	ne
 8009296:	f104 33ff 	addne.w	r3, r4, #4294967295
 800929a:	4623      	moveq	r3, r4
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092a4:	9002      	str	r0, [sp, #8]
 80092a6:	9006      	str	r0, [sp, #24]
 80092a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092ae:	ab21      	add	r3, sp, #132	@ 0x84
 80092b0:	a902      	add	r1, sp, #8
 80092b2:	4628      	mov	r0, r5
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	f001 fbfd 	bl	800aab4 <_svfiprintf_r>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	bfbc      	itt	lt
 80092be:	238b      	movlt	r3, #139	@ 0x8b
 80092c0:	602b      	strlt	r3, [r5, #0]
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d0dd      	beq.n	8009282 <sniprintf+0x16>
 80092c6:	9b02      	ldr	r3, [sp, #8]
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e7d9      	b.n	8009282 <sniprintf+0x16>
 80092ce:	bf00      	nop
 80092d0:	2000001c 	.word	0x2000001c

080092d4 <__sread>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	460c      	mov	r4, r1
 80092d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092dc:	f000 f86c 	bl	80093b8 <_read_r>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	bfab      	itete	ge
 80092e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092e6:	89a3      	ldrhlt	r3, [r4, #12]
 80092e8:	181b      	addge	r3, r3, r0
 80092ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092ee:	bfac      	ite	ge
 80092f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092f2:	81a3      	strhlt	r3, [r4, #12]
 80092f4:	bd10      	pop	{r4, pc}

080092f6 <__swrite>:
 80092f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fa:	461f      	mov	r7, r3
 80092fc:	898b      	ldrh	r3, [r1, #12]
 80092fe:	05db      	lsls	r3, r3, #23
 8009300:	4605      	mov	r5, r0
 8009302:	460c      	mov	r4, r1
 8009304:	4616      	mov	r6, r2
 8009306:	d505      	bpl.n	8009314 <__swrite+0x1e>
 8009308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800930c:	2302      	movs	r3, #2
 800930e:	2200      	movs	r2, #0
 8009310:	f000 f840 	bl	8009394 <_lseek_r>
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800931a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800931e:	81a3      	strh	r3, [r4, #12]
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	4628      	mov	r0, r5
 8009326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	f000 b857 	b.w	80093dc <_write_r>

0800932e <__sseek>:
 800932e:	b510      	push	{r4, lr}
 8009330:	460c      	mov	r4, r1
 8009332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009336:	f000 f82d 	bl	8009394 <_lseek_r>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	bf15      	itete	ne
 8009340:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009342:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009346:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800934a:	81a3      	strheq	r3, [r4, #12]
 800934c:	bf18      	it	ne
 800934e:	81a3      	strhne	r3, [r4, #12]
 8009350:	bd10      	pop	{r4, pc}

08009352 <__sclose>:
 8009352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009356:	f000 b80d 	b.w	8009374 <_close_r>

0800935a <memset>:
 800935a:	4402      	add	r2, r0
 800935c:	4603      	mov	r3, r0
 800935e:	4293      	cmp	r3, r2
 8009360:	d100      	bne.n	8009364 <memset+0xa>
 8009362:	4770      	bx	lr
 8009364:	f803 1b01 	strb.w	r1, [r3], #1
 8009368:	e7f9      	b.n	800935e <memset+0x4>
	...

0800936c <_localeconv_r>:
 800936c:	4800      	ldr	r0, [pc, #0]	@ (8009370 <_localeconv_r+0x4>)
 800936e:	4770      	bx	lr
 8009370:	2000015c 	.word	0x2000015c

08009374 <_close_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d06      	ldr	r5, [pc, #24]	@ (8009390 <_close_r+0x1c>)
 8009378:	2300      	movs	r3, #0
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7f8 fd4c 	bl	8001e1c <_close>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_close_r+0x1a>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_close_r+0x1a>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20000724 	.word	0x20000724

08009394 <_lseek_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_lseek_r+0x20>)
 8009398:	4604      	mov	r4, r0
 800939a:	4608      	mov	r0, r1
 800939c:	4611      	mov	r1, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	602a      	str	r2, [r5, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f7f8 fd61 	bl	8001e6a <_lseek>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_lseek_r+0x1e>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_lseek_r+0x1e>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	20000724 	.word	0x20000724

080093b8 <_read_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d07      	ldr	r5, [pc, #28]	@ (80093d8 <_read_r+0x20>)
 80093bc:	4604      	mov	r4, r0
 80093be:	4608      	mov	r0, r1
 80093c0:	4611      	mov	r1, r2
 80093c2:	2200      	movs	r2, #0
 80093c4:	602a      	str	r2, [r5, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f7f8 fcef 	bl	8001daa <_read>
 80093cc:	1c43      	adds	r3, r0, #1
 80093ce:	d102      	bne.n	80093d6 <_read_r+0x1e>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	b103      	cbz	r3, 80093d6 <_read_r+0x1e>
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	20000724 	.word	0x20000724

080093dc <_write_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4d07      	ldr	r5, [pc, #28]	@ (80093fc <_write_r+0x20>)
 80093e0:	4604      	mov	r4, r0
 80093e2:	4608      	mov	r0, r1
 80093e4:	4611      	mov	r1, r2
 80093e6:	2200      	movs	r2, #0
 80093e8:	602a      	str	r2, [r5, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	f7f8 fcfa 	bl	8001de4 <_write>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_write_r+0x1e>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_write_r+0x1e>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20000724 	.word	0x20000724

08009400 <__errno>:
 8009400:	4b01      	ldr	r3, [pc, #4]	@ (8009408 <__errno+0x8>)
 8009402:	6818      	ldr	r0, [r3, #0]
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	2000001c 	.word	0x2000001c

0800940c <__libc_init_array>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	4d0d      	ldr	r5, [pc, #52]	@ (8009444 <__libc_init_array+0x38>)
 8009410:	4c0d      	ldr	r4, [pc, #52]	@ (8009448 <__libc_init_array+0x3c>)
 8009412:	1b64      	subs	r4, r4, r5
 8009414:	10a4      	asrs	r4, r4, #2
 8009416:	2600      	movs	r6, #0
 8009418:	42a6      	cmp	r6, r4
 800941a:	d109      	bne.n	8009430 <__libc_init_array+0x24>
 800941c:	4d0b      	ldr	r5, [pc, #44]	@ (800944c <__libc_init_array+0x40>)
 800941e:	4c0c      	ldr	r4, [pc, #48]	@ (8009450 <__libc_init_array+0x44>)
 8009420:	f002 f866 	bl	800b4f0 <_init>
 8009424:	1b64      	subs	r4, r4, r5
 8009426:	10a4      	asrs	r4, r4, #2
 8009428:	2600      	movs	r6, #0
 800942a:	42a6      	cmp	r6, r4
 800942c:	d105      	bne.n	800943a <__libc_init_array+0x2e>
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	f855 3b04 	ldr.w	r3, [r5], #4
 8009434:	4798      	blx	r3
 8009436:	3601      	adds	r6, #1
 8009438:	e7ee      	b.n	8009418 <__libc_init_array+0xc>
 800943a:	f855 3b04 	ldr.w	r3, [r5], #4
 800943e:	4798      	blx	r3
 8009440:	3601      	adds	r6, #1
 8009442:	e7f2      	b.n	800942a <__libc_init_array+0x1e>
 8009444:	0800b9a0 	.word	0x0800b9a0
 8009448:	0800b9a0 	.word	0x0800b9a0
 800944c:	0800b9a0 	.word	0x0800b9a0
 8009450:	0800b9a4 	.word	0x0800b9a4

08009454 <__retarget_lock_init_recursive>:
 8009454:	4770      	bx	lr

08009456 <__retarget_lock_acquire_recursive>:
 8009456:	4770      	bx	lr

08009458 <__retarget_lock_release_recursive>:
 8009458:	4770      	bx	lr

0800945a <quorem>:
 800945a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945e:	6903      	ldr	r3, [r0, #16]
 8009460:	690c      	ldr	r4, [r1, #16]
 8009462:	42a3      	cmp	r3, r4
 8009464:	4607      	mov	r7, r0
 8009466:	db7e      	blt.n	8009566 <quorem+0x10c>
 8009468:	3c01      	subs	r4, #1
 800946a:	f101 0814 	add.w	r8, r1, #20
 800946e:	00a3      	lsls	r3, r4, #2
 8009470:	f100 0514 	add.w	r5, r0, #20
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009484:	3301      	adds	r3, #1
 8009486:	429a      	cmp	r2, r3
 8009488:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800948c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009490:	d32e      	bcc.n	80094f0 <quorem+0x96>
 8009492:	f04f 0a00 	mov.w	sl, #0
 8009496:	46c4      	mov	ip, r8
 8009498:	46ae      	mov	lr, r5
 800949a:	46d3      	mov	fp, sl
 800949c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094a0:	b298      	uxth	r0, r3
 80094a2:	fb06 a000 	mla	r0, r6, r0, sl
 80094a6:	0c02      	lsrs	r2, r0, #16
 80094a8:	0c1b      	lsrs	r3, r3, #16
 80094aa:	fb06 2303 	mla	r3, r6, r3, r2
 80094ae:	f8de 2000 	ldr.w	r2, [lr]
 80094b2:	b280      	uxth	r0, r0
 80094b4:	b292      	uxth	r2, r2
 80094b6:	1a12      	subs	r2, r2, r0
 80094b8:	445a      	add	r2, fp
 80094ba:	f8de 0000 	ldr.w	r0, [lr]
 80094be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80094c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094cc:	b292      	uxth	r2, r2
 80094ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094d2:	45e1      	cmp	r9, ip
 80094d4:	f84e 2b04 	str.w	r2, [lr], #4
 80094d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094dc:	d2de      	bcs.n	800949c <quorem+0x42>
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	58eb      	ldr	r3, [r5, r3]
 80094e2:	b92b      	cbnz	r3, 80094f0 <quorem+0x96>
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	3b04      	subs	r3, #4
 80094e8:	429d      	cmp	r5, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	d32f      	bcc.n	800954e <quorem+0xf4>
 80094ee:	613c      	str	r4, [r7, #16]
 80094f0:	4638      	mov	r0, r7
 80094f2:	f001 f97b 	bl	800a7ec <__mcmp>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	db25      	blt.n	8009546 <quorem+0xec>
 80094fa:	4629      	mov	r1, r5
 80094fc:	2000      	movs	r0, #0
 80094fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8009502:	f8d1 c000 	ldr.w	ip, [r1]
 8009506:	fa1f fe82 	uxth.w	lr, r2
 800950a:	fa1f f38c 	uxth.w	r3, ip
 800950e:	eba3 030e 	sub.w	r3, r3, lr
 8009512:	4403      	add	r3, r0
 8009514:	0c12      	lsrs	r2, r2, #16
 8009516:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800951a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800951e:	b29b      	uxth	r3, r3
 8009520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009524:	45c1      	cmp	r9, r8
 8009526:	f841 3b04 	str.w	r3, [r1], #4
 800952a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800952e:	d2e6      	bcs.n	80094fe <quorem+0xa4>
 8009530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009534:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009538:	b922      	cbnz	r2, 8009544 <quorem+0xea>
 800953a:	3b04      	subs	r3, #4
 800953c:	429d      	cmp	r5, r3
 800953e:	461a      	mov	r2, r3
 8009540:	d30b      	bcc.n	800955a <quorem+0x100>
 8009542:	613c      	str	r4, [r7, #16]
 8009544:	3601      	adds	r6, #1
 8009546:	4630      	mov	r0, r6
 8009548:	b003      	add	sp, #12
 800954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	3b04      	subs	r3, #4
 8009552:	2a00      	cmp	r2, #0
 8009554:	d1cb      	bne.n	80094ee <quorem+0x94>
 8009556:	3c01      	subs	r4, #1
 8009558:	e7c6      	b.n	80094e8 <quorem+0x8e>
 800955a:	6812      	ldr	r2, [r2, #0]
 800955c:	3b04      	subs	r3, #4
 800955e:	2a00      	cmp	r2, #0
 8009560:	d1ef      	bne.n	8009542 <quorem+0xe8>
 8009562:	3c01      	subs	r4, #1
 8009564:	e7ea      	b.n	800953c <quorem+0xe2>
 8009566:	2000      	movs	r0, #0
 8009568:	e7ee      	b.n	8009548 <quorem+0xee>
 800956a:	0000      	movs	r0, r0
 800956c:	0000      	movs	r0, r0
	...

08009570 <_dtoa_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	69c7      	ldr	r7, [r0, #28]
 8009576:	b099      	sub	sp, #100	@ 0x64
 8009578:	ed8d 0b02 	vstr	d0, [sp, #8]
 800957c:	ec55 4b10 	vmov	r4, r5, d0
 8009580:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009582:	9109      	str	r1, [sp, #36]	@ 0x24
 8009584:	4683      	mov	fp, r0
 8009586:	920e      	str	r2, [sp, #56]	@ 0x38
 8009588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800958a:	b97f      	cbnz	r7, 80095ac <_dtoa_r+0x3c>
 800958c:	2010      	movs	r0, #16
 800958e:	f000 fdfd 	bl	800a18c <malloc>
 8009592:	4602      	mov	r2, r0
 8009594:	f8cb 001c 	str.w	r0, [fp, #28]
 8009598:	b920      	cbnz	r0, 80095a4 <_dtoa_r+0x34>
 800959a:	4ba7      	ldr	r3, [pc, #668]	@ (8009838 <_dtoa_r+0x2c8>)
 800959c:	21ef      	movs	r1, #239	@ 0xef
 800959e:	48a7      	ldr	r0, [pc, #668]	@ (800983c <_dtoa_r+0x2cc>)
 80095a0:	f001 fc68 	bl	800ae74 <__assert_func>
 80095a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80095a8:	6007      	str	r7, [r0, #0]
 80095aa:	60c7      	str	r7, [r0, #12]
 80095ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095b0:	6819      	ldr	r1, [r3, #0]
 80095b2:	b159      	cbz	r1, 80095cc <_dtoa_r+0x5c>
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	604a      	str	r2, [r1, #4]
 80095b8:	2301      	movs	r3, #1
 80095ba:	4093      	lsls	r3, r2
 80095bc:	608b      	str	r3, [r1, #8]
 80095be:	4658      	mov	r0, fp
 80095c0:	f000 feda 	bl	800a378 <_Bfree>
 80095c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	1e2b      	subs	r3, r5, #0
 80095ce:	bfb9      	ittee	lt
 80095d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095d4:	9303      	strlt	r3, [sp, #12]
 80095d6:	2300      	movge	r3, #0
 80095d8:	6033      	strge	r3, [r6, #0]
 80095da:	9f03      	ldr	r7, [sp, #12]
 80095dc:	4b98      	ldr	r3, [pc, #608]	@ (8009840 <_dtoa_r+0x2d0>)
 80095de:	bfbc      	itt	lt
 80095e0:	2201      	movlt	r2, #1
 80095e2:	6032      	strlt	r2, [r6, #0]
 80095e4:	43bb      	bics	r3, r7
 80095e6:	d112      	bne.n	800960e <_dtoa_r+0x9e>
 80095e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095f4:	4323      	orrs	r3, r4
 80095f6:	f000 854d 	beq.w	800a094 <_dtoa_r+0xb24>
 80095fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009854 <_dtoa_r+0x2e4>
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 854f 	beq.w	800a0a4 <_dtoa_r+0xb34>
 8009606:	f10a 0303 	add.w	r3, sl, #3
 800960a:	f000 bd49 	b.w	800a0a0 <_dtoa_r+0xb30>
 800960e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009612:	2200      	movs	r2, #0
 8009614:	ec51 0b17 	vmov	r0, r1, d7
 8009618:	2300      	movs	r3, #0
 800961a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800961e:	f7f7 fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009622:	4680      	mov	r8, r0
 8009624:	b158      	cbz	r0, 800963e <_dtoa_r+0xce>
 8009626:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009628:	2301      	movs	r3, #1
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800962e:	b113      	cbz	r3, 8009636 <_dtoa_r+0xc6>
 8009630:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009632:	4b84      	ldr	r3, [pc, #528]	@ (8009844 <_dtoa_r+0x2d4>)
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009858 <_dtoa_r+0x2e8>
 800963a:	f000 bd33 	b.w	800a0a4 <_dtoa_r+0xb34>
 800963e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009642:	aa16      	add	r2, sp, #88	@ 0x58
 8009644:	a917      	add	r1, sp, #92	@ 0x5c
 8009646:	4658      	mov	r0, fp
 8009648:	f001 f980 	bl	800a94c <__d2b>
 800964c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009650:	4681      	mov	r9, r0
 8009652:	2e00      	cmp	r6, #0
 8009654:	d077      	beq.n	8009746 <_dtoa_r+0x1d6>
 8009656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009658:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800965c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009664:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009668:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800966c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009670:	4619      	mov	r1, r3
 8009672:	2200      	movs	r2, #0
 8009674:	4b74      	ldr	r3, [pc, #464]	@ (8009848 <_dtoa_r+0x2d8>)
 8009676:	f7f6 fe0f 	bl	8000298 <__aeabi_dsub>
 800967a:	a369      	add	r3, pc, #420	@ (adr r3, 8009820 <_dtoa_r+0x2b0>)
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	f7f6 ffc2 	bl	8000608 <__aeabi_dmul>
 8009684:	a368      	add	r3, pc, #416	@ (adr r3, 8009828 <_dtoa_r+0x2b8>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 fe07 	bl	800029c <__adddf3>
 800968e:	4604      	mov	r4, r0
 8009690:	4630      	mov	r0, r6
 8009692:	460d      	mov	r5, r1
 8009694:	f7f6 ff4e 	bl	8000534 <__aeabi_i2d>
 8009698:	a365      	add	r3, pc, #404	@ (adr r3, 8009830 <_dtoa_r+0x2c0>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 ffb3 	bl	8000608 <__aeabi_dmul>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f6 fdf7 	bl	800029c <__adddf3>
 80096ae:	4604      	mov	r4, r0
 80096b0:	460d      	mov	r5, r1
 80096b2:	f7f7 fa59 	bl	8000b68 <__aeabi_d2iz>
 80096b6:	2200      	movs	r2, #0
 80096b8:	4607      	mov	r7, r0
 80096ba:	2300      	movs	r3, #0
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f7 fa14 	bl	8000aec <__aeabi_dcmplt>
 80096c4:	b140      	cbz	r0, 80096d8 <_dtoa_r+0x168>
 80096c6:	4638      	mov	r0, r7
 80096c8:	f7f6 ff34 	bl	8000534 <__aeabi_i2d>
 80096cc:	4622      	mov	r2, r4
 80096ce:	462b      	mov	r3, r5
 80096d0:	f7f7 fa02 	bl	8000ad8 <__aeabi_dcmpeq>
 80096d4:	b900      	cbnz	r0, 80096d8 <_dtoa_r+0x168>
 80096d6:	3f01      	subs	r7, #1
 80096d8:	2f16      	cmp	r7, #22
 80096da:	d851      	bhi.n	8009780 <_dtoa_r+0x210>
 80096dc:	4b5b      	ldr	r3, [pc, #364]	@ (800984c <_dtoa_r+0x2dc>)
 80096de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ea:	f7f7 f9ff 	bl	8000aec <__aeabi_dcmplt>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d048      	beq.n	8009784 <_dtoa_r+0x214>
 80096f2:	3f01      	subs	r7, #1
 80096f4:	2300      	movs	r3, #0
 80096f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80096f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096fa:	1b9b      	subs	r3, r3, r6
 80096fc:	1e5a      	subs	r2, r3, #1
 80096fe:	bf44      	itt	mi
 8009700:	f1c3 0801 	rsbmi	r8, r3, #1
 8009704:	2300      	movmi	r3, #0
 8009706:	9208      	str	r2, [sp, #32]
 8009708:	bf54      	ite	pl
 800970a:	f04f 0800 	movpl.w	r8, #0
 800970e:	9308      	strmi	r3, [sp, #32]
 8009710:	2f00      	cmp	r7, #0
 8009712:	db39      	blt.n	8009788 <_dtoa_r+0x218>
 8009714:	9b08      	ldr	r3, [sp, #32]
 8009716:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009718:	443b      	add	r3, r7
 800971a:	9308      	str	r3, [sp, #32]
 800971c:	2300      	movs	r3, #0
 800971e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009722:	2b09      	cmp	r3, #9
 8009724:	d864      	bhi.n	80097f0 <_dtoa_r+0x280>
 8009726:	2b05      	cmp	r3, #5
 8009728:	bfc4      	itt	gt
 800972a:	3b04      	subgt	r3, #4
 800972c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800972e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009730:	f1a3 0302 	sub.w	r3, r3, #2
 8009734:	bfcc      	ite	gt
 8009736:	2400      	movgt	r4, #0
 8009738:	2401      	movle	r4, #1
 800973a:	2b03      	cmp	r3, #3
 800973c:	d863      	bhi.n	8009806 <_dtoa_r+0x296>
 800973e:	e8df f003 	tbb	[pc, r3]
 8009742:	372a      	.short	0x372a
 8009744:	5535      	.short	0x5535
 8009746:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800974a:	441e      	add	r6, r3
 800974c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009750:	2b20      	cmp	r3, #32
 8009752:	bfc1      	itttt	gt
 8009754:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009758:	409f      	lslgt	r7, r3
 800975a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800975e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009762:	bfd6      	itet	le
 8009764:	f1c3 0320 	rsble	r3, r3, #32
 8009768:	ea47 0003 	orrgt.w	r0, r7, r3
 800976c:	fa04 f003 	lslle.w	r0, r4, r3
 8009770:	f7f6 fed0 	bl	8000514 <__aeabi_ui2d>
 8009774:	2201      	movs	r2, #1
 8009776:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800977a:	3e01      	subs	r6, #1
 800977c:	9214      	str	r2, [sp, #80]	@ 0x50
 800977e:	e777      	b.n	8009670 <_dtoa_r+0x100>
 8009780:	2301      	movs	r3, #1
 8009782:	e7b8      	b.n	80096f6 <_dtoa_r+0x186>
 8009784:	9012      	str	r0, [sp, #72]	@ 0x48
 8009786:	e7b7      	b.n	80096f8 <_dtoa_r+0x188>
 8009788:	427b      	negs	r3, r7
 800978a:	930a      	str	r3, [sp, #40]	@ 0x28
 800978c:	2300      	movs	r3, #0
 800978e:	eba8 0807 	sub.w	r8, r8, r7
 8009792:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009794:	e7c4      	b.n	8009720 <_dtoa_r+0x1b0>
 8009796:	2300      	movs	r3, #0
 8009798:	930b      	str	r3, [sp, #44]	@ 0x2c
 800979a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800979c:	2b00      	cmp	r3, #0
 800979e:	dc35      	bgt.n	800980c <_dtoa_r+0x29c>
 80097a0:	2301      	movs	r3, #1
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	461a      	mov	r2, r3
 80097a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80097aa:	e00b      	b.n	80097c4 <_dtoa_r+0x254>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7f3      	b.n	8009798 <_dtoa_r+0x228>
 80097b0:	2300      	movs	r3, #0
 80097b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097b6:	18fb      	adds	r3, r7, r3
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	2b01      	cmp	r3, #1
 80097be:	9307      	str	r3, [sp, #28]
 80097c0:	bfb8      	it	lt
 80097c2:	2301      	movlt	r3, #1
 80097c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80097c8:	2100      	movs	r1, #0
 80097ca:	2204      	movs	r2, #4
 80097cc:	f102 0514 	add.w	r5, r2, #20
 80097d0:	429d      	cmp	r5, r3
 80097d2:	d91f      	bls.n	8009814 <_dtoa_r+0x2a4>
 80097d4:	6041      	str	r1, [r0, #4]
 80097d6:	4658      	mov	r0, fp
 80097d8:	f000 fd8e 	bl	800a2f8 <_Balloc>
 80097dc:	4682      	mov	sl, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d13c      	bne.n	800985c <_dtoa_r+0x2ec>
 80097e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009850 <_dtoa_r+0x2e0>)
 80097e4:	4602      	mov	r2, r0
 80097e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80097ea:	e6d8      	b.n	800959e <_dtoa_r+0x2e>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e7e0      	b.n	80097b2 <_dtoa_r+0x242>
 80097f0:	2401      	movs	r4, #1
 80097f2:	2300      	movs	r3, #0
 80097f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097f8:	f04f 33ff 	mov.w	r3, #4294967295
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	9307      	str	r3, [sp, #28]
 8009800:	2200      	movs	r2, #0
 8009802:	2312      	movs	r3, #18
 8009804:	e7d0      	b.n	80097a8 <_dtoa_r+0x238>
 8009806:	2301      	movs	r3, #1
 8009808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800980a:	e7f5      	b.n	80097f8 <_dtoa_r+0x288>
 800980c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	9307      	str	r3, [sp, #28]
 8009812:	e7d7      	b.n	80097c4 <_dtoa_r+0x254>
 8009814:	3101      	adds	r1, #1
 8009816:	0052      	lsls	r2, r2, #1
 8009818:	e7d8      	b.n	80097cc <_dtoa_r+0x25c>
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	636f4361 	.word	0x636f4361
 8009824:	3fd287a7 	.word	0x3fd287a7
 8009828:	8b60c8b3 	.word	0x8b60c8b3
 800982c:	3fc68a28 	.word	0x3fc68a28
 8009830:	509f79fb 	.word	0x509f79fb
 8009834:	3fd34413 	.word	0x3fd34413
 8009838:	0800b669 	.word	0x0800b669
 800983c:	0800b680 	.word	0x0800b680
 8009840:	7ff00000 	.word	0x7ff00000
 8009844:	0800b639 	.word	0x0800b639
 8009848:	3ff80000 	.word	0x3ff80000
 800984c:	0800b778 	.word	0x0800b778
 8009850:	0800b6d8 	.word	0x0800b6d8
 8009854:	0800b665 	.word	0x0800b665
 8009858:	0800b638 	.word	0x0800b638
 800985c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009860:	6018      	str	r0, [r3, #0]
 8009862:	9b07      	ldr	r3, [sp, #28]
 8009864:	2b0e      	cmp	r3, #14
 8009866:	f200 80a4 	bhi.w	80099b2 <_dtoa_r+0x442>
 800986a:	2c00      	cmp	r4, #0
 800986c:	f000 80a1 	beq.w	80099b2 <_dtoa_r+0x442>
 8009870:	2f00      	cmp	r7, #0
 8009872:	dd33      	ble.n	80098dc <_dtoa_r+0x36c>
 8009874:	4bad      	ldr	r3, [pc, #692]	@ (8009b2c <_dtoa_r+0x5bc>)
 8009876:	f007 020f 	and.w	r2, r7, #15
 800987a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800987e:	ed93 7b00 	vldr	d7, [r3]
 8009882:	05f8      	lsls	r0, r7, #23
 8009884:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009888:	ea4f 1427 	mov.w	r4, r7, asr #4
 800988c:	d516      	bpl.n	80098bc <_dtoa_r+0x34c>
 800988e:	4ba8      	ldr	r3, [pc, #672]	@ (8009b30 <_dtoa_r+0x5c0>)
 8009890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009898:	f7f6 ffe0 	bl	800085c <__aeabi_ddiv>
 800989c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098a0:	f004 040f 	and.w	r4, r4, #15
 80098a4:	2603      	movs	r6, #3
 80098a6:	4da2      	ldr	r5, [pc, #648]	@ (8009b30 <_dtoa_r+0x5c0>)
 80098a8:	b954      	cbnz	r4, 80098c0 <_dtoa_r+0x350>
 80098aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098b2:	f7f6 ffd3 	bl	800085c <__aeabi_ddiv>
 80098b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ba:	e028      	b.n	800990e <_dtoa_r+0x39e>
 80098bc:	2602      	movs	r6, #2
 80098be:	e7f2      	b.n	80098a6 <_dtoa_r+0x336>
 80098c0:	07e1      	lsls	r1, r4, #31
 80098c2:	d508      	bpl.n	80098d6 <_dtoa_r+0x366>
 80098c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098cc:	f7f6 fe9c 	bl	8000608 <__aeabi_dmul>
 80098d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098d4:	3601      	adds	r6, #1
 80098d6:	1064      	asrs	r4, r4, #1
 80098d8:	3508      	adds	r5, #8
 80098da:	e7e5      	b.n	80098a8 <_dtoa_r+0x338>
 80098dc:	f000 80d2 	beq.w	8009a84 <_dtoa_r+0x514>
 80098e0:	427c      	negs	r4, r7
 80098e2:	4b92      	ldr	r3, [pc, #584]	@ (8009b2c <_dtoa_r+0x5bc>)
 80098e4:	4d92      	ldr	r5, [pc, #584]	@ (8009b30 <_dtoa_r+0x5c0>)
 80098e6:	f004 020f 	and.w	r2, r4, #15
 80098ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098f6:	f7f6 fe87 	bl	8000608 <__aeabi_dmul>
 80098fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098fe:	1124      	asrs	r4, r4, #4
 8009900:	2300      	movs	r3, #0
 8009902:	2602      	movs	r6, #2
 8009904:	2c00      	cmp	r4, #0
 8009906:	f040 80b2 	bne.w	8009a6e <_dtoa_r+0x4fe>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1d3      	bne.n	80098b6 <_dtoa_r+0x346>
 800990e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009910:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 80b7 	beq.w	8009a88 <_dtoa_r+0x518>
 800991a:	4b86      	ldr	r3, [pc, #536]	@ (8009b34 <_dtoa_r+0x5c4>)
 800991c:	2200      	movs	r2, #0
 800991e:	4620      	mov	r0, r4
 8009920:	4629      	mov	r1, r5
 8009922:	f7f7 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8009926:	2800      	cmp	r0, #0
 8009928:	f000 80ae 	beq.w	8009a88 <_dtoa_r+0x518>
 800992c:	9b07      	ldr	r3, [sp, #28]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80aa 	beq.w	8009a88 <_dtoa_r+0x518>
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	dd37      	ble.n	80099aa <_dtoa_r+0x43a>
 800993a:	1e7b      	subs	r3, r7, #1
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	4620      	mov	r0, r4
 8009940:	4b7d      	ldr	r3, [pc, #500]	@ (8009b38 <_dtoa_r+0x5c8>)
 8009942:	2200      	movs	r2, #0
 8009944:	4629      	mov	r1, r5
 8009946:	f7f6 fe5f 	bl	8000608 <__aeabi_dmul>
 800994a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800994e:	9c00      	ldr	r4, [sp, #0]
 8009950:	3601      	adds	r6, #1
 8009952:	4630      	mov	r0, r6
 8009954:	f7f6 fdee 	bl	8000534 <__aeabi_i2d>
 8009958:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800995c:	f7f6 fe54 	bl	8000608 <__aeabi_dmul>
 8009960:	4b76      	ldr	r3, [pc, #472]	@ (8009b3c <_dtoa_r+0x5cc>)
 8009962:	2200      	movs	r2, #0
 8009964:	f7f6 fc9a 	bl	800029c <__adddf3>
 8009968:	4605      	mov	r5, r0
 800996a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800996e:	2c00      	cmp	r4, #0
 8009970:	f040 808d 	bne.w	8009a8e <_dtoa_r+0x51e>
 8009974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009978:	4b71      	ldr	r3, [pc, #452]	@ (8009b40 <_dtoa_r+0x5d0>)
 800997a:	2200      	movs	r2, #0
 800997c:	f7f6 fc8c 	bl	8000298 <__aeabi_dsub>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009988:	462a      	mov	r2, r5
 800998a:	4633      	mov	r3, r6
 800998c:	f7f7 f8cc 	bl	8000b28 <__aeabi_dcmpgt>
 8009990:	2800      	cmp	r0, #0
 8009992:	f040 828b 	bne.w	8009eac <_dtoa_r+0x93c>
 8009996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800999a:	462a      	mov	r2, r5
 800999c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80099a0:	f7f7 f8a4 	bl	8000aec <__aeabi_dcmplt>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	f040 8128 	bne.w	8009bfa <_dtoa_r+0x68a>
 80099aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80099ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80099b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f2c0 815a 	blt.w	8009c6e <_dtoa_r+0x6fe>
 80099ba:	2f0e      	cmp	r7, #14
 80099bc:	f300 8157 	bgt.w	8009c6e <_dtoa_r+0x6fe>
 80099c0:	4b5a      	ldr	r3, [pc, #360]	@ (8009b2c <_dtoa_r+0x5bc>)
 80099c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099c6:	ed93 7b00 	vldr	d7, [r3]
 80099ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	ed8d 7b00 	vstr	d7, [sp]
 80099d2:	da03      	bge.n	80099dc <_dtoa_r+0x46c>
 80099d4:	9b07      	ldr	r3, [sp, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f340 8101 	ble.w	8009bde <_dtoa_r+0x66e>
 80099dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099e0:	4656      	mov	r6, sl
 80099e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7f6 ff37 	bl	800085c <__aeabi_ddiv>
 80099ee:	f7f7 f8bb 	bl	8000b68 <__aeabi_d2iz>
 80099f2:	4680      	mov	r8, r0
 80099f4:	f7f6 fd9e 	bl	8000534 <__aeabi_i2d>
 80099f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099fc:	f7f6 fe04 	bl	8000608 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a0c:	f7f6 fc44 	bl	8000298 <__aeabi_dsub>
 8009a10:	f806 4b01 	strb.w	r4, [r6], #1
 8009a14:	9d07      	ldr	r5, [sp, #28]
 8009a16:	eba6 040a 	sub.w	r4, r6, sl
 8009a1a:	42a5      	cmp	r5, r4
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	f040 8117 	bne.w	8009c52 <_dtoa_r+0x6e2>
 8009a24:	f7f6 fc3a 	bl	800029c <__adddf3>
 8009a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	f7f7 f87a 	bl	8000b28 <__aeabi_dcmpgt>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f040 80f9 	bne.w	8009c2c <_dtoa_r+0x6bc>
 8009a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f7 f849 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a46:	b118      	cbz	r0, 8009a50 <_dtoa_r+0x4e0>
 8009a48:	f018 0f01 	tst.w	r8, #1
 8009a4c:	f040 80ee 	bne.w	8009c2c <_dtoa_r+0x6bc>
 8009a50:	4649      	mov	r1, r9
 8009a52:	4658      	mov	r0, fp
 8009a54:	f000 fc90 	bl	800a378 <_Bfree>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	7033      	strb	r3, [r6, #0]
 8009a5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a5e:	3701      	adds	r7, #1
 8009a60:	601f      	str	r7, [r3, #0]
 8009a62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 831d 	beq.w	800a0a4 <_dtoa_r+0xb34>
 8009a6a:	601e      	str	r6, [r3, #0]
 8009a6c:	e31a      	b.n	800a0a4 <_dtoa_r+0xb34>
 8009a6e:	07e2      	lsls	r2, r4, #31
 8009a70:	d505      	bpl.n	8009a7e <_dtoa_r+0x50e>
 8009a72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a76:	f7f6 fdc7 	bl	8000608 <__aeabi_dmul>
 8009a7a:	3601      	adds	r6, #1
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	1064      	asrs	r4, r4, #1
 8009a80:	3508      	adds	r5, #8
 8009a82:	e73f      	b.n	8009904 <_dtoa_r+0x394>
 8009a84:	2602      	movs	r6, #2
 8009a86:	e742      	b.n	800990e <_dtoa_r+0x39e>
 8009a88:	9c07      	ldr	r4, [sp, #28]
 8009a8a:	9704      	str	r7, [sp, #16]
 8009a8c:	e761      	b.n	8009952 <_dtoa_r+0x3e2>
 8009a8e:	4b27      	ldr	r3, [pc, #156]	@ (8009b2c <_dtoa_r+0x5bc>)
 8009a90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a9a:	4454      	add	r4, sl
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d053      	beq.n	8009b48 <_dtoa_r+0x5d8>
 8009aa0:	4928      	ldr	r1, [pc, #160]	@ (8009b44 <_dtoa_r+0x5d4>)
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	f7f6 feda 	bl	800085c <__aeabi_ddiv>
 8009aa8:	4633      	mov	r3, r6
 8009aaa:	462a      	mov	r2, r5
 8009aac:	f7f6 fbf4 	bl	8000298 <__aeabi_dsub>
 8009ab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ab4:	4656      	mov	r6, sl
 8009ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aba:	f7f7 f855 	bl	8000b68 <__aeabi_d2iz>
 8009abe:	4605      	mov	r5, r0
 8009ac0:	f7f6 fd38 	bl	8000534 <__aeabi_i2d>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009acc:	f7f6 fbe4 	bl	8000298 <__aeabi_dsub>
 8009ad0:	3530      	adds	r5, #48	@ 0x30
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ada:	f806 5b01 	strb.w	r5, [r6], #1
 8009ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ae2:	f7f7 f803 	bl	8000aec <__aeabi_dcmplt>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d171      	bne.n	8009bce <_dtoa_r+0x65e>
 8009aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aee:	4911      	ldr	r1, [pc, #68]	@ (8009b34 <_dtoa_r+0x5c4>)
 8009af0:	2000      	movs	r0, #0
 8009af2:	f7f6 fbd1 	bl	8000298 <__aeabi_dsub>
 8009af6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009afa:	f7f6 fff7 	bl	8000aec <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f040 8095 	bne.w	8009c2e <_dtoa_r+0x6be>
 8009b04:	42a6      	cmp	r6, r4
 8009b06:	f43f af50 	beq.w	80099aa <_dtoa_r+0x43a>
 8009b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <_dtoa_r+0x5c8>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	f7f6 fd79 	bl	8000608 <__aeabi_dmul>
 8009b16:	4b08      	ldr	r3, [pc, #32]	@ (8009b38 <_dtoa_r+0x5c8>)
 8009b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b22:	f7f6 fd71 	bl	8000608 <__aeabi_dmul>
 8009b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b2a:	e7c4      	b.n	8009ab6 <_dtoa_r+0x546>
 8009b2c:	0800b778 	.word	0x0800b778
 8009b30:	0800b750 	.word	0x0800b750
 8009b34:	3ff00000 	.word	0x3ff00000
 8009b38:	40240000 	.word	0x40240000
 8009b3c:	401c0000 	.word	0x401c0000
 8009b40:	40140000 	.word	0x40140000
 8009b44:	3fe00000 	.word	0x3fe00000
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f7f6 fd5c 	bl	8000608 <__aeabi_dmul>
 8009b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b54:	9415      	str	r4, [sp, #84]	@ 0x54
 8009b56:	4656      	mov	r6, sl
 8009b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5c:	f7f7 f804 	bl	8000b68 <__aeabi_d2iz>
 8009b60:	4605      	mov	r5, r0
 8009b62:	f7f6 fce7 	bl	8000534 <__aeabi_i2d>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6e:	f7f6 fb93 	bl	8000298 <__aeabi_dsub>
 8009b72:	3530      	adds	r5, #48	@ 0x30
 8009b74:	f806 5b01 	strb.w	r5, [r6], #1
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	42a6      	cmp	r6, r4
 8009b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b82:	f04f 0200 	mov.w	r2, #0
 8009b86:	d124      	bne.n	8009bd2 <_dtoa_r+0x662>
 8009b88:	4bac      	ldr	r3, [pc, #688]	@ (8009e3c <_dtoa_r+0x8cc>)
 8009b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b8e:	f7f6 fb85 	bl	800029c <__adddf3>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9a:	f7f6 ffc5 	bl	8000b28 <__aeabi_dcmpgt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d145      	bne.n	8009c2e <_dtoa_r+0x6be>
 8009ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ba6:	49a5      	ldr	r1, [pc, #660]	@ (8009e3c <_dtoa_r+0x8cc>)
 8009ba8:	2000      	movs	r0, #0
 8009baa:	f7f6 fb75 	bl	8000298 <__aeabi_dsub>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb6:	f7f6 ff99 	bl	8000aec <__aeabi_dcmplt>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	f43f aef5 	beq.w	80099aa <_dtoa_r+0x43a>
 8009bc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009bc2:	1e73      	subs	r3, r6, #1
 8009bc4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009bc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bca:	2b30      	cmp	r3, #48	@ 0x30
 8009bcc:	d0f8      	beq.n	8009bc0 <_dtoa_r+0x650>
 8009bce:	9f04      	ldr	r7, [sp, #16]
 8009bd0:	e73e      	b.n	8009a50 <_dtoa_r+0x4e0>
 8009bd2:	4b9b      	ldr	r3, [pc, #620]	@ (8009e40 <_dtoa_r+0x8d0>)
 8009bd4:	f7f6 fd18 	bl	8000608 <__aeabi_dmul>
 8009bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bdc:	e7bc      	b.n	8009b58 <_dtoa_r+0x5e8>
 8009bde:	d10c      	bne.n	8009bfa <_dtoa_r+0x68a>
 8009be0:	4b98      	ldr	r3, [pc, #608]	@ (8009e44 <_dtoa_r+0x8d4>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009be8:	f7f6 fd0e 	bl	8000608 <__aeabi_dmul>
 8009bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bf0:	f7f6 ff90 	bl	8000b14 <__aeabi_dcmpge>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f000 8157 	beq.w	8009ea8 <_dtoa_r+0x938>
 8009bfa:	2400      	movs	r4, #0
 8009bfc:	4625      	mov	r5, r4
 8009bfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c00:	43db      	mvns	r3, r3
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	4656      	mov	r6, sl
 8009c06:	2700      	movs	r7, #0
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4658      	mov	r0, fp
 8009c0c:	f000 fbb4 	bl	800a378 <_Bfree>
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	d0dc      	beq.n	8009bce <_dtoa_r+0x65e>
 8009c14:	b12f      	cbz	r7, 8009c22 <_dtoa_r+0x6b2>
 8009c16:	42af      	cmp	r7, r5
 8009c18:	d003      	beq.n	8009c22 <_dtoa_r+0x6b2>
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	4658      	mov	r0, fp
 8009c1e:	f000 fbab 	bl	800a378 <_Bfree>
 8009c22:	4629      	mov	r1, r5
 8009c24:	4658      	mov	r0, fp
 8009c26:	f000 fba7 	bl	800a378 <_Bfree>
 8009c2a:	e7d0      	b.n	8009bce <_dtoa_r+0x65e>
 8009c2c:	9704      	str	r7, [sp, #16]
 8009c2e:	4633      	mov	r3, r6
 8009c30:	461e      	mov	r6, r3
 8009c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c36:	2a39      	cmp	r2, #57	@ 0x39
 8009c38:	d107      	bne.n	8009c4a <_dtoa_r+0x6da>
 8009c3a:	459a      	cmp	sl, r3
 8009c3c:	d1f8      	bne.n	8009c30 <_dtoa_r+0x6c0>
 8009c3e:	9a04      	ldr	r2, [sp, #16]
 8009c40:	3201      	adds	r2, #1
 8009c42:	9204      	str	r2, [sp, #16]
 8009c44:	2230      	movs	r2, #48	@ 0x30
 8009c46:	f88a 2000 	strb.w	r2, [sl]
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	3201      	adds	r2, #1
 8009c4e:	701a      	strb	r2, [r3, #0]
 8009c50:	e7bd      	b.n	8009bce <_dtoa_r+0x65e>
 8009c52:	4b7b      	ldr	r3, [pc, #492]	@ (8009e40 <_dtoa_r+0x8d0>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	f7f6 fcd7 	bl	8000608 <__aeabi_dmul>
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4604      	mov	r4, r0
 8009c60:	460d      	mov	r5, r1
 8009c62:	f7f6 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f aebb 	beq.w	80099e2 <_dtoa_r+0x472>
 8009c6c:	e6f0      	b.n	8009a50 <_dtoa_r+0x4e0>
 8009c6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	f000 80db 	beq.w	8009e2c <_dtoa_r+0x8bc>
 8009c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c78:	2a01      	cmp	r2, #1
 8009c7a:	f300 80bf 	bgt.w	8009dfc <_dtoa_r+0x88c>
 8009c7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c80:	2a00      	cmp	r2, #0
 8009c82:	f000 80b7 	beq.w	8009df4 <_dtoa_r+0x884>
 8009c86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c8c:	4646      	mov	r6, r8
 8009c8e:	9a08      	ldr	r2, [sp, #32]
 8009c90:	2101      	movs	r1, #1
 8009c92:	441a      	add	r2, r3
 8009c94:	4658      	mov	r0, fp
 8009c96:	4498      	add	r8, r3
 8009c98:	9208      	str	r2, [sp, #32]
 8009c9a:	f000 fc21 	bl	800a4e0 <__i2b>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b15e      	cbz	r6, 8009cba <_dtoa_r+0x74a>
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dd08      	ble.n	8009cba <_dtoa_r+0x74a>
 8009ca8:	42b3      	cmp	r3, r6
 8009caa:	9a08      	ldr	r2, [sp, #32]
 8009cac:	bfa8      	it	ge
 8009cae:	4633      	movge	r3, r6
 8009cb0:	eba8 0803 	sub.w	r8, r8, r3
 8009cb4:	1af6      	subs	r6, r6, r3
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	9308      	str	r3, [sp, #32]
 8009cba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cbc:	b1f3      	cbz	r3, 8009cfc <_dtoa_r+0x78c>
 8009cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 80b7 	beq.w	8009e34 <_dtoa_r+0x8c4>
 8009cc6:	b18c      	cbz	r4, 8009cec <_dtoa_r+0x77c>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4658      	mov	r0, fp
 8009cce:	f000 fcc7 	bl	800a660 <__pow5mult>
 8009cd2:	464a      	mov	r2, r9
 8009cd4:	4601      	mov	r1, r0
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	4658      	mov	r0, fp
 8009cda:	f000 fc17 	bl	800a50c <__multiply>
 8009cde:	4649      	mov	r1, r9
 8009ce0:	9004      	str	r0, [sp, #16]
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f000 fb48 	bl	800a378 <_Bfree>
 8009ce8:	9b04      	ldr	r3, [sp, #16]
 8009cea:	4699      	mov	r9, r3
 8009cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cee:	1b1a      	subs	r2, r3, r4
 8009cf0:	d004      	beq.n	8009cfc <_dtoa_r+0x78c>
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	4658      	mov	r0, fp
 8009cf6:	f000 fcb3 	bl	800a660 <__pow5mult>
 8009cfa:	4681      	mov	r9, r0
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	4658      	mov	r0, fp
 8009d00:	f000 fbee 	bl	800a4e0 <__i2b>
 8009d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d06:	4604      	mov	r4, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 81cf 	beq.w	800a0ac <_dtoa_r+0xb3c>
 8009d0e:	461a      	mov	r2, r3
 8009d10:	4601      	mov	r1, r0
 8009d12:	4658      	mov	r0, fp
 8009d14:	f000 fca4 	bl	800a660 <__pow5mult>
 8009d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	f300 8095 	bgt.w	8009e4c <_dtoa_r+0x8dc>
 8009d22:	9b02      	ldr	r3, [sp, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f040 8087 	bne.w	8009e38 <_dtoa_r+0x8c8>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f040 8089 	bne.w	8009e48 <_dtoa_r+0x8d8>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d3c:	0d1b      	lsrs	r3, r3, #20
 8009d3e:	051b      	lsls	r3, r3, #20
 8009d40:	b12b      	cbz	r3, 8009d4e <_dtoa_r+0x7de>
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	3301      	adds	r3, #1
 8009d46:	9308      	str	r3, [sp, #32]
 8009d48:	f108 0801 	add.w	r8, r8, #1
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 81b0 	beq.w	800a0b8 <_dtoa_r+0xb48>
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d5e:	6918      	ldr	r0, [r3, #16]
 8009d60:	f000 fb72 	bl	800a448 <__hi0bits>
 8009d64:	f1c0 0020 	rsb	r0, r0, #32
 8009d68:	9b08      	ldr	r3, [sp, #32]
 8009d6a:	4418      	add	r0, r3
 8009d6c:	f010 001f 	ands.w	r0, r0, #31
 8009d70:	d077      	beq.n	8009e62 <_dtoa_r+0x8f2>
 8009d72:	f1c0 0320 	rsb	r3, r0, #32
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	dd6b      	ble.n	8009e52 <_dtoa_r+0x8e2>
 8009d7a:	9b08      	ldr	r3, [sp, #32]
 8009d7c:	f1c0 001c 	rsb	r0, r0, #28
 8009d80:	4403      	add	r3, r0
 8009d82:	4480      	add	r8, r0
 8009d84:	4406      	add	r6, r0
 8009d86:	9308      	str	r3, [sp, #32]
 8009d88:	f1b8 0f00 	cmp.w	r8, #0
 8009d8c:	dd05      	ble.n	8009d9a <_dtoa_r+0x82a>
 8009d8e:	4649      	mov	r1, r9
 8009d90:	4642      	mov	r2, r8
 8009d92:	4658      	mov	r0, fp
 8009d94:	f000 fcbe 	bl	800a714 <__lshift>
 8009d98:	4681      	mov	r9, r0
 8009d9a:	9b08      	ldr	r3, [sp, #32]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd05      	ble.n	8009dac <_dtoa_r+0x83c>
 8009da0:	4621      	mov	r1, r4
 8009da2:	461a      	mov	r2, r3
 8009da4:	4658      	mov	r0, fp
 8009da6:	f000 fcb5 	bl	800a714 <__lshift>
 8009daa:	4604      	mov	r4, r0
 8009dac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d059      	beq.n	8009e66 <_dtoa_r+0x8f6>
 8009db2:	4621      	mov	r1, r4
 8009db4:	4648      	mov	r0, r9
 8009db6:	f000 fd19 	bl	800a7ec <__mcmp>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	da53      	bge.n	8009e66 <_dtoa_r+0x8f6>
 8009dbe:	1e7b      	subs	r3, r7, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	220a      	movs	r2, #10
 8009dc8:	4658      	mov	r0, fp
 8009dca:	f000 faf7 	bl	800a3bc <__multadd>
 8009dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd0:	4681      	mov	r9, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 8172 	beq.w	800a0bc <_dtoa_r+0xb4c>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4629      	mov	r1, r5
 8009ddc:	220a      	movs	r2, #10
 8009dde:	4658      	mov	r0, fp
 8009de0:	f000 faec 	bl	800a3bc <__multadd>
 8009de4:	9b00      	ldr	r3, [sp, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	4605      	mov	r5, r0
 8009dea:	dc67      	bgt.n	8009ebc <_dtoa_r+0x94c>
 8009dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	dc41      	bgt.n	8009e76 <_dtoa_r+0x906>
 8009df2:	e063      	b.n	8009ebc <_dtoa_r+0x94c>
 8009df4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009df6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009dfa:	e746      	b.n	8009c8a <_dtoa_r+0x71a>
 8009dfc:	9b07      	ldr	r3, [sp, #28]
 8009dfe:	1e5c      	subs	r4, r3, #1
 8009e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e02:	42a3      	cmp	r3, r4
 8009e04:	bfbf      	itttt	lt
 8009e06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009e08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009e0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009e0c:	1ae3      	sublt	r3, r4, r3
 8009e0e:	bfb4      	ite	lt
 8009e10:	18d2      	addlt	r2, r2, r3
 8009e12:	1b1c      	subge	r4, r3, r4
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	bfbc      	itt	lt
 8009e18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009e1a:	2400      	movlt	r4, #0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfb5      	itete	lt
 8009e20:	eba8 0603 	sublt.w	r6, r8, r3
 8009e24:	9b07      	ldrge	r3, [sp, #28]
 8009e26:	2300      	movlt	r3, #0
 8009e28:	4646      	movge	r6, r8
 8009e2a:	e730      	b.n	8009c8e <_dtoa_r+0x71e>
 8009e2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e30:	4646      	mov	r6, r8
 8009e32:	e735      	b.n	8009ca0 <_dtoa_r+0x730>
 8009e34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e36:	e75c      	b.n	8009cf2 <_dtoa_r+0x782>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e788      	b.n	8009d4e <_dtoa_r+0x7de>
 8009e3c:	3fe00000 	.word	0x3fe00000
 8009e40:	40240000 	.word	0x40240000
 8009e44:	40140000 	.word	0x40140000
 8009e48:	9b02      	ldr	r3, [sp, #8]
 8009e4a:	e780      	b.n	8009d4e <_dtoa_r+0x7de>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e50:	e782      	b.n	8009d58 <_dtoa_r+0x7e8>
 8009e52:	d099      	beq.n	8009d88 <_dtoa_r+0x818>
 8009e54:	9a08      	ldr	r2, [sp, #32]
 8009e56:	331c      	adds	r3, #28
 8009e58:	441a      	add	r2, r3
 8009e5a:	4498      	add	r8, r3
 8009e5c:	441e      	add	r6, r3
 8009e5e:	9208      	str	r2, [sp, #32]
 8009e60:	e792      	b.n	8009d88 <_dtoa_r+0x818>
 8009e62:	4603      	mov	r3, r0
 8009e64:	e7f6      	b.n	8009e54 <_dtoa_r+0x8e4>
 8009e66:	9b07      	ldr	r3, [sp, #28]
 8009e68:	9704      	str	r7, [sp, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dc20      	bgt.n	8009eb0 <_dtoa_r+0x940>
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	dd1e      	ble.n	8009eb4 <_dtoa_r+0x944>
 8009e76:	9b00      	ldr	r3, [sp, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f47f aec0 	bne.w	8009bfe <_dtoa_r+0x68e>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	2205      	movs	r2, #5
 8009e82:	4658      	mov	r0, fp
 8009e84:	f000 fa9a 	bl	800a3bc <__multadd>
 8009e88:	4601      	mov	r1, r0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4648      	mov	r0, r9
 8009e8e:	f000 fcad 	bl	800a7ec <__mcmp>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f77f aeb3 	ble.w	8009bfe <_dtoa_r+0x68e>
 8009e98:	4656      	mov	r6, sl
 8009e9a:	2331      	movs	r3, #49	@ 0x31
 8009e9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009ea0:	9b04      	ldr	r3, [sp, #16]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	e6ae      	b.n	8009c06 <_dtoa_r+0x696>
 8009ea8:	9c07      	ldr	r4, [sp, #28]
 8009eaa:	9704      	str	r7, [sp, #16]
 8009eac:	4625      	mov	r5, r4
 8009eae:	e7f3      	b.n	8009e98 <_dtoa_r+0x928>
 8009eb0:	9b07      	ldr	r3, [sp, #28]
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 8104 	beq.w	800a0c4 <_dtoa_r+0xb54>
 8009ebc:	2e00      	cmp	r6, #0
 8009ebe:	dd05      	ble.n	8009ecc <_dtoa_r+0x95c>
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	4658      	mov	r0, fp
 8009ec6:	f000 fc25 	bl	800a714 <__lshift>
 8009eca:	4605      	mov	r5, r0
 8009ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d05a      	beq.n	8009f88 <_dtoa_r+0xa18>
 8009ed2:	6869      	ldr	r1, [r5, #4]
 8009ed4:	4658      	mov	r0, fp
 8009ed6:	f000 fa0f 	bl	800a2f8 <_Balloc>
 8009eda:	4606      	mov	r6, r0
 8009edc:	b928      	cbnz	r0, 8009eea <_dtoa_r+0x97a>
 8009ede:	4b84      	ldr	r3, [pc, #528]	@ (800a0f0 <_dtoa_r+0xb80>)
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ee6:	f7ff bb5a 	b.w	800959e <_dtoa_r+0x2e>
 8009eea:	692a      	ldr	r2, [r5, #16]
 8009eec:	3202      	adds	r2, #2
 8009eee:	0092      	lsls	r2, r2, #2
 8009ef0:	f105 010c 	add.w	r1, r5, #12
 8009ef4:	300c      	adds	r0, #12
 8009ef6:	f000 ffaf 	bl	800ae58 <memcpy>
 8009efa:	2201      	movs	r2, #1
 8009efc:	4631      	mov	r1, r6
 8009efe:	4658      	mov	r0, fp
 8009f00:	f000 fc08 	bl	800a714 <__lshift>
 8009f04:	f10a 0301 	add.w	r3, sl, #1
 8009f08:	9307      	str	r3, [sp, #28]
 8009f0a:	9b00      	ldr	r3, [sp, #0]
 8009f0c:	4453      	add	r3, sl
 8009f0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	462f      	mov	r7, r5
 8009f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	9b07      	ldr	r3, [sp, #28]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	3b01      	subs	r3, #1
 8009f22:	4648      	mov	r0, r9
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	f7ff fa98 	bl	800945a <quorem>
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	9002      	str	r0, [sp, #8]
 8009f2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f32:	4648      	mov	r0, r9
 8009f34:	f000 fc5a 	bl	800a7ec <__mcmp>
 8009f38:	462a      	mov	r2, r5
 8009f3a:	9008      	str	r0, [sp, #32]
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	4658      	mov	r0, fp
 8009f40:	f000 fc70 	bl	800a824 <__mdiff>
 8009f44:	68c2      	ldr	r2, [r0, #12]
 8009f46:	4606      	mov	r6, r0
 8009f48:	bb02      	cbnz	r2, 8009f8c <_dtoa_r+0xa1c>
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	f000 fc4d 	bl	800a7ec <__mcmp>
 8009f52:	4602      	mov	r2, r0
 8009f54:	4631      	mov	r1, r6
 8009f56:	4658      	mov	r0, fp
 8009f58:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f5a:	f000 fa0d 	bl	800a378 <_Bfree>
 8009f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f62:	9e07      	ldr	r6, [sp, #28]
 8009f64:	ea43 0102 	orr.w	r1, r3, r2
 8009f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f6a:	4319      	orrs	r1, r3
 8009f6c:	d110      	bne.n	8009f90 <_dtoa_r+0xa20>
 8009f6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f72:	d029      	beq.n	8009fc8 <_dtoa_r+0xa58>
 8009f74:	9b08      	ldr	r3, [sp, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	dd02      	ble.n	8009f80 <_dtoa_r+0xa10>
 8009f7a:	9b02      	ldr	r3, [sp, #8]
 8009f7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f80:	9b00      	ldr	r3, [sp, #0]
 8009f82:	f883 8000 	strb.w	r8, [r3]
 8009f86:	e63f      	b.n	8009c08 <_dtoa_r+0x698>
 8009f88:	4628      	mov	r0, r5
 8009f8a:	e7bb      	b.n	8009f04 <_dtoa_r+0x994>
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	e7e1      	b.n	8009f54 <_dtoa_r+0x9e4>
 8009f90:	9b08      	ldr	r3, [sp, #32]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	db04      	blt.n	8009fa0 <_dtoa_r+0xa30>
 8009f96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	d120      	bne.n	8009fe2 <_dtoa_r+0xa72>
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	dded      	ble.n	8009f80 <_dtoa_r+0xa10>
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4658      	mov	r0, fp
 8009faa:	f000 fbb3 	bl	800a714 <__lshift>
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4681      	mov	r9, r0
 8009fb2:	f000 fc1b 	bl	800a7ec <__mcmp>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	dc03      	bgt.n	8009fc2 <_dtoa_r+0xa52>
 8009fba:	d1e1      	bne.n	8009f80 <_dtoa_r+0xa10>
 8009fbc:	f018 0f01 	tst.w	r8, #1
 8009fc0:	d0de      	beq.n	8009f80 <_dtoa_r+0xa10>
 8009fc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fc6:	d1d8      	bne.n	8009f7a <_dtoa_r+0xa0a>
 8009fc8:	9a00      	ldr	r2, [sp, #0]
 8009fca:	2339      	movs	r3, #57	@ 0x39
 8009fcc:	7013      	strb	r3, [r2, #0]
 8009fce:	4633      	mov	r3, r6
 8009fd0:	461e      	mov	r6, r3
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fd8:	2a39      	cmp	r2, #57	@ 0x39
 8009fda:	d052      	beq.n	800a082 <_dtoa_r+0xb12>
 8009fdc:	3201      	adds	r2, #1
 8009fde:	701a      	strb	r2, [r3, #0]
 8009fe0:	e612      	b.n	8009c08 <_dtoa_r+0x698>
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	dd07      	ble.n	8009ff6 <_dtoa_r+0xa86>
 8009fe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fea:	d0ed      	beq.n	8009fc8 <_dtoa_r+0xa58>
 8009fec:	9a00      	ldr	r2, [sp, #0]
 8009fee:	f108 0301 	add.w	r3, r8, #1
 8009ff2:	7013      	strb	r3, [r2, #0]
 8009ff4:	e608      	b.n	8009c08 <_dtoa_r+0x698>
 8009ff6:	9b07      	ldr	r3, [sp, #28]
 8009ff8:	9a07      	ldr	r2, [sp, #28]
 8009ffa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a000:	4293      	cmp	r3, r2
 800a002:	d028      	beq.n	800a056 <_dtoa_r+0xae6>
 800a004:	4649      	mov	r1, r9
 800a006:	2300      	movs	r3, #0
 800a008:	220a      	movs	r2, #10
 800a00a:	4658      	mov	r0, fp
 800a00c:	f000 f9d6 	bl	800a3bc <__multadd>
 800a010:	42af      	cmp	r7, r5
 800a012:	4681      	mov	r9, r0
 800a014:	f04f 0300 	mov.w	r3, #0
 800a018:	f04f 020a 	mov.w	r2, #10
 800a01c:	4639      	mov	r1, r7
 800a01e:	4658      	mov	r0, fp
 800a020:	d107      	bne.n	800a032 <_dtoa_r+0xac2>
 800a022:	f000 f9cb 	bl	800a3bc <__multadd>
 800a026:	4607      	mov	r7, r0
 800a028:	4605      	mov	r5, r0
 800a02a:	9b07      	ldr	r3, [sp, #28]
 800a02c:	3301      	adds	r3, #1
 800a02e:	9307      	str	r3, [sp, #28]
 800a030:	e774      	b.n	8009f1c <_dtoa_r+0x9ac>
 800a032:	f000 f9c3 	bl	800a3bc <__multadd>
 800a036:	4629      	mov	r1, r5
 800a038:	4607      	mov	r7, r0
 800a03a:	2300      	movs	r3, #0
 800a03c:	220a      	movs	r2, #10
 800a03e:	4658      	mov	r0, fp
 800a040:	f000 f9bc 	bl	800a3bc <__multadd>
 800a044:	4605      	mov	r5, r0
 800a046:	e7f0      	b.n	800a02a <_dtoa_r+0xaba>
 800a048:	9b00      	ldr	r3, [sp, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	bfcc      	ite	gt
 800a04e:	461e      	movgt	r6, r3
 800a050:	2601      	movle	r6, #1
 800a052:	4456      	add	r6, sl
 800a054:	2700      	movs	r7, #0
 800a056:	4649      	mov	r1, r9
 800a058:	2201      	movs	r2, #1
 800a05a:	4658      	mov	r0, fp
 800a05c:	f000 fb5a 	bl	800a714 <__lshift>
 800a060:	4621      	mov	r1, r4
 800a062:	4681      	mov	r9, r0
 800a064:	f000 fbc2 	bl	800a7ec <__mcmp>
 800a068:	2800      	cmp	r0, #0
 800a06a:	dcb0      	bgt.n	8009fce <_dtoa_r+0xa5e>
 800a06c:	d102      	bne.n	800a074 <_dtoa_r+0xb04>
 800a06e:	f018 0f01 	tst.w	r8, #1
 800a072:	d1ac      	bne.n	8009fce <_dtoa_r+0xa5e>
 800a074:	4633      	mov	r3, r6
 800a076:	461e      	mov	r6, r3
 800a078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a07c:	2a30      	cmp	r2, #48	@ 0x30
 800a07e:	d0fa      	beq.n	800a076 <_dtoa_r+0xb06>
 800a080:	e5c2      	b.n	8009c08 <_dtoa_r+0x698>
 800a082:	459a      	cmp	sl, r3
 800a084:	d1a4      	bne.n	8009fd0 <_dtoa_r+0xa60>
 800a086:	9b04      	ldr	r3, [sp, #16]
 800a088:	3301      	adds	r3, #1
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	2331      	movs	r3, #49	@ 0x31
 800a08e:	f88a 3000 	strb.w	r3, [sl]
 800a092:	e5b9      	b.n	8009c08 <_dtoa_r+0x698>
 800a094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a096:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a0f4 <_dtoa_r+0xb84>
 800a09a:	b11b      	cbz	r3, 800a0a4 <_dtoa_r+0xb34>
 800a09c:	f10a 0308 	add.w	r3, sl, #8
 800a0a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	b019      	add	sp, #100	@ 0x64
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	f77f ae37 	ble.w	8009d22 <_dtoa_r+0x7b2>
 800a0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	e655      	b.n	8009d68 <_dtoa_r+0x7f8>
 800a0bc:	9b00      	ldr	r3, [sp, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f77f aed6 	ble.w	8009e70 <_dtoa_r+0x900>
 800a0c4:	4656      	mov	r6, sl
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4648      	mov	r0, r9
 800a0ca:	f7ff f9c6 	bl	800945a <quorem>
 800a0ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0d2:	f806 8b01 	strb.w	r8, [r6], #1
 800a0d6:	9b00      	ldr	r3, [sp, #0]
 800a0d8:	eba6 020a 	sub.w	r2, r6, sl
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	ddb3      	ble.n	800a048 <_dtoa_r+0xad8>
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	f000 f968 	bl	800a3bc <__multadd>
 800a0ec:	4681      	mov	r9, r0
 800a0ee:	e7ea      	b.n	800a0c6 <_dtoa_r+0xb56>
 800a0f0:	0800b6d8 	.word	0x0800b6d8
 800a0f4:	0800b65c 	.word	0x0800b65c

0800a0f8 <_free_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	2900      	cmp	r1, #0
 800a0fe:	d041      	beq.n	800a184 <_free_r+0x8c>
 800a100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a104:	1f0c      	subs	r4, r1, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfb8      	it	lt
 800a10a:	18e4      	addlt	r4, r4, r3
 800a10c:	f000 f8e8 	bl	800a2e0 <__malloc_lock>
 800a110:	4a1d      	ldr	r2, [pc, #116]	@ (800a188 <_free_r+0x90>)
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	b933      	cbnz	r3, 800a124 <_free_r+0x2c>
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	6014      	str	r4, [r2, #0]
 800a11a:	4628      	mov	r0, r5
 800a11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a120:	f000 b8e4 	b.w	800a2ec <__malloc_unlock>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d908      	bls.n	800a13a <_free_r+0x42>
 800a128:	6820      	ldr	r0, [r4, #0]
 800a12a:	1821      	adds	r1, r4, r0
 800a12c:	428b      	cmp	r3, r1
 800a12e:	bf01      	itttt	eq
 800a130:	6819      	ldreq	r1, [r3, #0]
 800a132:	685b      	ldreq	r3, [r3, #4]
 800a134:	1809      	addeq	r1, r1, r0
 800a136:	6021      	streq	r1, [r4, #0]
 800a138:	e7ed      	b.n	800a116 <_free_r+0x1e>
 800a13a:	461a      	mov	r2, r3
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b10b      	cbz	r3, 800a144 <_free_r+0x4c>
 800a140:	42a3      	cmp	r3, r4
 800a142:	d9fa      	bls.n	800a13a <_free_r+0x42>
 800a144:	6811      	ldr	r1, [r2, #0]
 800a146:	1850      	adds	r0, r2, r1
 800a148:	42a0      	cmp	r0, r4
 800a14a:	d10b      	bne.n	800a164 <_free_r+0x6c>
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	4401      	add	r1, r0
 800a150:	1850      	adds	r0, r2, r1
 800a152:	4283      	cmp	r3, r0
 800a154:	6011      	str	r1, [r2, #0]
 800a156:	d1e0      	bne.n	800a11a <_free_r+0x22>
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	6053      	str	r3, [r2, #4]
 800a15e:	4408      	add	r0, r1
 800a160:	6010      	str	r0, [r2, #0]
 800a162:	e7da      	b.n	800a11a <_free_r+0x22>
 800a164:	d902      	bls.n	800a16c <_free_r+0x74>
 800a166:	230c      	movs	r3, #12
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	e7d6      	b.n	800a11a <_free_r+0x22>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	1821      	adds	r1, r4, r0
 800a170:	428b      	cmp	r3, r1
 800a172:	bf04      	itt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	6063      	str	r3, [r4, #4]
 800a17a:	bf04      	itt	eq
 800a17c:	1809      	addeq	r1, r1, r0
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	6054      	str	r4, [r2, #4]
 800a182:	e7ca      	b.n	800a11a <_free_r+0x22>
 800a184:	bd38      	pop	{r3, r4, r5, pc}
 800a186:	bf00      	nop
 800a188:	20000730 	.word	0x20000730

0800a18c <malloc>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	@ (800a198 <malloc+0xc>)
 800a18e:	4601      	mov	r1, r0
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	f000 b825 	b.w	800a1e0 <_malloc_r>
 800a196:	bf00      	nop
 800a198:	2000001c 	.word	0x2000001c

0800a19c <sbrk_aligned>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	4e0f      	ldr	r6, [pc, #60]	@ (800a1dc <sbrk_aligned+0x40>)
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	6831      	ldr	r1, [r6, #0]
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	b911      	cbnz	r1, 800a1ae <sbrk_aligned+0x12>
 800a1a8:	f000 fe46 	bl	800ae38 <_sbrk_r>
 800a1ac:	6030      	str	r0, [r6, #0]
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f000 fe41 	bl	800ae38 <_sbrk_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d103      	bne.n	800a1c2 <sbrk_aligned+0x26>
 800a1ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a1be:	4620      	mov	r0, r4
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
 800a1c2:	1cc4      	adds	r4, r0, #3
 800a1c4:	f024 0403 	bic.w	r4, r4, #3
 800a1c8:	42a0      	cmp	r0, r4
 800a1ca:	d0f8      	beq.n	800a1be <sbrk_aligned+0x22>
 800a1cc:	1a21      	subs	r1, r4, r0
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f000 fe32 	bl	800ae38 <_sbrk_r>
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d1f2      	bne.n	800a1be <sbrk_aligned+0x22>
 800a1d8:	e7ef      	b.n	800a1ba <sbrk_aligned+0x1e>
 800a1da:	bf00      	nop
 800a1dc:	2000072c 	.word	0x2000072c

0800a1e0 <_malloc_r>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	1ccd      	adds	r5, r1, #3
 800a1e6:	f025 0503 	bic.w	r5, r5, #3
 800a1ea:	3508      	adds	r5, #8
 800a1ec:	2d0c      	cmp	r5, #12
 800a1ee:	bf38      	it	cc
 800a1f0:	250c      	movcc	r5, #12
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	db01      	blt.n	800a1fc <_malloc_r+0x1c>
 800a1f8:	42a9      	cmp	r1, r5
 800a1fa:	d904      	bls.n	800a206 <_malloc_r+0x26>
 800a1fc:	230c      	movs	r3, #12
 800a1fe:	6033      	str	r3, [r6, #0]
 800a200:	2000      	movs	r0, #0
 800a202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2dc <_malloc_r+0xfc>
 800a20a:	f000 f869 	bl	800a2e0 <__malloc_lock>
 800a20e:	f8d8 3000 	ldr.w	r3, [r8]
 800a212:	461c      	mov	r4, r3
 800a214:	bb44      	cbnz	r4, 800a268 <_malloc_r+0x88>
 800a216:	4629      	mov	r1, r5
 800a218:	4630      	mov	r0, r6
 800a21a:	f7ff ffbf 	bl	800a19c <sbrk_aligned>
 800a21e:	1c43      	adds	r3, r0, #1
 800a220:	4604      	mov	r4, r0
 800a222:	d158      	bne.n	800a2d6 <_malloc_r+0xf6>
 800a224:	f8d8 4000 	ldr.w	r4, [r8]
 800a228:	4627      	mov	r7, r4
 800a22a:	2f00      	cmp	r7, #0
 800a22c:	d143      	bne.n	800a2b6 <_malloc_r+0xd6>
 800a22e:	2c00      	cmp	r4, #0
 800a230:	d04b      	beq.n	800a2ca <_malloc_r+0xea>
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	4639      	mov	r1, r7
 800a236:	4630      	mov	r0, r6
 800a238:	eb04 0903 	add.w	r9, r4, r3
 800a23c:	f000 fdfc 	bl	800ae38 <_sbrk_r>
 800a240:	4581      	cmp	r9, r0
 800a242:	d142      	bne.n	800a2ca <_malloc_r+0xea>
 800a244:	6821      	ldr	r1, [r4, #0]
 800a246:	1a6d      	subs	r5, r5, r1
 800a248:	4629      	mov	r1, r5
 800a24a:	4630      	mov	r0, r6
 800a24c:	f7ff ffa6 	bl	800a19c <sbrk_aligned>
 800a250:	3001      	adds	r0, #1
 800a252:	d03a      	beq.n	800a2ca <_malloc_r+0xea>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	442b      	add	r3, r5
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	f8d8 3000 	ldr.w	r3, [r8]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	bb62      	cbnz	r2, 800a2bc <_malloc_r+0xdc>
 800a262:	f8c8 7000 	str.w	r7, [r8]
 800a266:	e00f      	b.n	800a288 <_malloc_r+0xa8>
 800a268:	6822      	ldr	r2, [r4, #0]
 800a26a:	1b52      	subs	r2, r2, r5
 800a26c:	d420      	bmi.n	800a2b0 <_malloc_r+0xd0>
 800a26e:	2a0b      	cmp	r2, #11
 800a270:	d917      	bls.n	800a2a2 <_malloc_r+0xc2>
 800a272:	1961      	adds	r1, r4, r5
 800a274:	42a3      	cmp	r3, r4
 800a276:	6025      	str	r5, [r4, #0]
 800a278:	bf18      	it	ne
 800a27a:	6059      	strne	r1, [r3, #4]
 800a27c:	6863      	ldr	r3, [r4, #4]
 800a27e:	bf08      	it	eq
 800a280:	f8c8 1000 	streq.w	r1, [r8]
 800a284:	5162      	str	r2, [r4, r5]
 800a286:	604b      	str	r3, [r1, #4]
 800a288:	4630      	mov	r0, r6
 800a28a:	f000 f82f 	bl	800a2ec <__malloc_unlock>
 800a28e:	f104 000b 	add.w	r0, r4, #11
 800a292:	1d23      	adds	r3, r4, #4
 800a294:	f020 0007 	bic.w	r0, r0, #7
 800a298:	1ac2      	subs	r2, r0, r3
 800a29a:	bf1c      	itt	ne
 800a29c:	1a1b      	subne	r3, r3, r0
 800a29e:	50a3      	strne	r3, [r4, r2]
 800a2a0:	e7af      	b.n	800a202 <_malloc_r+0x22>
 800a2a2:	6862      	ldr	r2, [r4, #4]
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	bf0c      	ite	eq
 800a2a8:	f8c8 2000 	streq.w	r2, [r8]
 800a2ac:	605a      	strne	r2, [r3, #4]
 800a2ae:	e7eb      	b.n	800a288 <_malloc_r+0xa8>
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	6864      	ldr	r4, [r4, #4]
 800a2b4:	e7ae      	b.n	800a214 <_malloc_r+0x34>
 800a2b6:	463c      	mov	r4, r7
 800a2b8:	687f      	ldr	r7, [r7, #4]
 800a2ba:	e7b6      	b.n	800a22a <_malloc_r+0x4a>
 800a2bc:	461a      	mov	r2, r3
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d1fb      	bne.n	800a2bc <_malloc_r+0xdc>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	6053      	str	r3, [r2, #4]
 800a2c8:	e7de      	b.n	800a288 <_malloc_r+0xa8>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	6033      	str	r3, [r6, #0]
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f000 f80c 	bl	800a2ec <__malloc_unlock>
 800a2d4:	e794      	b.n	800a200 <_malloc_r+0x20>
 800a2d6:	6005      	str	r5, [r0, #0]
 800a2d8:	e7d6      	b.n	800a288 <_malloc_r+0xa8>
 800a2da:	bf00      	nop
 800a2dc:	20000730 	.word	0x20000730

0800a2e0 <__malloc_lock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	@ (800a2e8 <__malloc_lock+0x8>)
 800a2e2:	f7ff b8b8 	b.w	8009456 <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20000728 	.word	0x20000728

0800a2ec <__malloc_unlock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	@ (800a2f4 <__malloc_unlock+0x8>)
 800a2ee:	f7ff b8b3 	b.w	8009458 <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	20000728 	.word	0x20000728

0800a2f8 <_Balloc>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	69c6      	ldr	r6, [r0, #28]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	b976      	cbnz	r6, 800a320 <_Balloc+0x28>
 800a302:	2010      	movs	r0, #16
 800a304:	f7ff ff42 	bl	800a18c <malloc>
 800a308:	4602      	mov	r2, r0
 800a30a:	61e0      	str	r0, [r4, #28]
 800a30c:	b920      	cbnz	r0, 800a318 <_Balloc+0x20>
 800a30e:	4b18      	ldr	r3, [pc, #96]	@ (800a370 <_Balloc+0x78>)
 800a310:	4818      	ldr	r0, [pc, #96]	@ (800a374 <_Balloc+0x7c>)
 800a312:	216b      	movs	r1, #107	@ 0x6b
 800a314:	f000 fdae 	bl	800ae74 <__assert_func>
 800a318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a31c:	6006      	str	r6, [r0, #0]
 800a31e:	60c6      	str	r6, [r0, #12]
 800a320:	69e6      	ldr	r6, [r4, #28]
 800a322:	68f3      	ldr	r3, [r6, #12]
 800a324:	b183      	cbz	r3, 800a348 <_Balloc+0x50>
 800a326:	69e3      	ldr	r3, [r4, #28]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a32e:	b9b8      	cbnz	r0, 800a360 <_Balloc+0x68>
 800a330:	2101      	movs	r1, #1
 800a332:	fa01 f605 	lsl.w	r6, r1, r5
 800a336:	1d72      	adds	r2, r6, #5
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fdb8 	bl	800aeb0 <_calloc_r>
 800a340:	b160      	cbz	r0, 800a35c <_Balloc+0x64>
 800a342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a346:	e00e      	b.n	800a366 <_Balloc+0x6e>
 800a348:	2221      	movs	r2, #33	@ 0x21
 800a34a:	2104      	movs	r1, #4
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 fdaf 	bl	800aeb0 <_calloc_r>
 800a352:	69e3      	ldr	r3, [r4, #28]
 800a354:	60f0      	str	r0, [r6, #12]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e4      	bne.n	800a326 <_Balloc+0x2e>
 800a35c:	2000      	movs	r0, #0
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	6802      	ldr	r2, [r0, #0]
 800a362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a366:	2300      	movs	r3, #0
 800a368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a36c:	e7f7      	b.n	800a35e <_Balloc+0x66>
 800a36e:	bf00      	nop
 800a370:	0800b669 	.word	0x0800b669
 800a374:	0800b6e9 	.word	0x0800b6e9

0800a378 <_Bfree>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	69c6      	ldr	r6, [r0, #28]
 800a37c:	4605      	mov	r5, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	b976      	cbnz	r6, 800a3a0 <_Bfree+0x28>
 800a382:	2010      	movs	r0, #16
 800a384:	f7ff ff02 	bl	800a18c <malloc>
 800a388:	4602      	mov	r2, r0
 800a38a:	61e8      	str	r0, [r5, #28]
 800a38c:	b920      	cbnz	r0, 800a398 <_Bfree+0x20>
 800a38e:	4b09      	ldr	r3, [pc, #36]	@ (800a3b4 <_Bfree+0x3c>)
 800a390:	4809      	ldr	r0, [pc, #36]	@ (800a3b8 <_Bfree+0x40>)
 800a392:	218f      	movs	r1, #143	@ 0x8f
 800a394:	f000 fd6e 	bl	800ae74 <__assert_func>
 800a398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a39c:	6006      	str	r6, [r0, #0]
 800a39e:	60c6      	str	r6, [r0, #12]
 800a3a0:	b13c      	cbz	r4, 800a3b2 <_Bfree+0x3a>
 800a3a2:	69eb      	ldr	r3, [r5, #28]
 800a3a4:	6862      	ldr	r2, [r4, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3ac:	6021      	str	r1, [r4, #0]
 800a3ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	0800b669 	.word	0x0800b669
 800a3b8:	0800b6e9 	.word	0x0800b6e9

0800a3bc <__multadd>:
 800a3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c0:	690d      	ldr	r5, [r1, #16]
 800a3c2:	4607      	mov	r7, r0
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	461e      	mov	r6, r3
 800a3c8:	f101 0c14 	add.w	ip, r1, #20
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a3d2:	b299      	uxth	r1, r3
 800a3d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a3d8:	0c1e      	lsrs	r6, r3, #16
 800a3da:	0c0b      	lsrs	r3, r1, #16
 800a3dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a3e0:	b289      	uxth	r1, r1
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3e8:	4285      	cmp	r5, r0
 800a3ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a3ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3f2:	dcec      	bgt.n	800a3ce <__multadd+0x12>
 800a3f4:	b30e      	cbz	r6, 800a43a <__multadd+0x7e>
 800a3f6:	68a3      	ldr	r3, [r4, #8]
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dc19      	bgt.n	800a430 <__multadd+0x74>
 800a3fc:	6861      	ldr	r1, [r4, #4]
 800a3fe:	4638      	mov	r0, r7
 800a400:	3101      	adds	r1, #1
 800a402:	f7ff ff79 	bl	800a2f8 <_Balloc>
 800a406:	4680      	mov	r8, r0
 800a408:	b928      	cbnz	r0, 800a416 <__multadd+0x5a>
 800a40a:	4602      	mov	r2, r0
 800a40c:	4b0c      	ldr	r3, [pc, #48]	@ (800a440 <__multadd+0x84>)
 800a40e:	480d      	ldr	r0, [pc, #52]	@ (800a444 <__multadd+0x88>)
 800a410:	21ba      	movs	r1, #186	@ 0xba
 800a412:	f000 fd2f 	bl	800ae74 <__assert_func>
 800a416:	6922      	ldr	r2, [r4, #16]
 800a418:	3202      	adds	r2, #2
 800a41a:	f104 010c 	add.w	r1, r4, #12
 800a41e:	0092      	lsls	r2, r2, #2
 800a420:	300c      	adds	r0, #12
 800a422:	f000 fd19 	bl	800ae58 <memcpy>
 800a426:	4621      	mov	r1, r4
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff ffa5 	bl	800a378 <_Bfree>
 800a42e:	4644      	mov	r4, r8
 800a430:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a434:	3501      	adds	r5, #1
 800a436:	615e      	str	r6, [r3, #20]
 800a438:	6125      	str	r5, [r4, #16]
 800a43a:	4620      	mov	r0, r4
 800a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a440:	0800b6d8 	.word	0x0800b6d8
 800a444:	0800b6e9 	.word	0x0800b6e9

0800a448 <__hi0bits>:
 800a448:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a44c:	4603      	mov	r3, r0
 800a44e:	bf36      	itet	cc
 800a450:	0403      	lslcc	r3, r0, #16
 800a452:	2000      	movcs	r0, #0
 800a454:	2010      	movcc	r0, #16
 800a456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a45a:	bf3c      	itt	cc
 800a45c:	021b      	lslcc	r3, r3, #8
 800a45e:	3008      	addcc	r0, #8
 800a460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a464:	bf3c      	itt	cc
 800a466:	011b      	lslcc	r3, r3, #4
 800a468:	3004      	addcc	r0, #4
 800a46a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a46e:	bf3c      	itt	cc
 800a470:	009b      	lslcc	r3, r3, #2
 800a472:	3002      	addcc	r0, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	db05      	blt.n	800a484 <__hi0bits+0x3c>
 800a478:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a47c:	f100 0001 	add.w	r0, r0, #1
 800a480:	bf08      	it	eq
 800a482:	2020      	moveq	r0, #32
 800a484:	4770      	bx	lr

0800a486 <__lo0bits>:
 800a486:	6803      	ldr	r3, [r0, #0]
 800a488:	4602      	mov	r2, r0
 800a48a:	f013 0007 	ands.w	r0, r3, #7
 800a48e:	d00b      	beq.n	800a4a8 <__lo0bits+0x22>
 800a490:	07d9      	lsls	r1, r3, #31
 800a492:	d421      	bmi.n	800a4d8 <__lo0bits+0x52>
 800a494:	0798      	lsls	r0, r3, #30
 800a496:	bf49      	itett	mi
 800a498:	085b      	lsrmi	r3, r3, #1
 800a49a:	089b      	lsrpl	r3, r3, #2
 800a49c:	2001      	movmi	r0, #1
 800a49e:	6013      	strmi	r3, [r2, #0]
 800a4a0:	bf5c      	itt	pl
 800a4a2:	6013      	strpl	r3, [r2, #0]
 800a4a4:	2002      	movpl	r0, #2
 800a4a6:	4770      	bx	lr
 800a4a8:	b299      	uxth	r1, r3
 800a4aa:	b909      	cbnz	r1, 800a4b0 <__lo0bits+0x2a>
 800a4ac:	0c1b      	lsrs	r3, r3, #16
 800a4ae:	2010      	movs	r0, #16
 800a4b0:	b2d9      	uxtb	r1, r3
 800a4b2:	b909      	cbnz	r1, 800a4b8 <__lo0bits+0x32>
 800a4b4:	3008      	adds	r0, #8
 800a4b6:	0a1b      	lsrs	r3, r3, #8
 800a4b8:	0719      	lsls	r1, r3, #28
 800a4ba:	bf04      	itt	eq
 800a4bc:	091b      	lsreq	r3, r3, #4
 800a4be:	3004      	addeq	r0, #4
 800a4c0:	0799      	lsls	r1, r3, #30
 800a4c2:	bf04      	itt	eq
 800a4c4:	089b      	lsreq	r3, r3, #2
 800a4c6:	3002      	addeq	r0, #2
 800a4c8:	07d9      	lsls	r1, r3, #31
 800a4ca:	d403      	bmi.n	800a4d4 <__lo0bits+0x4e>
 800a4cc:	085b      	lsrs	r3, r3, #1
 800a4ce:	f100 0001 	add.w	r0, r0, #1
 800a4d2:	d003      	beq.n	800a4dc <__lo0bits+0x56>
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	4770      	bx	lr
 800a4d8:	2000      	movs	r0, #0
 800a4da:	4770      	bx	lr
 800a4dc:	2020      	movs	r0, #32
 800a4de:	4770      	bx	lr

0800a4e0 <__i2b>:
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	f7ff ff07 	bl	800a2f8 <_Balloc>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	b928      	cbnz	r0, 800a4fa <__i2b+0x1a>
 800a4ee:	4b05      	ldr	r3, [pc, #20]	@ (800a504 <__i2b+0x24>)
 800a4f0:	4805      	ldr	r0, [pc, #20]	@ (800a508 <__i2b+0x28>)
 800a4f2:	f240 1145 	movw	r1, #325	@ 0x145
 800a4f6:	f000 fcbd 	bl	800ae74 <__assert_func>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	6144      	str	r4, [r0, #20]
 800a4fe:	6103      	str	r3, [r0, #16]
 800a500:	bd10      	pop	{r4, pc}
 800a502:	bf00      	nop
 800a504:	0800b6d8 	.word	0x0800b6d8
 800a508:	0800b6e9 	.word	0x0800b6e9

0800a50c <__multiply>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	4614      	mov	r4, r2
 800a512:	690a      	ldr	r2, [r1, #16]
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	429a      	cmp	r2, r3
 800a518:	bfa8      	it	ge
 800a51a:	4623      	movge	r3, r4
 800a51c:	460f      	mov	r7, r1
 800a51e:	bfa4      	itt	ge
 800a520:	460c      	movge	r4, r1
 800a522:	461f      	movge	r7, r3
 800a524:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a528:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a52c:	68a3      	ldr	r3, [r4, #8]
 800a52e:	6861      	ldr	r1, [r4, #4]
 800a530:	eb0a 0609 	add.w	r6, sl, r9
 800a534:	42b3      	cmp	r3, r6
 800a536:	b085      	sub	sp, #20
 800a538:	bfb8      	it	lt
 800a53a:	3101      	addlt	r1, #1
 800a53c:	f7ff fedc 	bl	800a2f8 <_Balloc>
 800a540:	b930      	cbnz	r0, 800a550 <__multiply+0x44>
 800a542:	4602      	mov	r2, r0
 800a544:	4b44      	ldr	r3, [pc, #272]	@ (800a658 <__multiply+0x14c>)
 800a546:	4845      	ldr	r0, [pc, #276]	@ (800a65c <__multiply+0x150>)
 800a548:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a54c:	f000 fc92 	bl	800ae74 <__assert_func>
 800a550:	f100 0514 	add.w	r5, r0, #20
 800a554:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a558:	462b      	mov	r3, r5
 800a55a:	2200      	movs	r2, #0
 800a55c:	4543      	cmp	r3, r8
 800a55e:	d321      	bcc.n	800a5a4 <__multiply+0x98>
 800a560:	f107 0114 	add.w	r1, r7, #20
 800a564:	f104 0214 	add.w	r2, r4, #20
 800a568:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a56c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a570:	9302      	str	r3, [sp, #8]
 800a572:	1b13      	subs	r3, r2, r4
 800a574:	3b15      	subs	r3, #21
 800a576:	f023 0303 	bic.w	r3, r3, #3
 800a57a:	3304      	adds	r3, #4
 800a57c:	f104 0715 	add.w	r7, r4, #21
 800a580:	42ba      	cmp	r2, r7
 800a582:	bf38      	it	cc
 800a584:	2304      	movcc	r3, #4
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	9b02      	ldr	r3, [sp, #8]
 800a58a:	9103      	str	r1, [sp, #12]
 800a58c:	428b      	cmp	r3, r1
 800a58e:	d80c      	bhi.n	800a5aa <__multiply+0x9e>
 800a590:	2e00      	cmp	r6, #0
 800a592:	dd03      	ble.n	800a59c <__multiply+0x90>
 800a594:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d05b      	beq.n	800a654 <__multiply+0x148>
 800a59c:	6106      	str	r6, [r0, #16]
 800a59e:	b005      	add	sp, #20
 800a5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a4:	f843 2b04 	str.w	r2, [r3], #4
 800a5a8:	e7d8      	b.n	800a55c <__multiply+0x50>
 800a5aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800a5ae:	f1ba 0f00 	cmp.w	sl, #0
 800a5b2:	d024      	beq.n	800a5fe <__multiply+0xf2>
 800a5b4:	f104 0e14 	add.w	lr, r4, #20
 800a5b8:	46a9      	mov	r9, r5
 800a5ba:	f04f 0c00 	mov.w	ip, #0
 800a5be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5c2:	f8d9 3000 	ldr.w	r3, [r9]
 800a5c6:	fa1f fb87 	uxth.w	fp, r7
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800a5d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a5d4:	f8d9 7000 	ldr.w	r7, [r9]
 800a5d8:	4463      	add	r3, ip
 800a5da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5de:	fb0a c70b 	mla	r7, sl, fp, ip
 800a5e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5ec:	4572      	cmp	r2, lr
 800a5ee:	f849 3b04 	str.w	r3, [r9], #4
 800a5f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5f6:	d8e2      	bhi.n	800a5be <__multiply+0xb2>
 800a5f8:	9b01      	ldr	r3, [sp, #4]
 800a5fa:	f845 c003 	str.w	ip, [r5, r3]
 800a5fe:	9b03      	ldr	r3, [sp, #12]
 800a600:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a604:	3104      	adds	r1, #4
 800a606:	f1b9 0f00 	cmp.w	r9, #0
 800a60a:	d021      	beq.n	800a650 <__multiply+0x144>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	f104 0c14 	add.w	ip, r4, #20
 800a612:	46ae      	mov	lr, r5
 800a614:	f04f 0a00 	mov.w	sl, #0
 800a618:	f8bc b000 	ldrh.w	fp, [ip]
 800a61c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a620:	fb09 770b 	mla	r7, r9, fp, r7
 800a624:	4457      	add	r7, sl
 800a626:	b29b      	uxth	r3, r3
 800a628:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a62c:	f84e 3b04 	str.w	r3, [lr], #4
 800a630:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a634:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a638:	f8be 3000 	ldrh.w	r3, [lr]
 800a63c:	fb09 330a 	mla	r3, r9, sl, r3
 800a640:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a644:	4562      	cmp	r2, ip
 800a646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a64a:	d8e5      	bhi.n	800a618 <__multiply+0x10c>
 800a64c:	9f01      	ldr	r7, [sp, #4]
 800a64e:	51eb      	str	r3, [r5, r7]
 800a650:	3504      	adds	r5, #4
 800a652:	e799      	b.n	800a588 <__multiply+0x7c>
 800a654:	3e01      	subs	r6, #1
 800a656:	e79b      	b.n	800a590 <__multiply+0x84>
 800a658:	0800b6d8 	.word	0x0800b6d8
 800a65c:	0800b6e9 	.word	0x0800b6e9

0800a660 <__pow5mult>:
 800a660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a664:	4615      	mov	r5, r2
 800a666:	f012 0203 	ands.w	r2, r2, #3
 800a66a:	4607      	mov	r7, r0
 800a66c:	460e      	mov	r6, r1
 800a66e:	d007      	beq.n	800a680 <__pow5mult+0x20>
 800a670:	4c25      	ldr	r4, [pc, #148]	@ (800a708 <__pow5mult+0xa8>)
 800a672:	3a01      	subs	r2, #1
 800a674:	2300      	movs	r3, #0
 800a676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a67a:	f7ff fe9f 	bl	800a3bc <__multadd>
 800a67e:	4606      	mov	r6, r0
 800a680:	10ad      	asrs	r5, r5, #2
 800a682:	d03d      	beq.n	800a700 <__pow5mult+0xa0>
 800a684:	69fc      	ldr	r4, [r7, #28]
 800a686:	b97c      	cbnz	r4, 800a6a8 <__pow5mult+0x48>
 800a688:	2010      	movs	r0, #16
 800a68a:	f7ff fd7f 	bl	800a18c <malloc>
 800a68e:	4602      	mov	r2, r0
 800a690:	61f8      	str	r0, [r7, #28]
 800a692:	b928      	cbnz	r0, 800a6a0 <__pow5mult+0x40>
 800a694:	4b1d      	ldr	r3, [pc, #116]	@ (800a70c <__pow5mult+0xac>)
 800a696:	481e      	ldr	r0, [pc, #120]	@ (800a710 <__pow5mult+0xb0>)
 800a698:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a69c:	f000 fbea 	bl	800ae74 <__assert_func>
 800a6a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6a4:	6004      	str	r4, [r0, #0]
 800a6a6:	60c4      	str	r4, [r0, #12]
 800a6a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a6ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6b0:	b94c      	cbnz	r4, 800a6c6 <__pow5mult+0x66>
 800a6b2:	f240 2171 	movw	r1, #625	@ 0x271
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7ff ff12 	bl	800a4e0 <__i2b>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	6003      	str	r3, [r0, #0]
 800a6c6:	f04f 0900 	mov.w	r9, #0
 800a6ca:	07eb      	lsls	r3, r5, #31
 800a6cc:	d50a      	bpl.n	800a6e4 <__pow5mult+0x84>
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	f7ff ff1a 	bl	800a50c <__multiply>
 800a6d8:	4631      	mov	r1, r6
 800a6da:	4680      	mov	r8, r0
 800a6dc:	4638      	mov	r0, r7
 800a6de:	f7ff fe4b 	bl	800a378 <_Bfree>
 800a6e2:	4646      	mov	r6, r8
 800a6e4:	106d      	asrs	r5, r5, #1
 800a6e6:	d00b      	beq.n	800a700 <__pow5mult+0xa0>
 800a6e8:	6820      	ldr	r0, [r4, #0]
 800a6ea:	b938      	cbnz	r0, 800a6fc <__pow5mult+0x9c>
 800a6ec:	4622      	mov	r2, r4
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff ff0b 	bl	800a50c <__multiply>
 800a6f6:	6020      	str	r0, [r4, #0]
 800a6f8:	f8c0 9000 	str.w	r9, [r0]
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	e7e4      	b.n	800a6ca <__pow5mult+0x6a>
 800a700:	4630      	mov	r0, r6
 800a702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a706:	bf00      	nop
 800a708:	0800b744 	.word	0x0800b744
 800a70c:	0800b669 	.word	0x0800b669
 800a710:	0800b6e9 	.word	0x0800b6e9

0800a714 <__lshift>:
 800a714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a718:	460c      	mov	r4, r1
 800a71a:	6849      	ldr	r1, [r1, #4]
 800a71c:	6923      	ldr	r3, [r4, #16]
 800a71e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	4607      	mov	r7, r0
 800a726:	4691      	mov	r9, r2
 800a728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a72c:	f108 0601 	add.w	r6, r8, #1
 800a730:	42b3      	cmp	r3, r6
 800a732:	db0b      	blt.n	800a74c <__lshift+0x38>
 800a734:	4638      	mov	r0, r7
 800a736:	f7ff fddf 	bl	800a2f8 <_Balloc>
 800a73a:	4605      	mov	r5, r0
 800a73c:	b948      	cbnz	r0, 800a752 <__lshift+0x3e>
 800a73e:	4602      	mov	r2, r0
 800a740:	4b28      	ldr	r3, [pc, #160]	@ (800a7e4 <__lshift+0xd0>)
 800a742:	4829      	ldr	r0, [pc, #164]	@ (800a7e8 <__lshift+0xd4>)
 800a744:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a748:	f000 fb94 	bl	800ae74 <__assert_func>
 800a74c:	3101      	adds	r1, #1
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	e7ee      	b.n	800a730 <__lshift+0x1c>
 800a752:	2300      	movs	r3, #0
 800a754:	f100 0114 	add.w	r1, r0, #20
 800a758:	f100 0210 	add.w	r2, r0, #16
 800a75c:	4618      	mov	r0, r3
 800a75e:	4553      	cmp	r3, sl
 800a760:	db33      	blt.n	800a7ca <__lshift+0xb6>
 800a762:	6920      	ldr	r0, [r4, #16]
 800a764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a768:	f104 0314 	add.w	r3, r4, #20
 800a76c:	f019 091f 	ands.w	r9, r9, #31
 800a770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a774:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a778:	d02b      	beq.n	800a7d2 <__lshift+0xbe>
 800a77a:	f1c9 0e20 	rsb	lr, r9, #32
 800a77e:	468a      	mov	sl, r1
 800a780:	2200      	movs	r2, #0
 800a782:	6818      	ldr	r0, [r3, #0]
 800a784:	fa00 f009 	lsl.w	r0, r0, r9
 800a788:	4310      	orrs	r0, r2
 800a78a:	f84a 0b04 	str.w	r0, [sl], #4
 800a78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a792:	459c      	cmp	ip, r3
 800a794:	fa22 f20e 	lsr.w	r2, r2, lr
 800a798:	d8f3      	bhi.n	800a782 <__lshift+0x6e>
 800a79a:	ebac 0304 	sub.w	r3, ip, r4
 800a79e:	3b15      	subs	r3, #21
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	f104 0015 	add.w	r0, r4, #21
 800a7aa:	4584      	cmp	ip, r0
 800a7ac:	bf38      	it	cc
 800a7ae:	2304      	movcc	r3, #4
 800a7b0:	50ca      	str	r2, [r1, r3]
 800a7b2:	b10a      	cbz	r2, 800a7b8 <__lshift+0xa4>
 800a7b4:	f108 0602 	add.w	r6, r8, #2
 800a7b8:	3e01      	subs	r6, #1
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	612e      	str	r6, [r5, #16]
 800a7be:	4621      	mov	r1, r4
 800a7c0:	f7ff fdda 	bl	800a378 <_Bfree>
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	e7c5      	b.n	800a75e <__lshift+0x4a>
 800a7d2:	3904      	subs	r1, #4
 800a7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7dc:	459c      	cmp	ip, r3
 800a7de:	d8f9      	bhi.n	800a7d4 <__lshift+0xc0>
 800a7e0:	e7ea      	b.n	800a7b8 <__lshift+0xa4>
 800a7e2:	bf00      	nop
 800a7e4:	0800b6d8 	.word	0x0800b6d8
 800a7e8:	0800b6e9 	.word	0x0800b6e9

0800a7ec <__mcmp>:
 800a7ec:	690a      	ldr	r2, [r1, #16]
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	6900      	ldr	r0, [r0, #16]
 800a7f2:	1a80      	subs	r0, r0, r2
 800a7f4:	b530      	push	{r4, r5, lr}
 800a7f6:	d10e      	bne.n	800a816 <__mcmp+0x2a>
 800a7f8:	3314      	adds	r3, #20
 800a7fa:	3114      	adds	r1, #20
 800a7fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a800:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a804:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a808:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a80c:	4295      	cmp	r5, r2
 800a80e:	d003      	beq.n	800a818 <__mcmp+0x2c>
 800a810:	d205      	bcs.n	800a81e <__mcmp+0x32>
 800a812:	f04f 30ff 	mov.w	r0, #4294967295
 800a816:	bd30      	pop	{r4, r5, pc}
 800a818:	42a3      	cmp	r3, r4
 800a81a:	d3f3      	bcc.n	800a804 <__mcmp+0x18>
 800a81c:	e7fb      	b.n	800a816 <__mcmp+0x2a>
 800a81e:	2001      	movs	r0, #1
 800a820:	e7f9      	b.n	800a816 <__mcmp+0x2a>
	...

0800a824 <__mdiff>:
 800a824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	4689      	mov	r9, r1
 800a82a:	4606      	mov	r6, r0
 800a82c:	4611      	mov	r1, r2
 800a82e:	4648      	mov	r0, r9
 800a830:	4614      	mov	r4, r2
 800a832:	f7ff ffdb 	bl	800a7ec <__mcmp>
 800a836:	1e05      	subs	r5, r0, #0
 800a838:	d112      	bne.n	800a860 <__mdiff+0x3c>
 800a83a:	4629      	mov	r1, r5
 800a83c:	4630      	mov	r0, r6
 800a83e:	f7ff fd5b 	bl	800a2f8 <_Balloc>
 800a842:	4602      	mov	r2, r0
 800a844:	b928      	cbnz	r0, 800a852 <__mdiff+0x2e>
 800a846:	4b3f      	ldr	r3, [pc, #252]	@ (800a944 <__mdiff+0x120>)
 800a848:	f240 2137 	movw	r1, #567	@ 0x237
 800a84c:	483e      	ldr	r0, [pc, #248]	@ (800a948 <__mdiff+0x124>)
 800a84e:	f000 fb11 	bl	800ae74 <__assert_func>
 800a852:	2301      	movs	r3, #1
 800a854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a858:	4610      	mov	r0, r2
 800a85a:	b003      	add	sp, #12
 800a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a860:	bfbc      	itt	lt
 800a862:	464b      	movlt	r3, r9
 800a864:	46a1      	movlt	r9, r4
 800a866:	4630      	mov	r0, r6
 800a868:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a86c:	bfba      	itte	lt
 800a86e:	461c      	movlt	r4, r3
 800a870:	2501      	movlt	r5, #1
 800a872:	2500      	movge	r5, #0
 800a874:	f7ff fd40 	bl	800a2f8 <_Balloc>
 800a878:	4602      	mov	r2, r0
 800a87a:	b918      	cbnz	r0, 800a884 <__mdiff+0x60>
 800a87c:	4b31      	ldr	r3, [pc, #196]	@ (800a944 <__mdiff+0x120>)
 800a87e:	f240 2145 	movw	r1, #581	@ 0x245
 800a882:	e7e3      	b.n	800a84c <__mdiff+0x28>
 800a884:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a888:	6926      	ldr	r6, [r4, #16]
 800a88a:	60c5      	str	r5, [r0, #12]
 800a88c:	f109 0310 	add.w	r3, r9, #16
 800a890:	f109 0514 	add.w	r5, r9, #20
 800a894:	f104 0e14 	add.w	lr, r4, #20
 800a898:	f100 0b14 	add.w	fp, r0, #20
 800a89c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a8a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	46d9      	mov	r9, fp
 800a8a8:	f04f 0c00 	mov.w	ip, #0
 800a8ac:	9b01      	ldr	r3, [sp, #4]
 800a8ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a8b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	fa1f f38a 	uxth.w	r3, sl
 800a8bc:	4619      	mov	r1, r3
 800a8be:	b283      	uxth	r3, r0
 800a8c0:	1acb      	subs	r3, r1, r3
 800a8c2:	0c00      	lsrs	r0, r0, #16
 800a8c4:	4463      	add	r3, ip
 800a8c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a8ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8d4:	4576      	cmp	r6, lr
 800a8d6:	f849 3b04 	str.w	r3, [r9], #4
 800a8da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8de:	d8e5      	bhi.n	800a8ac <__mdiff+0x88>
 800a8e0:	1b33      	subs	r3, r6, r4
 800a8e2:	3b15      	subs	r3, #21
 800a8e4:	f023 0303 	bic.w	r3, r3, #3
 800a8e8:	3415      	adds	r4, #21
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	42a6      	cmp	r6, r4
 800a8ee:	bf38      	it	cc
 800a8f0:	2304      	movcc	r3, #4
 800a8f2:	441d      	add	r5, r3
 800a8f4:	445b      	add	r3, fp
 800a8f6:	461e      	mov	r6, r3
 800a8f8:	462c      	mov	r4, r5
 800a8fa:	4544      	cmp	r4, r8
 800a8fc:	d30e      	bcc.n	800a91c <__mdiff+0xf8>
 800a8fe:	f108 0103 	add.w	r1, r8, #3
 800a902:	1b49      	subs	r1, r1, r5
 800a904:	f021 0103 	bic.w	r1, r1, #3
 800a908:	3d03      	subs	r5, #3
 800a90a:	45a8      	cmp	r8, r5
 800a90c:	bf38      	it	cc
 800a90e:	2100      	movcc	r1, #0
 800a910:	440b      	add	r3, r1
 800a912:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a916:	b191      	cbz	r1, 800a93e <__mdiff+0x11a>
 800a918:	6117      	str	r7, [r2, #16]
 800a91a:	e79d      	b.n	800a858 <__mdiff+0x34>
 800a91c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a920:	46e6      	mov	lr, ip
 800a922:	0c08      	lsrs	r0, r1, #16
 800a924:	fa1c fc81 	uxtah	ip, ip, r1
 800a928:	4471      	add	r1, lr
 800a92a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a92e:	b289      	uxth	r1, r1
 800a930:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a934:	f846 1b04 	str.w	r1, [r6], #4
 800a938:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a93c:	e7dd      	b.n	800a8fa <__mdiff+0xd6>
 800a93e:	3f01      	subs	r7, #1
 800a940:	e7e7      	b.n	800a912 <__mdiff+0xee>
 800a942:	bf00      	nop
 800a944:	0800b6d8 	.word	0x0800b6d8
 800a948:	0800b6e9 	.word	0x0800b6e9

0800a94c <__d2b>:
 800a94c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a950:	460f      	mov	r7, r1
 800a952:	2101      	movs	r1, #1
 800a954:	ec59 8b10 	vmov	r8, r9, d0
 800a958:	4616      	mov	r6, r2
 800a95a:	f7ff fccd 	bl	800a2f8 <_Balloc>
 800a95e:	4604      	mov	r4, r0
 800a960:	b930      	cbnz	r0, 800a970 <__d2b+0x24>
 800a962:	4602      	mov	r2, r0
 800a964:	4b23      	ldr	r3, [pc, #140]	@ (800a9f4 <__d2b+0xa8>)
 800a966:	4824      	ldr	r0, [pc, #144]	@ (800a9f8 <__d2b+0xac>)
 800a968:	f240 310f 	movw	r1, #783	@ 0x30f
 800a96c:	f000 fa82 	bl	800ae74 <__assert_func>
 800a970:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a974:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a978:	b10d      	cbz	r5, 800a97e <__d2b+0x32>
 800a97a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	f1b8 0300 	subs.w	r3, r8, #0
 800a984:	d023      	beq.n	800a9ce <__d2b+0x82>
 800a986:	4668      	mov	r0, sp
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	f7ff fd7c 	bl	800a486 <__lo0bits>
 800a98e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a992:	b1d0      	cbz	r0, 800a9ca <__d2b+0x7e>
 800a994:	f1c0 0320 	rsb	r3, r0, #32
 800a998:	fa02 f303 	lsl.w	r3, r2, r3
 800a99c:	430b      	orrs	r3, r1
 800a99e:	40c2      	lsrs	r2, r0
 800a9a0:	6163      	str	r3, [r4, #20]
 800a9a2:	9201      	str	r2, [sp, #4]
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	61a3      	str	r3, [r4, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bf0c      	ite	eq
 800a9ac:	2201      	moveq	r2, #1
 800a9ae:	2202      	movne	r2, #2
 800a9b0:	6122      	str	r2, [r4, #16]
 800a9b2:	b1a5      	cbz	r5, 800a9de <__d2b+0x92>
 800a9b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9b8:	4405      	add	r5, r0
 800a9ba:	603d      	str	r5, [r7, #0]
 800a9bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9c0:	6030      	str	r0, [r6, #0]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	b003      	add	sp, #12
 800a9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9ca:	6161      	str	r1, [r4, #20]
 800a9cc:	e7ea      	b.n	800a9a4 <__d2b+0x58>
 800a9ce:	a801      	add	r0, sp, #4
 800a9d0:	f7ff fd59 	bl	800a486 <__lo0bits>
 800a9d4:	9b01      	ldr	r3, [sp, #4]
 800a9d6:	6163      	str	r3, [r4, #20]
 800a9d8:	3020      	adds	r0, #32
 800a9da:	2201      	movs	r2, #1
 800a9dc:	e7e8      	b.n	800a9b0 <__d2b+0x64>
 800a9de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a9e6:	6038      	str	r0, [r7, #0]
 800a9e8:	6918      	ldr	r0, [r3, #16]
 800a9ea:	f7ff fd2d 	bl	800a448 <__hi0bits>
 800a9ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9f2:	e7e5      	b.n	800a9c0 <__d2b+0x74>
 800a9f4:	0800b6d8 	.word	0x0800b6d8
 800a9f8:	0800b6e9 	.word	0x0800b6e9

0800a9fc <__ssputs_r>:
 800a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa00:	688e      	ldr	r6, [r1, #8]
 800aa02:	461f      	mov	r7, r3
 800aa04:	42be      	cmp	r6, r7
 800aa06:	680b      	ldr	r3, [r1, #0]
 800aa08:	4682      	mov	sl, r0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	4690      	mov	r8, r2
 800aa0e:	d82d      	bhi.n	800aa6c <__ssputs_r+0x70>
 800aa10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa18:	d026      	beq.n	800aa68 <__ssputs_r+0x6c>
 800aa1a:	6965      	ldr	r5, [r4, #20]
 800aa1c:	6909      	ldr	r1, [r1, #16]
 800aa1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa22:	eba3 0901 	sub.w	r9, r3, r1
 800aa26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa2a:	1c7b      	adds	r3, r7, #1
 800aa2c:	444b      	add	r3, r9
 800aa2e:	106d      	asrs	r5, r5, #1
 800aa30:	429d      	cmp	r5, r3
 800aa32:	bf38      	it	cc
 800aa34:	461d      	movcc	r5, r3
 800aa36:	0553      	lsls	r3, r2, #21
 800aa38:	d527      	bpl.n	800aa8a <__ssputs_r+0x8e>
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	f7ff fbd0 	bl	800a1e0 <_malloc_r>
 800aa40:	4606      	mov	r6, r0
 800aa42:	b360      	cbz	r0, 800aa9e <__ssputs_r+0xa2>
 800aa44:	6921      	ldr	r1, [r4, #16]
 800aa46:	464a      	mov	r2, r9
 800aa48:	f000 fa06 	bl	800ae58 <memcpy>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa56:	81a3      	strh	r3, [r4, #12]
 800aa58:	6126      	str	r6, [r4, #16]
 800aa5a:	6165      	str	r5, [r4, #20]
 800aa5c:	444e      	add	r6, r9
 800aa5e:	eba5 0509 	sub.w	r5, r5, r9
 800aa62:	6026      	str	r6, [r4, #0]
 800aa64:	60a5      	str	r5, [r4, #8]
 800aa66:	463e      	mov	r6, r7
 800aa68:	42be      	cmp	r6, r7
 800aa6a:	d900      	bls.n	800aa6e <__ssputs_r+0x72>
 800aa6c:	463e      	mov	r6, r7
 800aa6e:	6820      	ldr	r0, [r4, #0]
 800aa70:	4632      	mov	r2, r6
 800aa72:	4641      	mov	r1, r8
 800aa74:	f000 f9c6 	bl	800ae04 <memmove>
 800aa78:	68a3      	ldr	r3, [r4, #8]
 800aa7a:	1b9b      	subs	r3, r3, r6
 800aa7c:	60a3      	str	r3, [r4, #8]
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	4433      	add	r3, r6
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	2000      	movs	r0, #0
 800aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	f000 fa36 	bl	800aefc <_realloc_r>
 800aa90:	4606      	mov	r6, r0
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d1e0      	bne.n	800aa58 <__ssputs_r+0x5c>
 800aa96:	6921      	ldr	r1, [r4, #16]
 800aa98:	4650      	mov	r0, sl
 800aa9a:	f7ff fb2d 	bl	800a0f8 <_free_r>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	f8ca 3000 	str.w	r3, [sl]
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	e7e9      	b.n	800aa86 <__ssputs_r+0x8a>
	...

0800aab4 <_svfiprintf_r>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	4698      	mov	r8, r3
 800aaba:	898b      	ldrh	r3, [r1, #12]
 800aabc:	061b      	lsls	r3, r3, #24
 800aabe:	b09d      	sub	sp, #116	@ 0x74
 800aac0:	4607      	mov	r7, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	4614      	mov	r4, r2
 800aac6:	d510      	bpl.n	800aaea <_svfiprintf_r+0x36>
 800aac8:	690b      	ldr	r3, [r1, #16]
 800aaca:	b973      	cbnz	r3, 800aaea <_svfiprintf_r+0x36>
 800aacc:	2140      	movs	r1, #64	@ 0x40
 800aace:	f7ff fb87 	bl	800a1e0 <_malloc_r>
 800aad2:	6028      	str	r0, [r5, #0]
 800aad4:	6128      	str	r0, [r5, #16]
 800aad6:	b930      	cbnz	r0, 800aae6 <_svfiprintf_r+0x32>
 800aad8:	230c      	movs	r3, #12
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	b01d      	add	sp, #116	@ 0x74
 800aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae6:	2340      	movs	r3, #64	@ 0x40
 800aae8:	616b      	str	r3, [r5, #20]
 800aaea:	2300      	movs	r3, #0
 800aaec:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaee:	2320      	movs	r3, #32
 800aaf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aaf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaf8:	2330      	movs	r3, #48	@ 0x30
 800aafa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac98 <_svfiprintf_r+0x1e4>
 800aafe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab02:	f04f 0901 	mov.w	r9, #1
 800ab06:	4623      	mov	r3, r4
 800ab08:	469a      	mov	sl, r3
 800ab0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab0e:	b10a      	cbz	r2, 800ab14 <_svfiprintf_r+0x60>
 800ab10:	2a25      	cmp	r2, #37	@ 0x25
 800ab12:	d1f9      	bne.n	800ab08 <_svfiprintf_r+0x54>
 800ab14:	ebba 0b04 	subs.w	fp, sl, r4
 800ab18:	d00b      	beq.n	800ab32 <_svfiprintf_r+0x7e>
 800ab1a:	465b      	mov	r3, fp
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ff6b 	bl	800a9fc <__ssputs_r>
 800ab26:	3001      	adds	r0, #1
 800ab28:	f000 80a7 	beq.w	800ac7a <_svfiprintf_r+0x1c6>
 800ab2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab2e:	445a      	add	r2, fp
 800ab30:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab32:	f89a 3000 	ldrb.w	r3, [sl]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 809f 	beq.w	800ac7a <_svfiprintf_r+0x1c6>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab46:	f10a 0a01 	add.w	sl, sl, #1
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	9307      	str	r3, [sp, #28]
 800ab4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab52:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab54:	4654      	mov	r4, sl
 800ab56:	2205      	movs	r2, #5
 800ab58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5c:	484e      	ldr	r0, [pc, #312]	@ (800ac98 <_svfiprintf_r+0x1e4>)
 800ab5e:	f7f5 fb3f 	bl	80001e0 <memchr>
 800ab62:	9a04      	ldr	r2, [sp, #16]
 800ab64:	b9d8      	cbnz	r0, 800ab9e <_svfiprintf_r+0xea>
 800ab66:	06d0      	lsls	r0, r2, #27
 800ab68:	bf44      	itt	mi
 800ab6a:	2320      	movmi	r3, #32
 800ab6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab70:	0711      	lsls	r1, r2, #28
 800ab72:	bf44      	itt	mi
 800ab74:	232b      	movmi	r3, #43	@ 0x2b
 800ab76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab80:	d015      	beq.n	800abae <_svfiprintf_r+0xfa>
 800ab82:	9a07      	ldr	r2, [sp, #28]
 800ab84:	4654      	mov	r4, sl
 800ab86:	2000      	movs	r0, #0
 800ab88:	f04f 0c0a 	mov.w	ip, #10
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab92:	3b30      	subs	r3, #48	@ 0x30
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d94b      	bls.n	800ac30 <_svfiprintf_r+0x17c>
 800ab98:	b1b0      	cbz	r0, 800abc8 <_svfiprintf_r+0x114>
 800ab9a:	9207      	str	r2, [sp, #28]
 800ab9c:	e014      	b.n	800abc8 <_svfiprintf_r+0x114>
 800ab9e:	eba0 0308 	sub.w	r3, r0, r8
 800aba2:	fa09 f303 	lsl.w	r3, r9, r3
 800aba6:	4313      	orrs	r3, r2
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	46a2      	mov	sl, r4
 800abac:	e7d2      	b.n	800ab54 <_svfiprintf_r+0xa0>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	1d19      	adds	r1, r3, #4
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	9103      	str	r1, [sp, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bfbb      	ittet	lt
 800abba:	425b      	neglt	r3, r3
 800abbc:	f042 0202 	orrlt.w	r2, r2, #2
 800abc0:	9307      	strge	r3, [sp, #28]
 800abc2:	9307      	strlt	r3, [sp, #28]
 800abc4:	bfb8      	it	lt
 800abc6:	9204      	strlt	r2, [sp, #16]
 800abc8:	7823      	ldrb	r3, [r4, #0]
 800abca:	2b2e      	cmp	r3, #46	@ 0x2e
 800abcc:	d10a      	bne.n	800abe4 <_svfiprintf_r+0x130>
 800abce:	7863      	ldrb	r3, [r4, #1]
 800abd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd2:	d132      	bne.n	800ac3a <_svfiprintf_r+0x186>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1d1a      	adds	r2, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	9203      	str	r2, [sp, #12]
 800abdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abe0:	3402      	adds	r4, #2
 800abe2:	9305      	str	r3, [sp, #20]
 800abe4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aca8 <_svfiprintf_r+0x1f4>
 800abe8:	7821      	ldrb	r1, [r4, #0]
 800abea:	2203      	movs	r2, #3
 800abec:	4650      	mov	r0, sl
 800abee:	f7f5 faf7 	bl	80001e0 <memchr>
 800abf2:	b138      	cbz	r0, 800ac04 <_svfiprintf_r+0x150>
 800abf4:	9b04      	ldr	r3, [sp, #16]
 800abf6:	eba0 000a 	sub.w	r0, r0, sl
 800abfa:	2240      	movs	r2, #64	@ 0x40
 800abfc:	4082      	lsls	r2, r0
 800abfe:	4313      	orrs	r3, r2
 800ac00:	3401      	adds	r4, #1
 800ac02:	9304      	str	r3, [sp, #16]
 800ac04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac08:	4824      	ldr	r0, [pc, #144]	@ (800ac9c <_svfiprintf_r+0x1e8>)
 800ac0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac0e:	2206      	movs	r2, #6
 800ac10:	f7f5 fae6 	bl	80001e0 <memchr>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d036      	beq.n	800ac86 <_svfiprintf_r+0x1d2>
 800ac18:	4b21      	ldr	r3, [pc, #132]	@ (800aca0 <_svfiprintf_r+0x1ec>)
 800ac1a:	bb1b      	cbnz	r3, 800ac64 <_svfiprintf_r+0x1b0>
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	3307      	adds	r3, #7
 800ac20:	f023 0307 	bic.w	r3, r3, #7
 800ac24:	3308      	adds	r3, #8
 800ac26:	9303      	str	r3, [sp, #12]
 800ac28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac2a:	4433      	add	r3, r6
 800ac2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2e:	e76a      	b.n	800ab06 <_svfiprintf_r+0x52>
 800ac30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac34:	460c      	mov	r4, r1
 800ac36:	2001      	movs	r0, #1
 800ac38:	e7a8      	b.n	800ab8c <_svfiprintf_r+0xd8>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	3401      	adds	r4, #1
 800ac3e:	9305      	str	r3, [sp, #20]
 800ac40:	4619      	mov	r1, r3
 800ac42:	f04f 0c0a 	mov.w	ip, #10
 800ac46:	4620      	mov	r0, r4
 800ac48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac4c:	3a30      	subs	r2, #48	@ 0x30
 800ac4e:	2a09      	cmp	r2, #9
 800ac50:	d903      	bls.n	800ac5a <_svfiprintf_r+0x1a6>
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0c6      	beq.n	800abe4 <_svfiprintf_r+0x130>
 800ac56:	9105      	str	r1, [sp, #20]
 800ac58:	e7c4      	b.n	800abe4 <_svfiprintf_r+0x130>
 800ac5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac5e:	4604      	mov	r4, r0
 800ac60:	2301      	movs	r3, #1
 800ac62:	e7f0      	b.n	800ac46 <_svfiprintf_r+0x192>
 800ac64:	ab03      	add	r3, sp, #12
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	462a      	mov	r2, r5
 800ac6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <_svfiprintf_r+0x1f0>)
 800ac6c:	a904      	add	r1, sp, #16
 800ac6e:	4638      	mov	r0, r7
 800ac70:	f7fd fe82 	bl	8008978 <_printf_float>
 800ac74:	1c42      	adds	r2, r0, #1
 800ac76:	4606      	mov	r6, r0
 800ac78:	d1d6      	bne.n	800ac28 <_svfiprintf_r+0x174>
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	065b      	lsls	r3, r3, #25
 800ac7e:	f53f af2d 	bmi.w	800aadc <_svfiprintf_r+0x28>
 800ac82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac84:	e72c      	b.n	800aae0 <_svfiprintf_r+0x2c>
 800ac86:	ab03      	add	r3, sp, #12
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	4b05      	ldr	r3, [pc, #20]	@ (800aca4 <_svfiprintf_r+0x1f0>)
 800ac8e:	a904      	add	r1, sp, #16
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7fe f909 	bl	8008ea8 <_printf_i>
 800ac96:	e7ed      	b.n	800ac74 <_svfiprintf_r+0x1c0>
 800ac98:	0800b840 	.word	0x0800b840
 800ac9c:	0800b84a 	.word	0x0800b84a
 800aca0:	08008979 	.word	0x08008979
 800aca4:	0800a9fd 	.word	0x0800a9fd
 800aca8:	0800b846 	.word	0x0800b846

0800acac <__sflush_r>:
 800acac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	0716      	lsls	r6, r2, #28
 800acb6:	4605      	mov	r5, r0
 800acb8:	460c      	mov	r4, r1
 800acba:	d454      	bmi.n	800ad66 <__sflush_r+0xba>
 800acbc:	684b      	ldr	r3, [r1, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dc02      	bgt.n	800acc8 <__sflush_r+0x1c>
 800acc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dd48      	ble.n	800ad5a <__sflush_r+0xae>
 800acc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800acca:	2e00      	cmp	r6, #0
 800accc:	d045      	beq.n	800ad5a <__sflush_r+0xae>
 800acce:	2300      	movs	r3, #0
 800acd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800acd4:	682f      	ldr	r7, [r5, #0]
 800acd6:	6a21      	ldr	r1, [r4, #32]
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	d030      	beq.n	800ad3e <__sflush_r+0x92>
 800acdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	0759      	lsls	r1, r3, #29
 800ace2:	d505      	bpl.n	800acf0 <__sflush_r+0x44>
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	1ad2      	subs	r2, r2, r3
 800ace8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800acea:	b10b      	cbz	r3, 800acf0 <__sflush_r+0x44>
 800acec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acee:	1ad2      	subs	r2, r2, r3
 800acf0:	2300      	movs	r3, #0
 800acf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800acf4:	6a21      	ldr	r1, [r4, #32]
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b0      	blx	r6
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	d106      	bne.n	800ad0e <__sflush_r+0x62>
 800ad00:	6829      	ldr	r1, [r5, #0]
 800ad02:	291d      	cmp	r1, #29
 800ad04:	d82b      	bhi.n	800ad5e <__sflush_r+0xb2>
 800ad06:	4a2a      	ldr	r2, [pc, #168]	@ (800adb0 <__sflush_r+0x104>)
 800ad08:	410a      	asrs	r2, r1
 800ad0a:	07d6      	lsls	r6, r2, #31
 800ad0c:	d427      	bmi.n	800ad5e <__sflush_r+0xb2>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	6062      	str	r2, [r4, #4]
 800ad12:	04d9      	lsls	r1, r3, #19
 800ad14:	6922      	ldr	r2, [r4, #16]
 800ad16:	6022      	str	r2, [r4, #0]
 800ad18:	d504      	bpl.n	800ad24 <__sflush_r+0x78>
 800ad1a:	1c42      	adds	r2, r0, #1
 800ad1c:	d101      	bne.n	800ad22 <__sflush_r+0x76>
 800ad1e:	682b      	ldr	r3, [r5, #0]
 800ad20:	b903      	cbnz	r3, 800ad24 <__sflush_r+0x78>
 800ad22:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad26:	602f      	str	r7, [r5, #0]
 800ad28:	b1b9      	cbz	r1, 800ad5a <__sflush_r+0xae>
 800ad2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	d002      	beq.n	800ad38 <__sflush_r+0x8c>
 800ad32:	4628      	mov	r0, r5
 800ad34:	f7ff f9e0 	bl	800a0f8 <_free_r>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad3c:	e00d      	b.n	800ad5a <__sflush_r+0xae>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b0      	blx	r6
 800ad44:	4602      	mov	r2, r0
 800ad46:	1c50      	adds	r0, r2, #1
 800ad48:	d1c9      	bne.n	800acde <__sflush_r+0x32>
 800ad4a:	682b      	ldr	r3, [r5, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0c6      	beq.n	800acde <__sflush_r+0x32>
 800ad50:	2b1d      	cmp	r3, #29
 800ad52:	d001      	beq.n	800ad58 <__sflush_r+0xac>
 800ad54:	2b16      	cmp	r3, #22
 800ad56:	d11e      	bne.n	800ad96 <__sflush_r+0xea>
 800ad58:	602f      	str	r7, [r5, #0]
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	e022      	b.n	800ada4 <__sflush_r+0xf8>
 800ad5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad62:	b21b      	sxth	r3, r3
 800ad64:	e01b      	b.n	800ad9e <__sflush_r+0xf2>
 800ad66:	690f      	ldr	r7, [r1, #16]
 800ad68:	2f00      	cmp	r7, #0
 800ad6a:	d0f6      	beq.n	800ad5a <__sflush_r+0xae>
 800ad6c:	0793      	lsls	r3, r2, #30
 800ad6e:	680e      	ldr	r6, [r1, #0]
 800ad70:	bf08      	it	eq
 800ad72:	694b      	ldreq	r3, [r1, #20]
 800ad74:	600f      	str	r7, [r1, #0]
 800ad76:	bf18      	it	ne
 800ad78:	2300      	movne	r3, #0
 800ad7a:	eba6 0807 	sub.w	r8, r6, r7
 800ad7e:	608b      	str	r3, [r1, #8]
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	dde9      	ble.n	800ad5a <__sflush_r+0xae>
 800ad86:	6a21      	ldr	r1, [r4, #32]
 800ad88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad8a:	4643      	mov	r3, r8
 800ad8c:	463a      	mov	r2, r7
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b0      	blx	r6
 800ad92:	2800      	cmp	r0, #0
 800ad94:	dc08      	bgt.n	800ada8 <__sflush_r+0xfc>
 800ad96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad9e:	81a3      	strh	r3, [r4, #12]
 800ada0:	f04f 30ff 	mov.w	r0, #4294967295
 800ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada8:	4407      	add	r7, r0
 800adaa:	eba8 0800 	sub.w	r8, r8, r0
 800adae:	e7e7      	b.n	800ad80 <__sflush_r+0xd4>
 800adb0:	dfbffffe 	.word	0xdfbffffe

0800adb4 <_fflush_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	690b      	ldr	r3, [r1, #16]
 800adb8:	4605      	mov	r5, r0
 800adba:	460c      	mov	r4, r1
 800adbc:	b913      	cbnz	r3, 800adc4 <_fflush_r+0x10>
 800adbe:	2500      	movs	r5, #0
 800adc0:	4628      	mov	r0, r5
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	b118      	cbz	r0, 800adce <_fflush_r+0x1a>
 800adc6:	6a03      	ldr	r3, [r0, #32]
 800adc8:	b90b      	cbnz	r3, 800adce <_fflush_r+0x1a>
 800adca:	f7fe fa19 	bl	8009200 <__sinit>
 800adce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0f3      	beq.n	800adbe <_fflush_r+0xa>
 800add6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800add8:	07d0      	lsls	r0, r2, #31
 800adda:	d404      	bmi.n	800ade6 <_fflush_r+0x32>
 800addc:	0599      	lsls	r1, r3, #22
 800adde:	d402      	bmi.n	800ade6 <_fflush_r+0x32>
 800ade0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ade2:	f7fe fb38 	bl	8009456 <__retarget_lock_acquire_recursive>
 800ade6:	4628      	mov	r0, r5
 800ade8:	4621      	mov	r1, r4
 800adea:	f7ff ff5f 	bl	800acac <__sflush_r>
 800adee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adf0:	07da      	lsls	r2, r3, #31
 800adf2:	4605      	mov	r5, r0
 800adf4:	d4e4      	bmi.n	800adc0 <_fflush_r+0xc>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	059b      	lsls	r3, r3, #22
 800adfa:	d4e1      	bmi.n	800adc0 <_fflush_r+0xc>
 800adfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adfe:	f7fe fb2b 	bl	8009458 <__retarget_lock_release_recursive>
 800ae02:	e7dd      	b.n	800adc0 <_fflush_r+0xc>

0800ae04 <memmove>:
 800ae04:	4288      	cmp	r0, r1
 800ae06:	b510      	push	{r4, lr}
 800ae08:	eb01 0402 	add.w	r4, r1, r2
 800ae0c:	d902      	bls.n	800ae14 <memmove+0x10>
 800ae0e:	4284      	cmp	r4, r0
 800ae10:	4623      	mov	r3, r4
 800ae12:	d807      	bhi.n	800ae24 <memmove+0x20>
 800ae14:	1e43      	subs	r3, r0, #1
 800ae16:	42a1      	cmp	r1, r4
 800ae18:	d008      	beq.n	800ae2c <memmove+0x28>
 800ae1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae22:	e7f8      	b.n	800ae16 <memmove+0x12>
 800ae24:	4402      	add	r2, r0
 800ae26:	4601      	mov	r1, r0
 800ae28:	428a      	cmp	r2, r1
 800ae2a:	d100      	bne.n	800ae2e <memmove+0x2a>
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae36:	e7f7      	b.n	800ae28 <memmove+0x24>

0800ae38 <_sbrk_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d06      	ldr	r5, [pc, #24]	@ (800ae54 <_sbrk_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f7f7 f81e 	bl	8001e84 <_sbrk>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_sbrk_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_sbrk_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20000724 	.word	0x20000724

0800ae58 <memcpy>:
 800ae58:	440a      	add	r2, r1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae60:	d100      	bne.n	800ae64 <memcpy+0xc>
 800ae62:	4770      	bx	lr
 800ae64:	b510      	push	{r4, lr}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	d1f9      	bne.n	800ae66 <memcpy+0xe>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <__assert_func>:
 800ae74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae76:	4614      	mov	r4, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4b09      	ldr	r3, [pc, #36]	@ (800aea0 <__assert_func+0x2c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4605      	mov	r5, r0
 800ae80:	68d8      	ldr	r0, [r3, #12]
 800ae82:	b954      	cbnz	r4, 800ae9a <__assert_func+0x26>
 800ae84:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <__assert_func+0x30>)
 800ae86:	461c      	mov	r4, r3
 800ae88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae8c:	9100      	str	r1, [sp, #0]
 800ae8e:	462b      	mov	r3, r5
 800ae90:	4905      	ldr	r1, [pc, #20]	@ (800aea8 <__assert_func+0x34>)
 800ae92:	f000 f86f 	bl	800af74 <fiprintf>
 800ae96:	f000 f87f 	bl	800af98 <abort>
 800ae9a:	4b04      	ldr	r3, [pc, #16]	@ (800aeac <__assert_func+0x38>)
 800ae9c:	e7f4      	b.n	800ae88 <__assert_func+0x14>
 800ae9e:	bf00      	nop
 800aea0:	2000001c 	.word	0x2000001c
 800aea4:	0800b896 	.word	0x0800b896
 800aea8:	0800b868 	.word	0x0800b868
 800aeac:	0800b85b 	.word	0x0800b85b

0800aeb0 <_calloc_r>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	fba1 5402 	umull	r5, r4, r1, r2
 800aeb6:	b93c      	cbnz	r4, 800aec8 <_calloc_r+0x18>
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7ff f991 	bl	800a1e0 <_malloc_r>
 800aebe:	4606      	mov	r6, r0
 800aec0:	b928      	cbnz	r0, 800aece <_calloc_r+0x1e>
 800aec2:	2600      	movs	r6, #0
 800aec4:	4630      	mov	r0, r6
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	220c      	movs	r2, #12
 800aeca:	6002      	str	r2, [r0, #0]
 800aecc:	e7f9      	b.n	800aec2 <_calloc_r+0x12>
 800aece:	462a      	mov	r2, r5
 800aed0:	4621      	mov	r1, r4
 800aed2:	f7fe fa42 	bl	800935a <memset>
 800aed6:	e7f5      	b.n	800aec4 <_calloc_r+0x14>

0800aed8 <__ascii_mbtowc>:
 800aed8:	b082      	sub	sp, #8
 800aeda:	b901      	cbnz	r1, 800aede <__ascii_mbtowc+0x6>
 800aedc:	a901      	add	r1, sp, #4
 800aede:	b142      	cbz	r2, 800aef2 <__ascii_mbtowc+0x1a>
 800aee0:	b14b      	cbz	r3, 800aef6 <__ascii_mbtowc+0x1e>
 800aee2:	7813      	ldrb	r3, [r2, #0]
 800aee4:	600b      	str	r3, [r1, #0]
 800aee6:	7812      	ldrb	r2, [r2, #0]
 800aee8:	1e10      	subs	r0, r2, #0
 800aeea:	bf18      	it	ne
 800aeec:	2001      	movne	r0, #1
 800aeee:	b002      	add	sp, #8
 800aef0:	4770      	bx	lr
 800aef2:	4610      	mov	r0, r2
 800aef4:	e7fb      	b.n	800aeee <__ascii_mbtowc+0x16>
 800aef6:	f06f 0001 	mvn.w	r0, #1
 800aefa:	e7f8      	b.n	800aeee <__ascii_mbtowc+0x16>

0800aefc <_realloc_r>:
 800aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af00:	4680      	mov	r8, r0
 800af02:	4615      	mov	r5, r2
 800af04:	460c      	mov	r4, r1
 800af06:	b921      	cbnz	r1, 800af12 <_realloc_r+0x16>
 800af08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af0c:	4611      	mov	r1, r2
 800af0e:	f7ff b967 	b.w	800a1e0 <_malloc_r>
 800af12:	b92a      	cbnz	r2, 800af20 <_realloc_r+0x24>
 800af14:	f7ff f8f0 	bl	800a0f8 <_free_r>
 800af18:	2400      	movs	r4, #0
 800af1a:	4620      	mov	r0, r4
 800af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af20:	f000 f841 	bl	800afa6 <_malloc_usable_size_r>
 800af24:	4285      	cmp	r5, r0
 800af26:	4606      	mov	r6, r0
 800af28:	d802      	bhi.n	800af30 <_realloc_r+0x34>
 800af2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af2e:	d8f4      	bhi.n	800af1a <_realloc_r+0x1e>
 800af30:	4629      	mov	r1, r5
 800af32:	4640      	mov	r0, r8
 800af34:	f7ff f954 	bl	800a1e0 <_malloc_r>
 800af38:	4607      	mov	r7, r0
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d0ec      	beq.n	800af18 <_realloc_r+0x1c>
 800af3e:	42b5      	cmp	r5, r6
 800af40:	462a      	mov	r2, r5
 800af42:	4621      	mov	r1, r4
 800af44:	bf28      	it	cs
 800af46:	4632      	movcs	r2, r6
 800af48:	f7ff ff86 	bl	800ae58 <memcpy>
 800af4c:	4621      	mov	r1, r4
 800af4e:	4640      	mov	r0, r8
 800af50:	f7ff f8d2 	bl	800a0f8 <_free_r>
 800af54:	463c      	mov	r4, r7
 800af56:	e7e0      	b.n	800af1a <_realloc_r+0x1e>

0800af58 <__ascii_wctomb>:
 800af58:	4603      	mov	r3, r0
 800af5a:	4608      	mov	r0, r1
 800af5c:	b141      	cbz	r1, 800af70 <__ascii_wctomb+0x18>
 800af5e:	2aff      	cmp	r2, #255	@ 0xff
 800af60:	d904      	bls.n	800af6c <__ascii_wctomb+0x14>
 800af62:	228a      	movs	r2, #138	@ 0x8a
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	f04f 30ff 	mov.w	r0, #4294967295
 800af6a:	4770      	bx	lr
 800af6c:	700a      	strb	r2, [r1, #0]
 800af6e:	2001      	movs	r0, #1
 800af70:	4770      	bx	lr
	...

0800af74 <fiprintf>:
 800af74:	b40e      	push	{r1, r2, r3}
 800af76:	b503      	push	{r0, r1, lr}
 800af78:	4601      	mov	r1, r0
 800af7a:	ab03      	add	r3, sp, #12
 800af7c:	4805      	ldr	r0, [pc, #20]	@ (800af94 <fiprintf+0x20>)
 800af7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af82:	6800      	ldr	r0, [r0, #0]
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	f000 f83f 	bl	800b008 <_vfiprintf_r>
 800af8a:	b002      	add	sp, #8
 800af8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af90:	b003      	add	sp, #12
 800af92:	4770      	bx	lr
 800af94:	2000001c 	.word	0x2000001c

0800af98 <abort>:
 800af98:	b508      	push	{r3, lr}
 800af9a:	2006      	movs	r0, #6
 800af9c:	f000 fa08 	bl	800b3b0 <raise>
 800afa0:	2001      	movs	r0, #1
 800afa2:	f7f6 fef7 	bl	8001d94 <_exit>

0800afa6 <_malloc_usable_size_r>:
 800afa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afaa:	1f18      	subs	r0, r3, #4
 800afac:	2b00      	cmp	r3, #0
 800afae:	bfbc      	itt	lt
 800afb0:	580b      	ldrlt	r3, [r1, r0]
 800afb2:	18c0      	addlt	r0, r0, r3
 800afb4:	4770      	bx	lr

0800afb6 <__sfputc_r>:
 800afb6:	6893      	ldr	r3, [r2, #8]
 800afb8:	3b01      	subs	r3, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	b410      	push	{r4}
 800afbe:	6093      	str	r3, [r2, #8]
 800afc0:	da08      	bge.n	800afd4 <__sfputc_r+0x1e>
 800afc2:	6994      	ldr	r4, [r2, #24]
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	db01      	blt.n	800afcc <__sfputc_r+0x16>
 800afc8:	290a      	cmp	r1, #10
 800afca:	d103      	bne.n	800afd4 <__sfputc_r+0x1e>
 800afcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afd0:	f000 b932 	b.w	800b238 <__swbuf_r>
 800afd4:	6813      	ldr	r3, [r2, #0]
 800afd6:	1c58      	adds	r0, r3, #1
 800afd8:	6010      	str	r0, [r2, #0]
 800afda:	7019      	strb	r1, [r3, #0]
 800afdc:	4608      	mov	r0, r1
 800afde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <__sfputs_r>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	4606      	mov	r6, r0
 800afe8:	460f      	mov	r7, r1
 800afea:	4614      	mov	r4, r2
 800afec:	18d5      	adds	r5, r2, r3
 800afee:	42ac      	cmp	r4, r5
 800aff0:	d101      	bne.n	800aff6 <__sfputs_r+0x12>
 800aff2:	2000      	movs	r0, #0
 800aff4:	e007      	b.n	800b006 <__sfputs_r+0x22>
 800aff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affa:	463a      	mov	r2, r7
 800affc:	4630      	mov	r0, r6
 800affe:	f7ff ffda 	bl	800afb6 <__sfputc_r>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d1f3      	bne.n	800afee <__sfputs_r+0xa>
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b008 <_vfiprintf_r>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	460d      	mov	r5, r1
 800b00e:	b09d      	sub	sp, #116	@ 0x74
 800b010:	4614      	mov	r4, r2
 800b012:	4698      	mov	r8, r3
 800b014:	4606      	mov	r6, r0
 800b016:	b118      	cbz	r0, 800b020 <_vfiprintf_r+0x18>
 800b018:	6a03      	ldr	r3, [r0, #32]
 800b01a:	b90b      	cbnz	r3, 800b020 <_vfiprintf_r+0x18>
 800b01c:	f7fe f8f0 	bl	8009200 <__sinit>
 800b020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b022:	07d9      	lsls	r1, r3, #31
 800b024:	d405      	bmi.n	800b032 <_vfiprintf_r+0x2a>
 800b026:	89ab      	ldrh	r3, [r5, #12]
 800b028:	059a      	lsls	r2, r3, #22
 800b02a:	d402      	bmi.n	800b032 <_vfiprintf_r+0x2a>
 800b02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b02e:	f7fe fa12 	bl	8009456 <__retarget_lock_acquire_recursive>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	071b      	lsls	r3, r3, #28
 800b036:	d501      	bpl.n	800b03c <_vfiprintf_r+0x34>
 800b038:	692b      	ldr	r3, [r5, #16]
 800b03a:	b99b      	cbnz	r3, 800b064 <_vfiprintf_r+0x5c>
 800b03c:	4629      	mov	r1, r5
 800b03e:	4630      	mov	r0, r6
 800b040:	f000 f938 	bl	800b2b4 <__swsetup_r>
 800b044:	b170      	cbz	r0, 800b064 <_vfiprintf_r+0x5c>
 800b046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b048:	07dc      	lsls	r4, r3, #31
 800b04a:	d504      	bpl.n	800b056 <_vfiprintf_r+0x4e>
 800b04c:	f04f 30ff 	mov.w	r0, #4294967295
 800b050:	b01d      	add	sp, #116	@ 0x74
 800b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	0598      	lsls	r0, r3, #22
 800b05a:	d4f7      	bmi.n	800b04c <_vfiprintf_r+0x44>
 800b05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b05e:	f7fe f9fb 	bl	8009458 <__retarget_lock_release_recursive>
 800b062:	e7f3      	b.n	800b04c <_vfiprintf_r+0x44>
 800b064:	2300      	movs	r3, #0
 800b066:	9309      	str	r3, [sp, #36]	@ 0x24
 800b068:	2320      	movs	r3, #32
 800b06a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b072:	2330      	movs	r3, #48	@ 0x30
 800b074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b224 <_vfiprintf_r+0x21c>
 800b078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b07c:	f04f 0901 	mov.w	r9, #1
 800b080:	4623      	mov	r3, r4
 800b082:	469a      	mov	sl, r3
 800b084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b088:	b10a      	cbz	r2, 800b08e <_vfiprintf_r+0x86>
 800b08a:	2a25      	cmp	r2, #37	@ 0x25
 800b08c:	d1f9      	bne.n	800b082 <_vfiprintf_r+0x7a>
 800b08e:	ebba 0b04 	subs.w	fp, sl, r4
 800b092:	d00b      	beq.n	800b0ac <_vfiprintf_r+0xa4>
 800b094:	465b      	mov	r3, fp
 800b096:	4622      	mov	r2, r4
 800b098:	4629      	mov	r1, r5
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ffa2 	bl	800afe4 <__sfputs_r>
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f000 80a7 	beq.w	800b1f4 <_vfiprintf_r+0x1ec>
 800b0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0a8:	445a      	add	r2, fp
 800b0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 809f 	beq.w	800b1f4 <_vfiprintf_r+0x1ec>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0c0:	f10a 0a01 	add.w	sl, sl, #1
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ce:	4654      	mov	r4, sl
 800b0d0:	2205      	movs	r2, #5
 800b0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d6:	4853      	ldr	r0, [pc, #332]	@ (800b224 <_vfiprintf_r+0x21c>)
 800b0d8:	f7f5 f882 	bl	80001e0 <memchr>
 800b0dc:	9a04      	ldr	r2, [sp, #16]
 800b0de:	b9d8      	cbnz	r0, 800b118 <_vfiprintf_r+0x110>
 800b0e0:	06d1      	lsls	r1, r2, #27
 800b0e2:	bf44      	itt	mi
 800b0e4:	2320      	movmi	r3, #32
 800b0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0ea:	0713      	lsls	r3, r2, #28
 800b0ec:	bf44      	itt	mi
 800b0ee:	232b      	movmi	r3, #43	@ 0x2b
 800b0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0fa:	d015      	beq.n	800b128 <_vfiprintf_r+0x120>
 800b0fc:	9a07      	ldr	r2, [sp, #28]
 800b0fe:	4654      	mov	r4, sl
 800b100:	2000      	movs	r0, #0
 800b102:	f04f 0c0a 	mov.w	ip, #10
 800b106:	4621      	mov	r1, r4
 800b108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b10c:	3b30      	subs	r3, #48	@ 0x30
 800b10e:	2b09      	cmp	r3, #9
 800b110:	d94b      	bls.n	800b1aa <_vfiprintf_r+0x1a2>
 800b112:	b1b0      	cbz	r0, 800b142 <_vfiprintf_r+0x13a>
 800b114:	9207      	str	r2, [sp, #28]
 800b116:	e014      	b.n	800b142 <_vfiprintf_r+0x13a>
 800b118:	eba0 0308 	sub.w	r3, r0, r8
 800b11c:	fa09 f303 	lsl.w	r3, r9, r3
 800b120:	4313      	orrs	r3, r2
 800b122:	9304      	str	r3, [sp, #16]
 800b124:	46a2      	mov	sl, r4
 800b126:	e7d2      	b.n	800b0ce <_vfiprintf_r+0xc6>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	1d19      	adds	r1, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9103      	str	r1, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfbb      	ittet	lt
 800b134:	425b      	neglt	r3, r3
 800b136:	f042 0202 	orrlt.w	r2, r2, #2
 800b13a:	9307      	strge	r3, [sp, #28]
 800b13c:	9307      	strlt	r3, [sp, #28]
 800b13e:	bfb8      	it	lt
 800b140:	9204      	strlt	r2, [sp, #16]
 800b142:	7823      	ldrb	r3, [r4, #0]
 800b144:	2b2e      	cmp	r3, #46	@ 0x2e
 800b146:	d10a      	bne.n	800b15e <_vfiprintf_r+0x156>
 800b148:	7863      	ldrb	r3, [r4, #1]
 800b14a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b14c:	d132      	bne.n	800b1b4 <_vfiprintf_r+0x1ac>
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	1d1a      	adds	r2, r3, #4
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	9203      	str	r2, [sp, #12]
 800b156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b15a:	3402      	adds	r4, #2
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b234 <_vfiprintf_r+0x22c>
 800b162:	7821      	ldrb	r1, [r4, #0]
 800b164:	2203      	movs	r2, #3
 800b166:	4650      	mov	r0, sl
 800b168:	f7f5 f83a 	bl	80001e0 <memchr>
 800b16c:	b138      	cbz	r0, 800b17e <_vfiprintf_r+0x176>
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	eba0 000a 	sub.w	r0, r0, sl
 800b174:	2240      	movs	r2, #64	@ 0x40
 800b176:	4082      	lsls	r2, r0
 800b178:	4313      	orrs	r3, r2
 800b17a:	3401      	adds	r4, #1
 800b17c:	9304      	str	r3, [sp, #16]
 800b17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b182:	4829      	ldr	r0, [pc, #164]	@ (800b228 <_vfiprintf_r+0x220>)
 800b184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b188:	2206      	movs	r2, #6
 800b18a:	f7f5 f829 	bl	80001e0 <memchr>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d03f      	beq.n	800b212 <_vfiprintf_r+0x20a>
 800b192:	4b26      	ldr	r3, [pc, #152]	@ (800b22c <_vfiprintf_r+0x224>)
 800b194:	bb1b      	cbnz	r3, 800b1de <_vfiprintf_r+0x1d6>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	3307      	adds	r3, #7
 800b19a:	f023 0307 	bic.w	r3, r3, #7
 800b19e:	3308      	adds	r3, #8
 800b1a0:	9303      	str	r3, [sp, #12]
 800b1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a4:	443b      	add	r3, r7
 800b1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a8:	e76a      	b.n	800b080 <_vfiprintf_r+0x78>
 800b1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	e7a8      	b.n	800b106 <_vfiprintf_r+0xfe>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	3401      	adds	r4, #1
 800b1b8:	9305      	str	r3, [sp, #20]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	f04f 0c0a 	mov.w	ip, #10
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1c6:	3a30      	subs	r2, #48	@ 0x30
 800b1c8:	2a09      	cmp	r2, #9
 800b1ca:	d903      	bls.n	800b1d4 <_vfiprintf_r+0x1cc>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0c6      	beq.n	800b15e <_vfiprintf_r+0x156>
 800b1d0:	9105      	str	r1, [sp, #20]
 800b1d2:	e7c4      	b.n	800b15e <_vfiprintf_r+0x156>
 800b1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1d8:	4604      	mov	r4, r0
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e7f0      	b.n	800b1c0 <_vfiprintf_r+0x1b8>
 800b1de:	ab03      	add	r3, sp, #12
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	4b12      	ldr	r3, [pc, #72]	@ (800b230 <_vfiprintf_r+0x228>)
 800b1e6:	a904      	add	r1, sp, #16
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7fd fbc5 	bl	8008978 <_printf_float>
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	1c78      	adds	r0, r7, #1
 800b1f2:	d1d6      	bne.n	800b1a2 <_vfiprintf_r+0x19a>
 800b1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1f6:	07d9      	lsls	r1, r3, #31
 800b1f8:	d405      	bmi.n	800b206 <_vfiprintf_r+0x1fe>
 800b1fa:	89ab      	ldrh	r3, [r5, #12]
 800b1fc:	059a      	lsls	r2, r3, #22
 800b1fe:	d402      	bmi.n	800b206 <_vfiprintf_r+0x1fe>
 800b200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b202:	f7fe f929 	bl	8009458 <__retarget_lock_release_recursive>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	065b      	lsls	r3, r3, #25
 800b20a:	f53f af1f 	bmi.w	800b04c <_vfiprintf_r+0x44>
 800b20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b210:	e71e      	b.n	800b050 <_vfiprintf_r+0x48>
 800b212:	ab03      	add	r3, sp, #12
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	462a      	mov	r2, r5
 800b218:	4b05      	ldr	r3, [pc, #20]	@ (800b230 <_vfiprintf_r+0x228>)
 800b21a:	a904      	add	r1, sp, #16
 800b21c:	4630      	mov	r0, r6
 800b21e:	f7fd fe43 	bl	8008ea8 <_printf_i>
 800b222:	e7e4      	b.n	800b1ee <_vfiprintf_r+0x1e6>
 800b224:	0800b840 	.word	0x0800b840
 800b228:	0800b84a 	.word	0x0800b84a
 800b22c:	08008979 	.word	0x08008979
 800b230:	0800afe5 	.word	0x0800afe5
 800b234:	0800b846 	.word	0x0800b846

0800b238 <__swbuf_r>:
 800b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23a:	460e      	mov	r6, r1
 800b23c:	4614      	mov	r4, r2
 800b23e:	4605      	mov	r5, r0
 800b240:	b118      	cbz	r0, 800b24a <__swbuf_r+0x12>
 800b242:	6a03      	ldr	r3, [r0, #32]
 800b244:	b90b      	cbnz	r3, 800b24a <__swbuf_r+0x12>
 800b246:	f7fd ffdb 	bl	8009200 <__sinit>
 800b24a:	69a3      	ldr	r3, [r4, #24]
 800b24c:	60a3      	str	r3, [r4, #8]
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	071a      	lsls	r2, r3, #28
 800b252:	d501      	bpl.n	800b258 <__swbuf_r+0x20>
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	b943      	cbnz	r3, 800b26a <__swbuf_r+0x32>
 800b258:	4621      	mov	r1, r4
 800b25a:	4628      	mov	r0, r5
 800b25c:	f000 f82a 	bl	800b2b4 <__swsetup_r>
 800b260:	b118      	cbz	r0, 800b26a <__swbuf_r+0x32>
 800b262:	f04f 37ff 	mov.w	r7, #4294967295
 800b266:	4638      	mov	r0, r7
 800b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	6922      	ldr	r2, [r4, #16]
 800b26e:	1a98      	subs	r0, r3, r2
 800b270:	6963      	ldr	r3, [r4, #20]
 800b272:	b2f6      	uxtb	r6, r6
 800b274:	4283      	cmp	r3, r0
 800b276:	4637      	mov	r7, r6
 800b278:	dc05      	bgt.n	800b286 <__swbuf_r+0x4e>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4628      	mov	r0, r5
 800b27e:	f7ff fd99 	bl	800adb4 <_fflush_r>
 800b282:	2800      	cmp	r0, #0
 800b284:	d1ed      	bne.n	800b262 <__swbuf_r+0x2a>
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	3b01      	subs	r3, #1
 800b28a:	60a3      	str	r3, [r4, #8]
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	6022      	str	r2, [r4, #0]
 800b292:	701e      	strb	r6, [r3, #0]
 800b294:	6962      	ldr	r2, [r4, #20]
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	429a      	cmp	r2, r3
 800b29a:	d004      	beq.n	800b2a6 <__swbuf_r+0x6e>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	07db      	lsls	r3, r3, #31
 800b2a0:	d5e1      	bpl.n	800b266 <__swbuf_r+0x2e>
 800b2a2:	2e0a      	cmp	r6, #10
 800b2a4:	d1df      	bne.n	800b266 <__swbuf_r+0x2e>
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f7ff fd83 	bl	800adb4 <_fflush_r>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d0d9      	beq.n	800b266 <__swbuf_r+0x2e>
 800b2b2:	e7d6      	b.n	800b262 <__swbuf_r+0x2a>

0800b2b4 <__swsetup_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4b29      	ldr	r3, [pc, #164]	@ (800b35c <__swsetup_r+0xa8>)
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	6818      	ldr	r0, [r3, #0]
 800b2bc:	460c      	mov	r4, r1
 800b2be:	b118      	cbz	r0, 800b2c8 <__swsetup_r+0x14>
 800b2c0:	6a03      	ldr	r3, [r0, #32]
 800b2c2:	b90b      	cbnz	r3, 800b2c8 <__swsetup_r+0x14>
 800b2c4:	f7fd ff9c 	bl	8009200 <__sinit>
 800b2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2cc:	0719      	lsls	r1, r3, #28
 800b2ce:	d422      	bmi.n	800b316 <__swsetup_r+0x62>
 800b2d0:	06da      	lsls	r2, r3, #27
 800b2d2:	d407      	bmi.n	800b2e4 <__swsetup_r+0x30>
 800b2d4:	2209      	movs	r2, #9
 800b2d6:	602a      	str	r2, [r5, #0]
 800b2d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e2:	e033      	b.n	800b34c <__swsetup_r+0x98>
 800b2e4:	0758      	lsls	r0, r3, #29
 800b2e6:	d512      	bpl.n	800b30e <__swsetup_r+0x5a>
 800b2e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2ea:	b141      	cbz	r1, 800b2fe <__swsetup_r+0x4a>
 800b2ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2f0:	4299      	cmp	r1, r3
 800b2f2:	d002      	beq.n	800b2fa <__swsetup_r+0x46>
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f7fe feff 	bl	800a0f8 <_free_r>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b304:	81a3      	strh	r3, [r4, #12]
 800b306:	2300      	movs	r3, #0
 800b308:	6063      	str	r3, [r4, #4]
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	f043 0308 	orr.w	r3, r3, #8
 800b314:	81a3      	strh	r3, [r4, #12]
 800b316:	6923      	ldr	r3, [r4, #16]
 800b318:	b94b      	cbnz	r3, 800b32e <__swsetup_r+0x7a>
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b324:	d003      	beq.n	800b32e <__swsetup_r+0x7a>
 800b326:	4621      	mov	r1, r4
 800b328:	4628      	mov	r0, r5
 800b32a:	f000 f883 	bl	800b434 <__smakebuf_r>
 800b32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b332:	f013 0201 	ands.w	r2, r3, #1
 800b336:	d00a      	beq.n	800b34e <__swsetup_r+0x9a>
 800b338:	2200      	movs	r2, #0
 800b33a:	60a2      	str	r2, [r4, #8]
 800b33c:	6962      	ldr	r2, [r4, #20]
 800b33e:	4252      	negs	r2, r2
 800b340:	61a2      	str	r2, [r4, #24]
 800b342:	6922      	ldr	r2, [r4, #16]
 800b344:	b942      	cbnz	r2, 800b358 <__swsetup_r+0xa4>
 800b346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b34a:	d1c5      	bne.n	800b2d8 <__swsetup_r+0x24>
 800b34c:	bd38      	pop	{r3, r4, r5, pc}
 800b34e:	0799      	lsls	r1, r3, #30
 800b350:	bf58      	it	pl
 800b352:	6962      	ldrpl	r2, [r4, #20]
 800b354:	60a2      	str	r2, [r4, #8]
 800b356:	e7f4      	b.n	800b342 <__swsetup_r+0x8e>
 800b358:	2000      	movs	r0, #0
 800b35a:	e7f7      	b.n	800b34c <__swsetup_r+0x98>
 800b35c:	2000001c 	.word	0x2000001c

0800b360 <_raise_r>:
 800b360:	291f      	cmp	r1, #31
 800b362:	b538      	push	{r3, r4, r5, lr}
 800b364:	4605      	mov	r5, r0
 800b366:	460c      	mov	r4, r1
 800b368:	d904      	bls.n	800b374 <_raise_r+0x14>
 800b36a:	2316      	movs	r3, #22
 800b36c:	6003      	str	r3, [r0, #0]
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b376:	b112      	cbz	r2, 800b37e <_raise_r+0x1e>
 800b378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b37c:	b94b      	cbnz	r3, 800b392 <_raise_r+0x32>
 800b37e:	4628      	mov	r0, r5
 800b380:	f000 f830 	bl	800b3e4 <_getpid_r>
 800b384:	4622      	mov	r2, r4
 800b386:	4601      	mov	r1, r0
 800b388:	4628      	mov	r0, r5
 800b38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b38e:	f000 b817 	b.w	800b3c0 <_kill_r>
 800b392:	2b01      	cmp	r3, #1
 800b394:	d00a      	beq.n	800b3ac <_raise_r+0x4c>
 800b396:	1c59      	adds	r1, r3, #1
 800b398:	d103      	bne.n	800b3a2 <_raise_r+0x42>
 800b39a:	2316      	movs	r3, #22
 800b39c:	6003      	str	r3, [r0, #0]
 800b39e:	2001      	movs	r0, #1
 800b3a0:	e7e7      	b.n	800b372 <_raise_r+0x12>
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4798      	blx	r3
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	e7e0      	b.n	800b372 <_raise_r+0x12>

0800b3b0 <raise>:
 800b3b0:	4b02      	ldr	r3, [pc, #8]	@ (800b3bc <raise+0xc>)
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	f7ff bfd3 	b.w	800b360 <_raise_r>
 800b3ba:	bf00      	nop
 800b3bc:	2000001c 	.word	0x2000001c

0800b3c0 <_kill_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d07      	ldr	r5, [pc, #28]	@ (800b3e0 <_kill_r+0x20>)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	f7f6 fcd1 	bl	8001d74 <_kill>
 800b3d2:	1c43      	adds	r3, r0, #1
 800b3d4:	d102      	bne.n	800b3dc <_kill_r+0x1c>
 800b3d6:	682b      	ldr	r3, [r5, #0]
 800b3d8:	b103      	cbz	r3, 800b3dc <_kill_r+0x1c>
 800b3da:	6023      	str	r3, [r4, #0]
 800b3dc:	bd38      	pop	{r3, r4, r5, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000724 	.word	0x20000724

0800b3e4 <_getpid_r>:
 800b3e4:	f7f6 bcbe 	b.w	8001d64 <_getpid>

0800b3e8 <__swhatbuf_r>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	2900      	cmp	r1, #0
 800b3f2:	b096      	sub	sp, #88	@ 0x58
 800b3f4:	4615      	mov	r5, r2
 800b3f6:	461e      	mov	r6, r3
 800b3f8:	da0d      	bge.n	800b416 <__swhatbuf_r+0x2e>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b400:	f04f 0100 	mov.w	r1, #0
 800b404:	bf14      	ite	ne
 800b406:	2340      	movne	r3, #64	@ 0x40
 800b408:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b40c:	2000      	movs	r0, #0
 800b40e:	6031      	str	r1, [r6, #0]
 800b410:	602b      	str	r3, [r5, #0]
 800b412:	b016      	add	sp, #88	@ 0x58
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	466a      	mov	r2, sp
 800b418:	f000 f848 	bl	800b4ac <_fstat_r>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	dbec      	blt.n	800b3fa <__swhatbuf_r+0x12>
 800b420:	9901      	ldr	r1, [sp, #4]
 800b422:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b426:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b42a:	4259      	negs	r1, r3
 800b42c:	4159      	adcs	r1, r3
 800b42e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b432:	e7eb      	b.n	800b40c <__swhatbuf_r+0x24>

0800b434 <__smakebuf_r>:
 800b434:	898b      	ldrh	r3, [r1, #12]
 800b436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b438:	079d      	lsls	r5, r3, #30
 800b43a:	4606      	mov	r6, r0
 800b43c:	460c      	mov	r4, r1
 800b43e:	d507      	bpl.n	800b450 <__smakebuf_r+0x1c>
 800b440:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	6123      	str	r3, [r4, #16]
 800b448:	2301      	movs	r3, #1
 800b44a:	6163      	str	r3, [r4, #20]
 800b44c:	b003      	add	sp, #12
 800b44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b450:	ab01      	add	r3, sp, #4
 800b452:	466a      	mov	r2, sp
 800b454:	f7ff ffc8 	bl	800b3e8 <__swhatbuf_r>
 800b458:	9f00      	ldr	r7, [sp, #0]
 800b45a:	4605      	mov	r5, r0
 800b45c:	4639      	mov	r1, r7
 800b45e:	4630      	mov	r0, r6
 800b460:	f7fe febe 	bl	800a1e0 <_malloc_r>
 800b464:	b948      	cbnz	r0, 800b47a <__smakebuf_r+0x46>
 800b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46a:	059a      	lsls	r2, r3, #22
 800b46c:	d4ee      	bmi.n	800b44c <__smakebuf_r+0x18>
 800b46e:	f023 0303 	bic.w	r3, r3, #3
 800b472:	f043 0302 	orr.w	r3, r3, #2
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	e7e2      	b.n	800b440 <__smakebuf_r+0xc>
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	6020      	str	r0, [r4, #0]
 800b47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	9b01      	ldr	r3, [sp, #4]
 800b486:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b48a:	b15b      	cbz	r3, 800b4a4 <__smakebuf_r+0x70>
 800b48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b490:	4630      	mov	r0, r6
 800b492:	f000 f81d 	bl	800b4d0 <_isatty_r>
 800b496:	b128      	cbz	r0, 800b4a4 <__smakebuf_r+0x70>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f023 0303 	bic.w	r3, r3, #3
 800b49e:	f043 0301 	orr.w	r3, r3, #1
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	431d      	orrs	r5, r3
 800b4a8:	81a5      	strh	r5, [r4, #12]
 800b4aa:	e7cf      	b.n	800b44c <__smakebuf_r+0x18>

0800b4ac <_fstat_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d07      	ldr	r5, [pc, #28]	@ (800b4cc <_fstat_r+0x20>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	f7f6 fcbb 	bl	8001e34 <_fstat>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	d102      	bne.n	800b4c8 <_fstat_r+0x1c>
 800b4c2:	682b      	ldr	r3, [r5, #0]
 800b4c4:	b103      	cbz	r3, 800b4c8 <_fstat_r+0x1c>
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20000724 	.word	0x20000724

0800b4d0 <_isatty_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4d06      	ldr	r5, [pc, #24]	@ (800b4ec <_isatty_r+0x1c>)
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	4608      	mov	r0, r1
 800b4da:	602b      	str	r3, [r5, #0]
 800b4dc:	f7f6 fcba 	bl	8001e54 <_isatty>
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	d102      	bne.n	800b4ea <_isatty_r+0x1a>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	b103      	cbz	r3, 800b4ea <_isatty_r+0x1a>
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	20000724 	.word	0x20000724

0800b4f0 <_init>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	bf00      	nop
 800b4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f6:	bc08      	pop	{r3}
 800b4f8:	469e      	mov	lr, r3
 800b4fa:	4770      	bx	lr

0800b4fc <_fini>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	bf00      	nop
 800b500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b502:	bc08      	pop	{r3}
 800b504:	469e      	mov	lr, r3
 800b506:	4770      	bx	lr
